{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"source/images/Pastedimage20250615154243.png","path":"images/Pastedimage20250615154243.png","modified":0,"renderable":0},{"_id":"source/images/Pastedimage20250615170843.png","path":"images/Pastedimage20250615170843.png","modified":0,"renderable":0},{"_id":"source/images/Pastedimage20250615172020.png","path":"images/Pastedimage20250615172020.png","modified":0,"renderable":0},{"_id":"source/images/Pastedimage20250615172423.png","path":"images/Pastedimage20250615172423.png","modified":0,"renderable":0},{"_id":"source/images/Pastedimage20250615173326.png","path":"images/Pastedimage20250615173326.png","modified":0,"renderable":0},{"_id":"source/images/Pastedimage20250615175444.png","path":"images/Pastedimage20250615175444.png","modified":0,"renderable":0},{"_id":"source/images/Pastedimage20250615175558.png","path":"images/Pastedimage20250615175558.png","modified":0,"renderable":0},{"_id":"source/images/Pastedimage20250615175613.png","path":"images/Pastedimage20250615175613.png","modified":0,"renderable":0},{"_id":"source/images/Pastedimage20250615184116.png","path":"images/Pastedimage20250615184116.png","modified":0,"renderable":0},{"_id":"source/images/Pastedimage20250615211618.png","path":"images/Pastedimage20250615211618.png","modified":0,"renderable":0},{"_id":"source/images/Pastedimage20250615213033.png","path":"images/Pastedimage20250615213033.png","modified":0,"renderable":0},{"_id":"source/images/Pastedimage20250615195658.png","path":"images/Pastedimage20250615195658.png","modified":0,"renderable":0},{"_id":"source/images/Pastedimage20250615213603.png","path":"images/Pastedimage20250615213603.png","modified":0,"renderable":0},{"_id":"source/images/Pastedimage20250615223111.png","path":"images/Pastedimage20250615223111.png","modified":0,"renderable":0},{"_id":"source/images/Pastedimage20250615223116.png","path":"images/Pastedimage20250615223116.png","modified":0,"renderable":0},{"_id":"source/images/Pastedimage20250615223118.png","path":"images/Pastedimage20250615223118.png","modified":0,"renderable":0},{"_id":"source/images/Pastedimage20250615223202.png","path":"images/Pastedimage20250615223202.png","modified":0,"renderable":0},{"_id":"source/images/Pastedimage20250615223538.png","path":"images/Pastedimage20250615223538.png","modified":0,"renderable":0},{"_id":"source/images/Pastedimage20250615230527.png","path":"images/Pastedimage20250615230527.png","modified":0,"renderable":0},{"_id":"node_modules/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","path":"css/noscript.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","path":"js/comments.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/config.js","path":"js/config.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","path":"js/pjax.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","path":"js/schedule.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/sidebar.js","path":"js/sidebar.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/addtoany.js","path":"js/third-party/addtoany.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/matomo.js","path":"js/third-party/analytics/matomo.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/wavedrom.js","path":"js/third-party/tags/wavedrom.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_data/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1749911507908},{"_id":"source/.obsidian/app.json","hash":"bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f","modified":1750052462607},{"_id":"source/.obsidian/appearance.json","hash":"bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f","modified":1750052462608},{"_id":"source/.obsidian/core-plugins.json","hash":"2a08642e2455d9db3afbaebcfb27b2884a1fb59e","modified":1750052462123},{"_id":"source/Debug/index.md","hash":"dbd53ffd186fe934a9f0bb2f1ee0331468b900c1","modified":1749907900935},{"_id":"source/Debug/博客流程.md","hash":"0d9152727b7de07855c1f676c86ac40aa5c92832","modified":1749898093725},{"_id":"source/CS61B/Leb03.md","hash":"20f3a82e75b3f0e2c9584469b867ecb94649900f","modified":1750054732186},{"_id":"source/.obsidian/workspace.json","hash":"d35937dcff8d90b4d2a4ffd090a9f8a4d8146f0e","modified":1750054675040},{"_id":"source/CS61B/index.md","hash":"95b3ef22a787d9d5b94c2548cce55f819dd69e61","modified":1750001299492},{"_id":"source/CS61B/proj0.md","hash":"10ac8a5657d810df1caa5f14e066d5e311ee8d74","modified":1749961890312},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1749815261237},{"_id":"source/images/Pastedimage20250615154243.png","hash":"d1072ea1435886d68292a14ec6f91a69df24ff36","modified":1749973363641},{"_id":"source/images/Pastedimage20250615170843.png","hash":"7b7a71e247393af48dfedcd03852fa2fc3f21fb9","modified":1749978523781},{"_id":"source/images/Pastedimage20250615172020.png","hash":"287e42bc4a16f00698823170ea61249949139221","modified":1749979220438},{"_id":"source/images/Pastedimage20250615172423.png","hash":"bab763c6f5d11648e13f3184407fa3f63d72f51d","modified":1749979463732},{"_id":"source/images/Pastedimage20250615173326.png","hash":"7c25360c9cc092acca14fb194d89fbdcd28b69c1","modified":1749980006027},{"_id":"source/images/Pastedimage20250615175444.png","hash":"5c570b1c5cd756410875ab019745a4bd933ed1d2","modified":1749981284055},{"_id":"source/images/Pastedimage20250615175558.png","hash":"10e11dec577257727fac0d3e84a05fa5314198cb","modified":1749981358413},{"_id":"source/images/Pastedimage20250615175613.png","hash":"dcb37094635acdc153b7731a4f8a8499535ad6ef","modified":1749981373173},{"_id":"source/images/Pastedimage20250615184116.png","hash":"4916dc0d99713069f7a71c0d6224aab013ab6343","modified":1749984076894},{"_id":"source/images/Pastedimage20250615211618.png","hash":"fc83ae0142b34f6254ee391f7251fce3fbb44d7b","modified":1749993378522},{"_id":"source/images/Pastedimage20250615213033.png","hash":"ac1ab4a24982b1544349e8514dccd44920b0d941","modified":1749994233464},{"_id":"source/images/Pastedimage20250615195658.png","hash":"af0157dd38d013c05880bcc1f6c57bea7721f1f0","modified":1749988618638},{"_id":"source/images/Pastedimage20250615213603.png","hash":"4d66767a0eaa866f42f89d3c2f9692907144a8f1","modified":1749994563826},{"_id":"source/images/Pastedimage20250615223111.png","hash":"513dcbc39dd434cabf019a6eea78256fb8167af6","modified":1749997871086},{"_id":"source/images/Pastedimage20250615223116.png","hash":"54aa531107a7fa450cbec6949f9440bd703bcd83","modified":1749997876144},{"_id":"source/images/Pastedimage20250615223118.png","hash":"54aa531107a7fa450cbec6949f9440bd703bcd83","modified":1749997878694},{"_id":"source/Debug/Blog/Blog.md","hash":"40328db072b9a4c1c76f3ca0ed6a2934067c2aaa","modified":1749896051212},{"_id":"source/images/Pastedimage20250615223538.png","hash":"cf39b6b5f9d2a7d1a9b5013283bcf2589f1b0c0e","modified":1749998138600},{"_id":"source/CS61B/.obsidian/app.json","hash":"009a3952701c890112985208d91a34d936f858dc","modified":1750052612297},{"_id":"source/images/Pastedimage20250615230527.png","hash":"21e9faf20a6c1c3f186356e53690fe89b2caabde","modified":1749999927572},{"_id":"source/CS61B/.obsidian/appearance.json","hash":"bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f","modified":1750052612299},{"_id":"source/CS61B/.obsidian/core-plugins.json","hash":"2a08642e2455d9db3afbaebcfb27b2884a1fb59e","modified":1750052462248},{"_id":"source/CS61B/.obsidian/workspace.json","hash":"5173122b5ce0909f4a2358763b906ba0bc058cdf","modified":1750052636446},{"_id":"source/_posts/source/Debug/博客流程.md","hash":"83e7a6845cfee907c7e2bc9d4f7c657471c14cee","modified":1749897459475},{"_id":"source/images/Pastedimage20250615223202.png","hash":"edd8c4c4a706a8ef8a05a91c461f53a4f7114a4b","modified":1749997922580},{"_id":"node_modules/hexo-theme-next/_vendors.yml","hash":"49743c5be6dfff1fb78db0c8042f1b72b596201b","modified":1749893987214},{"_id":"node_modules/hexo-theme-next/README.md","hash":"da88b205b702bcf222548466ddcac1883c9e347e","modified":1749893986931},{"_id":"node_modules/hexo-theme-next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1749893986573},{"_id":"node_modules/hexo-theme-next/_config.yml","hash":"5d78b4d02279d87a45724d1616c01b738c084adc","modified":1749893987212},{"_id":"node_modules/hexo-theme-next/LICENSE.md","hash":"68fc9a03d50fd4b5ea97092b05967d1819dea2c4","modified":1749893986706},{"_id":"node_modules/hexo-theme-next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":1749893986576},{"_id":"node_modules/hexo-theme-next/package.json","hash":"ac9f70b4cb0c0385fc89f51acfb4a8507cdba992","modified":1749893986564},{"_id":"node_modules/hexo-theme-next/layout/_layout.njk","hash":"b17d44bd7379c23241053a0b7fbd38c9c43cc239","modified":1749893986933},{"_id":"node_modules/hexo-theme-next/docs/LICENSE.txt","hash":"f5b14f791b7cfa1d16da981d929152e088a5d1b8","modified":1749893987204},{"_id":"node_modules/hexo-theme-next/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":1749893986939},{"_id":"node_modules/hexo-theme-next/layout/index.njk","hash":"dd63e488ae8cc144335a5958acedf6a16edd7a92","modified":1749893986976},{"_id":"node_modules/hexo-theme-next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":1749893986929},{"_id":"node_modules/hexo-theme-next/layout/category.njk","hash":"c68b7343d0f8145010f93351908cc36ef6212ec1","modified":1749893986945},{"_id":"node_modules/hexo-theme-next/layout/tag.njk","hash":"9e16ba20c28a7f2c6bc75aa427f48122301a30aa","modified":1749893987022},{"_id":"node_modules/hexo-theme-next/languages/bn.yml","hash":"564bed75da6e05b11dce6164508f97a15e2fb6c2","modified":1749893987220},{"_id":"node_modules/hexo-theme-next/languages/ar.yml","hash":"7d0f39e8684284a04bb9808521c87fecda8bd131","modified":1749893987218},{"_id":"node_modules/hexo-theme-next/layout/page.njk","hash":"af6d7570621be760536c216a56d74e40a1cceae2","modified":1749893986995},{"_id":"node_modules/hexo-theme-next/layout/post.njk","hash":"0bfce9f133f501a9a4837257e3b862b3bbca15be","modified":1749893987014},{"_id":"node_modules/hexo-theme-next/languages/de.yml","hash":"79b37df731c29665dee6cd7c90d278e1edfb6e24","modified":1749893987222},{"_id":"node_modules/hexo-theme-next/languages/en.yml","hash":"ba0fd79a2b1d8db01a034180556061745965ff05","modified":1749893987225},{"_id":"node_modules/hexo-theme-next/languages/fa.yml","hash":"f3ffc444599f4ac92d62e9ed00a1490ebc277d70","modified":1749893987592},{"_id":"node_modules/hexo-theme-next/languages/eo.yml","hash":"e34bb33ae827bf2f0727088599a73bc64bdad1b0","modified":1749893987227},{"_id":"node_modules/hexo-theme-next/languages/fr.yml","hash":"8ac44e58f71a38b7697a2f7f98a6971ed818cb5b","modified":1749893987595},{"_id":"node_modules/hexo-theme-next/languages/es.yml","hash":"dffc63ef42e1266b88e0acf08994fd17a9908d53","modified":1749893987589},{"_id":"node_modules/hexo-theme-next/languages/it.yml","hash":"16d716ecfd748def2f6486ef5a82d0ab7ceb4890","modified":1749893987598},{"_id":"node_modules/hexo-theme-next/languages/id.yml","hash":"929df147f4f17d638b07de5fe52ca13e2549ab1c","modified":1749893987596},{"_id":"node_modules/hexo-theme-next/languages/ko.yml","hash":"d345a303310c8a5f4836c3683f3580f861ebd1b4","modified":1749893987603},{"_id":"node_modules/hexo-theme-next/languages/ja.yml","hash":"543222bfc516aab6c33e8534f807972ecb8943a9","modified":1749893987601},{"_id":"node_modules/hexo-theme-next/languages/pt-BR.yml","hash":"76b8576ce228d540a16b1f0af5af2cce20923194","modified":1749893987606},{"_id":"node_modules/hexo-theme-next/languages/pt.yml","hash":"b62faaa767a45a613dd042b5f1903675eb5a8cf9","modified":1749893987608},{"_id":"node_modules/hexo-theme-next/languages/nl.yml","hash":"3cb3687696635ec71b4ca40c5fc43b56acc8843e","modified":1749893987604},{"_id":"node_modules/hexo-theme-next/languages/ru.yml","hash":"c6d8de0ff7d8148d09993257cfd3b7aca755696c","modified":1749893987610},{"_id":"node_modules/hexo-theme-next/languages/tk.yml","hash":"511726054873f6f8d7ce0d2e803f6731de0ddbe7","modified":1749893987615},{"_id":"node_modules/hexo-theme-next/languages/si.yml","hash":"2d712eedf3f60d04d36c3108cf5a12e2a52e875c","modified":1749893987612},{"_id":"node_modules/hexo-theme-next/languages/th.yml","hash":"6829e998b39f8f143e20b276bb1f62d95a29de58","modified":1749893987613},{"_id":"node_modules/hexo-theme-next/languages/zh-CN.yml","hash":"741d7efe0262c9cdc2c648014b55599665d90f6b","modified":1749893987620},{"_id":"node_modules/hexo-theme-next/languages/tr.yml","hash":"a57e4ed089b893a95f5e1ecff17ce625165f4d46","modified":1749893987616},{"_id":"node_modules/hexo-theme-next/languages/zh-TW.yml","hash":"5c0f00cdac3f4727b880dd223f622a535736fa8e","modified":1749893987623},{"_id":"node_modules/hexo-theme-next/languages/uk.yml","hash":"ff537047b4b4c3ca9a7b64fa7f428a9942751eeb","modified":1749893987617},{"_id":"node_modules/hexo-theme-next/languages/vi.yml","hash":"7ebcba5e1128784195e4681dffc9d34c4e873fec","modified":1749893987619},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"12a6631617695504d5cf2a94b57d87bd331bef6f","modified":1749893986579},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CONTRIBUTING.md","hash":"a089f7a8368ab0b7d7b9b7ec0ac3767a453435df","modified":1749893986705},{"_id":"node_modules/hexo-theme-next/layout/_macro/post-collapse.njk","hash":"313637fe3569f98fd926e8cd0fcc75d098eb6e6e","modified":1749893987000},{"_id":"node_modules/hexo-theme-next/docs/ru/README.md","hash":"294b6aebb8b766b5e167bcf816f485a73e0c7fa5","modified":1749893986924},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/README.md","hash":"bd9109d20dbc7feef3279386106a2efda3c98525","modified":1749893986927},{"_id":"node_modules/hexo-theme-next/layout/_macro/post.njk","hash":"ec9bb9c5ede773c02f0c8d8475245a8a437a2b71","modified":1749893987013},{"_id":"node_modules/hexo-theme-next/languages/zh-HK.yml","hash":"8eb6a9f231ce1bfa54cc54418ccf14f01dcc9a31","modified":1749893987622},{"_id":"node_modules/hexo-theme-next/layout/_scripts/vendors.njk","hash":"7261e24287984853c8ef08cda8bbc80cacf9bd6f","modified":1749893987028},{"_id":"node_modules/hexo-theme-next/layout/_macro/sidebar.njk","hash":"547c62ab14d9e05d2d9116db9048a677fbe1fb6d","modified":1749893987018},{"_id":"node_modules/hexo-theme-next/layout/_scripts/index.njk","hash":"2a7dfffebad19b67dc9e3b2a6b2986d0630ef930","modified":1749893986969},{"_id":"node_modules/hexo-theme-next/layout/_third-party/addtoany.njk","hash":"ef64c6bfb8540cd874701236b9be47db2496e98e","modified":1749893986935},{"_id":"node_modules/hexo-theme-next/layout/_third-party/fancybox.njk","hash":"844559f46e2ff1c8be234d5763703106e2072a7b","modified":1749893986954},{"_id":"node_modules/hexo-theme-next/layout/_partials/comments.njk","hash":"d0c470b0f6690aa217e9ada848c5e2e73fb27c6f","modified":1749893986951},{"_id":"node_modules/hexo-theme-next/layout/_third-party/quicklink.njk","hash":"0efed71ed530447718c4ea5bbd5fc8695b0b0d5f","modified":1749893987015},{"_id":"node_modules/hexo-theme-next/layout/_partials/footer.njk","hash":"fbf8232cacf0df87e88e74860be66c9f86018302","modified":1749893986957},{"_id":"node_modules/hexo-theme-next/layout/_third-party/index.njk","hash":"dfd7cdd6ba89f8c3deabc27726c7a350cadafd11","modified":1749893986972},{"_id":"node_modules/hexo-theme-next/layout/_third-party/pace.njk","hash":"d7ad5714079f7f65446f880baf14722435ca9061","modified":1749893986992},{"_id":"node_modules/hexo-theme-next/layout/_partials/languages.njk","hash":"e43f22198cccb5f6e306b1ce0d28d12a4fb891f8","modified":1749893986980},{"_id":"node_modules/hexo-theme-next/scripts/events/index.js","hash":"bd9ea82376cd87df611ea3ae077875c7c595a3df","modified":1749893986375},{"_id":"node_modules/hexo-theme-next/layout/_partials/pagination.njk","hash":"bc719473ed5948ab6859449d60b8d36cfc1542b4","modified":1749893986996},{"_id":"node_modules/hexo-theme-next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":1749893986346},{"_id":"node_modules/hexo-theme-next/scripts/helpers/engine.js","hash":"83235f2879567eb8686431c9554a4b99f14ab665","modified":1749893986354},{"_id":"node_modules/hexo-theme-next/layout/_partials/widgets.njk","hash":"d83fb59f02c5e6630a7770401a05c02f6f07358b","modified":1749893987031},{"_id":"node_modules/hexo-theme-next/scripts/filters/post.js","hash":"fdc8a0af90035e89c3fcb754a0eb189b8951a2bc","modified":1749893986437},{"_id":"node_modules/hexo-theme-next/scripts/filters/locals.js","hash":"9eb5310664759931287dd28ea39165dfb67f12ed","modified":1749893986398},{"_id":"node_modules/hexo-theme-next/scripts/filters/minify.js","hash":"2063aaa1db448ebcf7b0fdbbc54d3991a368bbd3","modified":1749893986408},{"_id":"node_modules/hexo-theme-next/scripts/helpers/font.js","hash":"4c84d45daac86396edf656d2a8abe6e7583491ea","modified":1749893986363},{"_id":"node_modules/hexo-theme-next/scripts/helpers/navigation.js","hash":"78107021101553c3d23e89290f7530b60cf4aa86","modified":1749893986415},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-config.js","hash":"4bc2eb87f3fa26981652f517d1ab3f81de2ab89d","modified":1749893986419},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-paginator.js","hash":"e86c764b546e4fbb87970cabc4135a56f9ef9fe1","modified":1749893986420},{"_id":"node_modules/hexo-theme-next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":1749893986316},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-vendors.js","hash":"af3946a595f997eb43d9af87428e4898c9acbc82","modified":1749893986425},{"_id":"node_modules/hexo-theme-next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":1749893986320},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-url.js","hash":"6281d47c1de98eb38f3aa0f6df29bbb19d412173","modified":1749893986422},{"_id":"node_modules/hexo-theme-next/scripts/tags/group-pictures.js","hash":"f57f7e09eb6220f681fa8385082b0960502ce5c4","modified":1749893986369},{"_id":"node_modules/hexo-theme-next/scripts/tags/index.js","hash":"1f6aba7820f1fb58b61969485148db21846e1aa9","modified":1749893986377},{"_id":"node_modules/hexo-theme-next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":1749893986322},{"_id":"node_modules/hexo-theme-next/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":1749893986427},{"_id":"node_modules/hexo-theme-next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":1749893986387},{"_id":"node_modules/hexo-theme-next/scripts/tags/link-grid.js","hash":"18a483c2d5afd701f6080ffdddf2d1321370336c","modified":1749893986391},{"_id":"node_modules/hexo-theme-next/scripts/tags/mermaid.js","hash":"7d7bbc4a9970bd4c5449bc71b94364a8ec61e5d2","modified":1749893986403},{"_id":"node_modules/hexo-theme-next/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":1749893986431},{"_id":"node_modules/hexo-theme-next/scripts/tags/wavedrom.js","hash":"b44dfeeb58b41945d469141787f3dbce4b117d08","modified":1749893986562},{"_id":"node_modules/hexo-theme-next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":1749893986561},{"_id":"node_modules/hexo-theme-next/source/css/_colors.styl","hash":"ebfe0954e3931431f46f913abe08d0212e06e7c2","modified":1749893987036},{"_id":"node_modules/hexo-theme-next/scripts/tags/tabs.js","hash":"0eabe51da40b4b13e16419c8fe02452d9a4fef73","modified":1749893986442},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1749893987032},{"_id":"node_modules/hexo-theme-next/source/css/_mixins.styl","hash":"e21309d4165ebb6645084eed8dd749846ae981f1","modified":1749893987050},{"_id":"node_modules/hexo-theme-next/source/css/main.styl","hash":"921a58577f411cf4eb5cfd66db0a241f8f88578c","modified":1749893987097},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1749893986296},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","hash":"dadc81256afb127b77eac6763d5ee0ec9c77f0a3","modified":1749893987113},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","hash":"9ba4cceafd12c6d5ba8a6b986a046ef8319a7811","modified":1749893986314},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1749893987033},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1749893987034},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","hash":"a38c6d92b368bfc42c72ad799ad03f3274957065","modified":1749893987196},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1749893986333},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1749893987199},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1749893986335},{"_id":"node_modules/hexo-theme-next/source/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1749893986341},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","hash":"694b271819aab37ce473b15db9e6aded971d82e5","modified":1749893986435},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","hash":"6f751f5c9499a39d7c5e1d323db3260342dd9431","modified":1749893986411},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","hash":"523bbaeda463e82ab0be428cc0005717038ec63e","modified":1749893986417},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1749893986440},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/cloudflare.njk","hash":"a5b8297c2c383124dd6a56e256ecc0c0dcf489be","modified":1749893986949},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.njk","hash":"6215309aee028dcb734452beec448c5afb6c63fc","modified":1749893986940},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/google-analytics.njk","hash":"d89066ff53879693f023e540d59c86137172c529","modified":1749893986959},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","hash":"345a8158e6c34e19245a07c778f5699c8673f1b1","modified":1749893986451},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/growingio.njk","hash":"8afaa772c390bd9d53a5cff9645ac3168334eb98","modified":1749893986960},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/index.njk","hash":"f900306497b133e8b098bd9f4b96b93d1d96c185","modified":1749893986971},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/microsoft-clarity.njk","hash":"1efeeda00db08a3c033798228dd0092ee532cc36","modified":1749893986991},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/plausible.njk","hash":"ef9f2bb7110507f1c4336800af9157d5fa9765bd","modified":1749893986998},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/tidio.njk","hash":"02aab857c27fc103216029be991688b12a73a525","modified":1749893987025},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/matomo.njk","hash":"4e89648a8ec8194c5823064cbca39c938a799006","modified":1749893986985},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/chatra.njk","hash":"d7263fca16d0278ccf1f6aa1c6df6902a6344a09","modified":1749893986948},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/umami.njk","hash":"3343750682fbd8535e50f8129be3003ad26015b4","modified":1749893987026},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqus.njk","hash":"9375b19a89b7fa9474e558d085af5448d4c5c50c","modified":1749893986952},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/index.njk","hash":"abf37fc55aa86702118e8fdf5bf2d389dd589aa0","modified":1749893986974},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/gitalk.njk","hash":"b63b7e2ede0d3e66e732fa1a06bda9b19e1e85d4","modified":1749893986958},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/changyan.njk","hash":"d1c950f8fbdf85e7a3eae5463767a89e858e8220","modified":1749893986946},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/isso.njk","hash":"64cc3bdaf644fd32c0d0a247f29f5b6904da9af3","modified":1749893986977},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/livere.njk","hash":"3b13b09fba84ec6000886890a6710736a2b8fafe","modified":1749893986982},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/mathjax.njk","hash":"3677017fd4572b158311f5f5d870590ab25184e0","modified":1749893986984},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/utterances.njk","hash":"5a94032bc3512a10ad4328fc19ec07b819a1d687","modified":1749893987027},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/algolia-search.njk","hash":"41b28f05e6233fb37700f7151f55868be10a0965","modified":1749893986937},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/katex.njk","hash":"1ebf658690468ea197bdd0416eb7cfa4bd0b083a","modified":1749893986979},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/localsearch.njk","hash":"e45ea3542cdc9ed7ec8447b5e6f35df4c5e82758","modified":1749893986983},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqusjs.njk","hash":"0749cb6902baecdfd01f779a2a2513f6d2f6a823","modified":1749893986953},{"_id":"node_modules/hexo-theme-next/source/js/sidebar.js","hash":"2ee359ae48273b01ba1e0768704524e08702c7eb","modified":1749893986441},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/firestore.njk","hash":"d32ebe94560fa95824478ebbff531bffc47b194d","modified":1749893986955},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/index.njk","hash":"568ddf7955d11d93fb5e842b403a7ac8b1b7fdb1","modified":1749893986975},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"55c2468b2b7f035881d494085527d6554f37b556","modified":1749893986943},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/lean-analytics.njk","hash":"2446e748cdc102c78492216319ac02148db7daf6","modified":1749893986981},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head-unique.njk","hash":"93c1d103d9d16581c944c51f3d0638f57c80ee41","modified":1749893986962},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/mermaid.njk","hash":"099e031f52fb8e47b3af5b2684737efc9e643ee7","modified":1749893986990},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/pdf.njk","hash":"2c81984cc4f5123103460442f6e046f5b6c97127","modified":1749893986997},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head.njk","hash":"5388b157bba4a40b9312f4a45c6678974ccf0837","modified":1749893986964},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/brand.njk","hash":"dd9c4c03e99dfde0dfb8edefcb2c933f2f560efc","modified":1749893986941},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/wavedrom.njk","hash":"02202bf563fb5eedde2ccad4d6c5b9109d30a703","modified":1749893987029},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/index.njk","hash":"650de421a8ce4cf685428ffbe0087ff84cbd1356","modified":1749893986966},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/breadcrumb.njk","hash":"89825e75cc45e9709fa6ba89883669eedaff6f46","modified":1749893986941},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu-item.njk","hash":"41a8b0cc16f60fa085cb719d07216d86b6bc4bf8","modified":1749893986986},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu.njk","hash":"ee6fc2f111572d3eeab0a2fecbb2d6b3e37ab26b","modified":1749893986988},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/sub-menu.njk","hash":"06480d8ec5f0b87eafd47f082f07968d7282dd5c","modified":1749893987021},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/schedule.njk","hash":"0f4bc8e257da60f77c0c1738607b2bde55810684","modified":1749893987016},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":1749893986944},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-copyright.njk","hash":"bfff923526d6800218f08dba6ce0bbf5c17755fd","modified":1749893987002},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-meta.njk","hash":"9fa47e4fb342811da590ee4adc91cf81118c0a39","modified":1749893987007},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":1749893987024},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-followme.njk","hash":"c1e33b4889f75acc490af3c8bde0ec56c518ff41","modified":1749893987004},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":1749893986994},{"_id":"node_modules/hexo-theme-next/layout/_partials/sidebar/site-overview.njk","hash":"bc5708e38b6070dff0cab6bf9480971017ce4dda","modified":1749893987020},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/index.njk","hash":"6ad43135bd3aecf933ffdd750763e27ade36f97c","modified":1749893986967},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-related.njk","hash":"e0986db00a0201dd3c60570f964829c84ba5bc68","modified":1749893987008},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-reward.njk","hash":"e8b8a7c41e9ec612d0c0c73419529d55d1c16256","modified":1749893987010},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-share.njk","hash":"16696990e4ce65fc8db18c4635082a5d5d06ff07","modified":1749893987011},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/config.js","hash":"00af4f5f9a79eaccf051f9e372d233d65d44c8a5","modified":1749893986340},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/injects.js","hash":"d987709267a1bc6e5014411e9983d7c49c102c16","modified":1749893986380},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/highlight.js","hash":"8a8f752260be5b8098393f9879b61ffe904465e8","modified":1749893986373},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/changyan.js","hash":"5798cfc8f63665031dd3e01debed051628cec319","modified":1749893986326},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/navigation.js","hash":"dd3562686d95a50375e6fd32e717ccb0d99c1e3d","modified":1749893986413},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/vendors.js","hash":"e2b4a9d6b08155735ec336eedc506763d5671821","modified":1749893986560},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/utils.js","hash":"5942feb3f31ed3480bf50b0f5a4a305b5bdca3d6","modified":1749893986446},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/common.js","hash":"19a402a225c31edffc50f202a14e0d582d3db23e","modified":1749893986336},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":1749893986344},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/gitalk.js","hash":"7bb7dafdd7f6bca8464b54e17e552ce7f1714195","modified":1749893986364},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqus.js","hash":"7f71d6b271ba65ff333d5682e7575711d368c0d2","modified":1749893986347},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqusjs.js","hash":"a600a98e7436edeb31e291abca359885567df3c9","modified":1749893986350},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":1749893987075},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/isso.js","hash":"ff8b5b5145220a17d0ecd9508ba9bd2d3b2da47d","modified":1749893986382},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Mist.styl","hash":"2c800eaab6c613e5d091be2111aaa786641aa0c2","modified":1749893987104},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/livere.js","hash":"5a07d8bb52bc1d51a624ca8db54be144566c306b","modified":1749893986392},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/utterances.js","hash":"d3bded697bc32dace689d2a6dfb6eb7514169d15","modified":1749893986453},{"_id":"node_modules/hexo-theme-next/source/js/third-party/addtoany.js","hash":"5276c8f78ee562a8965216dc67d762e59cb4a9f2","modified":1749893986302},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Muse.styl","hash":"879b49f693af0c04c285b2dd0c9cccaf77347b7c","modified":1749893987107},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"20d5c6aa136bbb55e03906d98ee90ad3fbaa80a7","modified":1749893987117},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","hash":"819f382c561fe5ec23c67cc5fabd63dd1cc22dc1","modified":1749893986357},{"_id":"node_modules/hexo-theme-next/source/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1749893986429},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_layout.styl","hash":"fa4fd8f76464e214fb7318f325b13c2b62f4b478","modified":1749893987044},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Gemini/index.styl","hash":"bcbf498d8d3ecea84324f0a59b7f95f389a52b8d","modified":1749893987089},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1749893986439},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"dafc6d23c80d6fe3e55a7711e94210d2479b629a","modified":1749893987039},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_header.styl","hash":"3fbfab591f280e2e7f3b0265901c93bc4bd137ed","modified":1749893987041},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"f23c53e32d140091b819be2603d1afbbb5d66933","modified":1749893987046},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":1749893987089},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_posts-expand.styl","hash":"485d23ccb42c0d0c8ead7ea8930dd3e06d79a285","modified":1749893987051},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"6569a6640f79d247a8235b3914772c0e2f99ead2","modified":1749893987045},{"_id":"node_modules/hexo-theme-next/source/css/_variables/base.styl","hash":"b724edca546373d5eaf9b3602868f971c9094cf6","modified":1749893987063},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"e31f6adbb22a451f07e4661cff9a2f12e4e99a36","modified":1749893987048},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sidebar.styl","hash":"c29a827e82d2820ed8977c92994da73721200fac","modified":1749893987052},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_header.styl","hash":"dc03835e42d82eaf2633cf3b627990ad3e1f5967","modified":1749893987043},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1749893987054},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"a92c4eb16bdb7806079467eb022ccf193bb0f794","modified":1749893987046},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e792a6233e1d4dbc5fd2f10ae97b7a790b82568b","modified":1749893987053},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"a03f16ffc7dfdbdc6053f9fd68d77257ba0c559e","modified":1749893987049},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/index.styl","hash":"8e34df131830d4fa3725e4590a672ba1cf1903e5","modified":1749893987084},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1749893987090},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"778ed2ad5643b93970c95626b325defeb586733f","modified":1749893987055},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/mobile.styl","hash":"48b2dfc04df6409c6e0736ccc11462ad97d349b1","modified":1749893987105},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"f316ba87f8d3299677fbf8345e1e993c35210e2e","modified":1749893987061},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":1749893987070},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":1749893987092},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":1749893987068},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1749893987087},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"b8445c828d78a38e2de50bdc86b3bff66285ea0f","modified":1749893987058},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1749893987112},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/pagination.styl","hash":"f4228c759db4a650c8d38745c2edd1dc83c45687","modified":1749893987115},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":1749893987182},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/index.styl","hash":"2298e521253b3bf376a2412271bc2a7d305051f3","modified":1749893987077},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/toggles.styl","hash":"69c66aab4651e2e7ae9e65f08600144970648c60","modified":1749893987189},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1749893986312},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/reading-progress.styl","hash":"90a86045a33c1bae49fc2f6fa1e1b53170c7f77b","modified":1749893987141},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1749893986371},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","hash":"def07bcc7c17d8a0caad177fb1dd2f3a5e5b3536","modified":1749893986367},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1749893986401},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1749893986331},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1749893986444},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1749893986329},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","hash":"1e826dea3f684c0515f362dc1352447a1f0eae71","modified":1749893986351},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","hash":"da361917d65e5dca8362f8cdeb6c8cc0e8316cec","modified":1749893986349},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1749893986366},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1749893986384},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1749893986399},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1749893986394},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1749893986386},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1749893986454},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","hash":"1905978ef587bf08fe088ce4693a4c08db07cfbb","modified":1749893986308},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","hash":"3968d972f47b79acc6c3fe44028bad77c9c5aab7","modified":1749893986396},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","hash":"6e0682bb42170d61b13b786295f45f9c785f8b73","modified":1749893986361},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","hash":"835cbf54c49ef1327f47df70ff2636ad36b6f57d","modified":1749893986390},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","hash":"df01075f52302873f7de36050b5408c8d1afb452","modified":1749893986406},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1749893986432},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/footer/index.styl","hash":"4e967702cf4c637132346bc74ec8854426f1a68c","modified":1749893987082},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/github-banner.styl","hash":"38c64c2d04e46848382bfa246a0e9c508294767b","modified":1749893987076},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/wavedrom.js","hash":"40dcd10df6edf124088c329346e0cc0bdac74ef1","modified":1749893986563},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/index.styl","hash":"6e0d0796ef7fbbb62ffdfb448753a850de82c74f","modified":1749893987083},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/bookmark.styl","hash":"e74f4bb47a101b014ee2a1783c87f3b87323f9a0","modified":1749893987067},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/index.styl","hash":"21acb11e397526132605eef23bde7b307aa1eab5","modified":1749893987085},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-meta.styl","hash":"a851e9d5aefcd027c95eeb323860b6da70f202d1","modified":1749893987172},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-nav.styl","hash":"bf3ad8b4268f763a1e26377681644887694bc009","modified":1749893987176},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/menu.styl","hash":"a3dd3edea9c01b66b28a8367185269b9dcc3bdee","modified":1749893987100},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/related-posts.styl","hash":"b05908f04ef95f2d91e6eba89b12411c378d050f","modified":1749893987143},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"0847400d8579b0a2dd1bf662c78954c10adf2680","modified":1749893987152},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":1749893987153},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"ce36bf1602233298e0351b4babc592315529eb26","modified":1749893987157},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"46eece42510c2c89bb9209afb0262ad76a4b0b36","modified":1749893987160},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-copyright.styl","hash":"56805b77fe236fac19e19c716a49363bcf986311","modified":1749893987163},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"24752d145c6fb8f5344dca9c7b9640839c02e009","modified":1749893987165},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"c2e354a565c8c1b32bd0ceacc972b17982758b67","modified":1749893987167},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"5c31f3a86e4e6fbf2f8419415620461fa8a63c56","modified":1749893987071},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"741566d6ac5f852b5c8dee6a8996b65e48e7c97f","modified":1749893987170},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/index.styl","hash":"9b0217e1caecd91e05572c7e8e52d32016ca312f","modified":1749893987086},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/fold.styl","hash":"42a0b65491ad85438596b3fe0b7f23973e4cef34","modified":1749893987074},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"d6418fd2bbfba7b73ddf11ec62db9637fdf5d8af","modified":1749893987065},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/site-state.styl","hash":"26dd0adfcb1db6df29c6090c8d7e9b5a43583fb0","modified":1749893987178},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":1749893987077},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":1749893987093},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"48d35dba575a7c9e8845b16652e76b7d4a4646de","modified":1749893987101},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"49329a7144f3413d1c832e52a1f4954171ef11e1","modified":1749893987094},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/note.styl","hash":"8213015d9cae45d2c9945f8aba9d8db39c734efc","modified":1749893987114},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b6654a1d7cf82577d8263faffee8af3ad4a5c0e8","modified":1749893987116},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/tabs.styl","hash":"c3be8b0738f693e750486bb71769c3dbbec174cc","modified":1749893987184},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/wavedrom.styl","hash":"af113411ad9cca7674177be36af8dd399680834d","modified":1749893987193},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/index.styl","hash":"22cd37bd5df9972d5074710896aba4424ad5161c","modified":1749893987087},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/index.styl","hash":"098d4bd034e986fcf7e443eac4fc2193935461b7","modified":1749893987079},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-body.styl","hash":"93f014809d6442da23f8b7d729f7375e2badba7d","modified":1749893987118},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-followme.styl","hash":"026cd5735fd2a75bb60b7bf8bd09139583d602b9","modified":1749893987121},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"809bab3414b1eb1ae44444eb821126868f764414","modified":1749893987119},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":1749893987126},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-footer.styl","hash":"0f4830e19026317ed850f3be2979556e38f97f4a","modified":1749893987124},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"b47fb36915962309553ff7fb1782341585ed2b76","modified":1749893987137},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":1749893987135},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-header.styl","hash":"424de4f64b12c521e8c6bfbc711d7961490ab36e","modified":1749893987133},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"ebfba158a0a4af3d1dabcacbc58986664de52140","modified":1749893987140},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1749893987078},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":1749893987068},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"51a97a33879289904cb523ddc2d88b5b0c60fa72","modified":1749893987069},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":1749893987147},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":1749893987187},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/gitalk.styl","hash":"8f094c4ac17e2ab45569b12d157747f9c7333c12","modified":1749893987075},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/disqusjs.styl","hash":"877a537d5b95beb048142e4fdee6f17e6ef9c7bb","modified":1749893987073},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/index.styl","hash":"54d12e2c5d9982f7b9e5b23be5133954a8514e9d","modified":1749893987081},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/search.styl","hash":"1874e2b5d86cdeeaf2ccdc2669146a2b0c72d9db","modified":1749893987150},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/math.styl","hash":"9d995eb4871a6c273d9d51558676a1fdabf69e72","modified":1749893987099},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/utterances.styl","hash":"56d90ae0559caa55b75f3c300ff2711f9ed65fc4","modified":1749893987191},{"_id":"public/CS61B/Leb03.html","hash":"3a7d428ce992def6ed6ba908b9e702a25c40e3aa","modified":1750054745221},{"_id":"public/Debug/博客流程.html","hash":"6c93f5fe37e34776ecfef0817920e0ca5e705731","modified":1750054745221},{"_id":"public/Debug/index.html","hash":"ebd74b129f3284de76ab200a52656a690944b53e","modified":1750054745221},{"_id":"public/CS61B/proj0.html","hash":"d65547cbd8cfae319362dc16eb685fb2b45462fd","modified":1750054745221},{"_id":"public/CS61B/index.html","hash":"b96ca0e0798e31a28729c3427a5d00aee5a497da","modified":1750054745221},{"_id":"public/Debug/Blog/Blog.html","hash":"c30e5800b94788d45eac98e0cbe3c36e981e45b8","modified":1750054745221},{"_id":"public/2025/06/14/source/Debug/博客流程/index.html","hash":"bbb56f331f210b4e7e1d41b0b49ab6708e1bf66b","modified":1750054745221},{"_id":"public/archives/index.html","hash":"8a588baad4519bce4c57915f7b0a1d11b3ef596e","modified":1750054745221},{"_id":"public/2025/06/14/hello-world/index.html","hash":"920d8dae6c91534002e613849e3b4979a048332d","modified":1750054745221},{"_id":"public/archives/2025/index.html","hash":"33d3271478ef9a73984569f7a6e9cc0ccafc4995","modified":1750054745221},{"_id":"public/archives/2025/06/index.html","hash":"ea1b4f0f77591119f48c13cd81a08412f490f93d","modified":1750054745221},{"_id":"public/index.html","hash":"7651464bbd31ac812ec6a853ee7866f7829a9d38","modified":1750054745221},{"_id":"public/images/Pastedimage20250615154243.png","hash":"d1072ea1435886d68292a14ec6f91a69df24ff36","modified":1750054745221},{"_id":"public/images/Pastedimage20250615170843.png","hash":"7b7a71e247393af48dfedcd03852fa2fc3f21fb9","modified":1750054745221},{"_id":"public/images/Pastedimage20250615173326.png","hash":"7c25360c9cc092acca14fb194d89fbdcd28b69c1","modified":1750054745221},{"_id":"public/images/Pastedimage20250615172423.png","hash":"bab763c6f5d11648e13f3184407fa3f63d72f51d","modified":1750054745221},{"_id":"public/images/Pastedimage20250615175558.png","hash":"10e11dec577257727fac0d3e84a05fa5314198cb","modified":1750054745221},{"_id":"public/images/Pastedimage20250615172020.png","hash":"287e42bc4a16f00698823170ea61249949139221","modified":1750054745221},{"_id":"public/images/Pastedimage20250615175613.png","hash":"dcb37094635acdc153b7731a4f8a8499535ad6ef","modified":1750054745221},{"_id":"public/images/Pastedimage20250615175444.png","hash":"5c570b1c5cd756410875ab019745a4bd933ed1d2","modified":1750054745221},{"_id":"public/images/Pastedimage20250615184116.png","hash":"4916dc0d99713069f7a71c0d6224aab013ab6343","modified":1750054745221},{"_id":"public/images/Pastedimage20250615211618.png","hash":"fc83ae0142b34f6254ee391f7251fce3fbb44d7b","modified":1750054745221},{"_id":"public/images/Pastedimage20250615223111.png","hash":"513dcbc39dd434cabf019a6eea78256fb8167af6","modified":1750054745221},{"_id":"public/images/Pastedimage20250615213603.png","hash":"4d66767a0eaa866f42f89d3c2f9692907144a8f1","modified":1750054745221},{"_id":"public/images/Pastedimage20250615213033.png","hash":"ac1ab4a24982b1544349e8514dccd44920b0d941","modified":1750054745221},{"_id":"public/images/Pastedimage20250615195658.png","hash":"af0157dd38d013c05880bcc1f6c57bea7721f1f0","modified":1750054745221},{"_id":"public/images/Pastedimage20250615223118.png","hash":"54aa531107a7fa450cbec6949f9440bd703bcd83","modified":1750054745221},{"_id":"public/images/Pastedimage20250615223116.png","hash":"54aa531107a7fa450cbec6949f9440bd703bcd83","modified":1750054745221},{"_id":"public/images/Pastedimage20250615223538.png","hash":"cf39b6b5f9d2a7d1a9b5013283bcf2589f1b0c0e","modified":1750054745221},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1750054745221},{"_id":"public/images/Pastedimage20250615230527.png","hash":"21e9faf20a6c1c3f186356e53690fe89b2caabde","modified":1750054745221},{"_id":"public/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1750054745221},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1750054745221},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1750054745221},{"_id":"public/images/logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1750054745221},{"_id":"public/images/logo-algolia-nebula-blue-full.svg","hash":"a38c6d92b368bfc42c72ad799ad03f3274957065","modified":1750054745221},{"_id":"public/css/main.css","hash":"d7c21676d2263becce3fdf598ed4b7eecf1be638","modified":1750054745221},{"_id":"public/css/noscript.css","hash":"4cd5301e478e0e0d4b176740ec314087ec5cb707","modified":1750054745221},{"_id":"public/js/bookmark.js","hash":"9ba4cceafd12c6d5ba8a6b986a046ef8319a7811","modified":1750054745221},{"_id":"public/images/Pastedimage20250615223202.png","hash":"edd8c4c4a706a8ef8a05a91c461f53a4f7114a4b","modified":1750054745221},{"_id":"public/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1750054745221},{"_id":"public/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1750054745221},{"_id":"public/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1750054745221},{"_id":"public/js/next-boot.js","hash":"523bbaeda463e82ab0be428cc0005717038ec63e","modified":1750054745221},{"_id":"public/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1750054745221},{"_id":"public/js/motion.js","hash":"6f751f5c9499a39d7c5e1d323db3260342dd9431","modified":1750054745221},{"_id":"public/js/sidebar.js","hash":"2ee359ae48273b01ba1e0768704524e08702c7eb","modified":1750054745221},{"_id":"public/js/pjax.js","hash":"694b271819aab37ce473b15db9e6aded971d82e5","modified":1750054745221},{"_id":"public/js/third-party/addtoany.js","hash":"5276c8f78ee562a8965216dc67d762e59cb4a9f2","modified":1750054745221},{"_id":"public/js/third-party/fancybox.js","hash":"819f382c561fe5ec23c67cc5fabd63dd1cc22dc1","modified":1750054745221},{"_id":"public/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1750054745221},{"_id":"public/js/utils.js","hash":"345a8158e6c34e19245a07c778f5699c8673f1b1","modified":1750054745221},{"_id":"public/js/third-party/analytics/google-analytics.js","hash":"def07bcc7c17d8a0caad177fb1dd2f3a5e5b3536","modified":1750054745221},{"_id":"public/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1750054745221},{"_id":"public/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1750054745221},{"_id":"public/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1750054745221},{"_id":"public/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1750054745221},{"_id":"public/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1750054745221},{"_id":"public/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1750054745221},{"_id":"public/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1750054745221},{"_id":"public/js/third-party/comments/disqus.js","hash":"da361917d65e5dca8362f8cdeb6c8cc0e8316cec","modified":1750054745221},{"_id":"public/js/third-party/comments/disqusjs.js","hash":"1e826dea3f684c0515f362dc1352447a1f0eae71","modified":1750054745221},{"_id":"public/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1750054745221},{"_id":"public/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1750054745221},{"_id":"public/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1750054745221},{"_id":"public/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1750054745221},{"_id":"public/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1750054745221},{"_id":"public/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1750054745221},{"_id":"public/js/third-party/search/local-search.js","hash":"3968d972f47b79acc6c3fe44028bad77c9c5aab7","modified":1750054745221},{"_id":"public/js/third-party/search/algolia-search.js","hash":"1905978ef587bf08fe088ce4693a4c08db07cfbb","modified":1750054745221},{"_id":"public/js/third-party/statistics/firestore.js","hash":"6e0682bb42170d61b13b786295f45f9c785f8b73","modified":1750054745221},{"_id":"public/js/third-party/statistics/lean-analytics.js","hash":"835cbf54c49ef1327f47df70ff2636ad36b6f57d","modified":1750054745221},{"_id":"public/js/third-party/tags/mermaid.js","hash":"df01075f52302873f7de36050b5408c8d1afb452","modified":1750054745221},{"_id":"public/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1750054745221},{"_id":"public/js/third-party/tags/wavedrom.js","hash":"40dcd10df6edf124088c329346e0cc0bdac74ef1","modified":1750054745221}],"Category":[],"Data":[{"_id":"custom","data":""}],"Page":[{"title":"Leb03","date":"2025-06-14T16:00:00.000Z","cssclasses":"CS61B","_content":"![Pastedimage20250615154243](/images/Pastedimage20250615154243.png)\n### Debug `BeeCountingStage` \n\n#### Expected lines modified: 1\n![Pasted20image2020250615170843](/images/Pastedimage20250615170843.png)\n跳转到`BeeCountingStage.java:54`,看到：\n```java\nthis.input.add(input);\n```\n也就是这个类有一个input变量和input局部变量，`because \"this.input\" is null`看起来应该是`this.input`的问题，向上看到：\n```java\nimport java.util.List; // this.input是个List类\n...\nprivate List<String> input; // 猜对了，有声明\npublic BeeCountingStage(In in) {  \n    this.in = in;  \n    this.responses = Map.of(\"go\", new SpeciesListStage(in));  // 没有实例化\n}\n...\nthis.input.add(input); // this.input应该是个List类(毕竟目前只讲到这个),看看引入的工具包\n```\n那加个实例化就好了，这里卡了我好一会，不明白官方怎么做到只改一行代码的：\n```java\nimport java.util.ArrayList; // 加上\n...\npublic BeeCountingStage(In in) {  \n    this.in = in;  \n    this.responses = Map.of(\"go\", new SpeciesListStage(in));  \n    this.input = new ArrayList<>(); // 加上\n}\n```\n\n#### Expected lines modified: 1\n![Pasted image 20250615172020.png](/images/Pastedimage20250615172020.png)\n简单的超出索引异常，这里比较不同的是不能根据堆栈跟踪的第一行直接判断出错的位置，只能通过调试工具找，最终修改：\n```java\nprivate int sumInput() {  \n    int sum = 0;  \n    for (int i = 0; i < this.input.size(); i++) {  \n    // 这里的 i <= this.input.size() 就是导致异常的原因\n        sum += Integer.parseInt(this.input.get(i));  \n    }  \n    return sum;  \n}\n```\n修改之后就可以通过测试了：\n![Pasted image 20250615172423.png](/images/Pastedimage20250615172423.png)\n\n复盘时看到官方说：\n```\n修正SpeciesListStage中的错误。如果你在发生异常的方法内部（堆栈跟踪的第一行）没有发现问题所在，通常查看第二行，了解该方法是从何处被调用以及使用了哪些参数，这是个不错的办法。 \n```\n回去看了看出错点，的确就在下面的第三行有提到。\n\n### Debug `PalindromeStage`\n#### Expected lines modified: 3\n![Pasted image 20250615173326.png](/images/Pastedimage20250615173326.png)\n查了下含义，是算术异常，表示程序尝试执行**除以零**的操作。\n直接跳转到`SpeciesListStage.java:102`，改一下就好：\n```java\n    public static int arraySimilarity(List<String> listOne, List<String> listTwo) {  \n        ...\n        for (String o : listTwo) {  \n\t\t...\n        }  \n        if (similarObjects > 0) {  \n            return 1;  \n        }else {  \n            return 0;  \n        }  \n        //return similarObjects / listOne.size();  \n    }  \n}\n```\n\n\n#### Expected lines modified: 2-5\n![Pasted image 20250615175444.png](/images/Pastedimage20250615175444.png)\n跳转到：\n![Pasted image 20250615175613.png](/images/Pastedimage20250615175613.png)\n先`Ctl+F`找一下`Preconditions`类，发现是引入的工具包，那直接一整个复制搜索的大操作，然后从这里开始调试，但是会发现很多次返回错误点，那就很难判断到底是哪次的错误了，于是点开被折叠的堆栈跟踪。\n![Pasted image 20250615211618.png](/images/Pastedimage20250615211618.png)\n从第一条蓝色标注的开始看(虽然不知道什么原理，但是从上面的经验来看，标蓝的最有可能)\n后来复盘时查了下，写在下面：\n* 在 IDE的报错堆栈信息里，标蓝的部分一般是**与你当前项目代码直接相关的类和方法** ，也就是你自己编写的代码文件里的内容，方便你快速定位到项目中出错的具体位置\n* 不标蓝的，是 **JDK 内部的类和方法** 。这些属于 Java 标准库的代码，不是你项目里自己写的代码。IDE 通常不会把它们标蓝突出显示，因为一般情况下，我们不会去修改 JDK 源码，主要是聚焦在自己项目代码里找问题，它们更多是辅助说明错误发生时的调用链路。\n然后点旁边的灯泡，会看到提示：\n![Pasted image 20250615184116.png](/images/Pastedimage20250615184116.png)\n这个比较好改，仔细点就行：\n```java\nprivate static IntList digitsToIntList(String s) { \n    int[] a = new int[s.length()];  \n    for (int i = s.length(); i >= 1; i--) {  \n        a[s.length() - i] = Character.getNumericValue(s.charAt(i-1));  \n    } \n    return IntList.of(a);  \n}\n```\n\n接下来先看官方提示：\n```\n如果你还没有，请通读上面的注释。查看调用`digitsToIntList`的方法。如果你在该方法中设置断点并通过调试器运行，我们是否曾经退出`while`循环？我们需要满足什么条件才能跳出`while`循环？这个条件是否得到满足？尝试结合使用Java可视化工具，这样你就可以借助可视化工具更仔细地检查这个错误。\n```\n直接`ctl+F`找到调用`digitsToIntList` 的方法`playStage`，大概看一遍就能找到第一个比较明显的错误：\n![Pasted image 20250615213033.png](/images/Pastedimage20250615213033.png)\n一看就是死循环的料，我的修改方案是引入一个`boolean`值：\n```java\n    boolean finish = false;  // 修改\n    while (!finish) {  // 修改\n        ...\n        while (!AdventureUtils.isInt(input)) {  \n            ...\n        }  \n        ...\n        if (numLst.equals(reversedLst)) {  \n            System.out.println(\"Wow, nice room number!\");  \n            finish = true;  // 修改\n            break;  \n        }\n        ...\n    }  \n}\n```\n\n之后在运行就会一直进入死循环：\n![Pasted image 20250615213603.png](/images/Pastedimage20250615213603.png)\n通过调试工具发现问题在45行，结果一直为`false`:\n```java\nif (numLst.equals(reversedLst)) {  \n    System.out.println(\"Wow, nice room number!\");  \n    finish = true;  \n    break;  \n}\n```\n就是这里卡了我好久，一个个说：\n首先是：\n```java\npublic void playStage() { \n        ...\n    while (!finish) {  \n        String input = in.readLine();\n        while (!AdventureUtils.isInt(input)) {  \n            ...\n            input = this.in.readLine();  \n        }  \n        ...\n    }\n}\n```\n我不理解`in.readLine()`到底是什么，找资料可以知道这是'读取输入流从当前位置到下一行结束符（\\n、\\r或\\r\\n）的所有字符，并返回为字符串'的作用，但是我没有找到什么`输入流`，调试工具里看它们也是突然冒出来的，后来我以为`输入流`指的是开始时输出的一大串，然后通过调试工具发现，`input`的值和我预期的不同：\n```\ninput值的变化：'404'->'va cafe'->'go'->'null'->一直为'null'\n```\n所以我的猜想是错的，后来我猜想这个程序是找到回文数的目的，那会不会准确的程序应该在`input = 404`时就结束，后来通过调试根据发现：\n```java\npublic boolean equals(Object other) {  \n    if (other instanceof IntList oL) {  \n        if (first != oL.first) {  \n            return false;  //本来改反悔true的值，却返回false\n        } else if (rest == null && oL.rest == null) {  \n            ...\n        } else if (rest != null && oL.rest != null) {  \n            ...  \n        } else {  \n            ... \n        }  \n    }  \n    return false;  \n}\n```\n最后只要把对应的`return false;`改成`return true;`就行了。\n\n复盘时，关于`输入流`,我想到个有意思的：\n```java\npublic class ReadLineExample {\n    public static void main(String[] args) {\n        // 1. 第1次打印提示（仅输出，不阻塞）\n        System.out.println(\"请输入一行文本：\");  \n\n        // 2. 创建Scanner（初始化扫描器，不触发输入）\n        Scanner scanner = new Scanner(System.in); \n\n        // 3. 第2次打印提示（仅输出，不阻塞）\n        System.out.println(\"请输入一行文本：\");  \n\n        // 4. 第3次打印提示（仅输出，不阻塞）\n        System.out.println(\"请输入一行文本：\");  // 第六行代码\n\n        // 5. 关键：仅读取1次用户输入！\n        // 程序会暂停，等待用户在控制台输入（无论前面打印多少次提示）\n        String line = scanner.nextLine();  // 第七行代码\n\n        // 6. 输出结果\n        System.out.println(\"你输入的内容是：\" + line);\n        scanner.close();\n    }\n}\n```\n如果在计算机刚刚读取完第六行代码(上面代码里标注的一行)，在读取第七行前输入，那是不是就会卡bug了，用户的输入信息丢失。\n查了下，遗憾地发现不会：\n即使 “计算机刚刚读完第 6 行还没执行第 7 行”，用户此时在控制台输入内容：\n- 输入的内容会被**暂存到系统的输入缓冲区**（属于 `System.in` 的一部分），不会丢失。\n- 当程序执行到 `scanner.nextLine()` 时，会直接从缓冲区读取用户输入的内容，程序继续执行。\n\n### Debug `MachineStage`\n#### Expected lines modified: 2-5\n\n这一块写的很顺利，逻辑也很流畅：\n先运行一遍，通过调试工具的查看差异功能，定位到`machineResult`参数，通过参数的定义锁定`sumOfElementwiseMax(arrOne, arrTwo)`方法，在这里打上断点，开始调试：\n\n![Pasted image 20250615223538.png](/images/Pastedimage20250615223538.png)\n发现`maxes`数组错误，定位到`arrayMax`方法，打上断点，发现`biggerValue`错了：\n![Pasted image 20250615223111.png](/images/Pastedimage20250615223111.png)\n定位到`mysteryMax`方法，重写方法：\n```java\npublic static int mysteryMax(int a, int b) {  \n    int max;  \n    if(a > b) {  \n        max = a;  \n    }else {  \n        max = b;  \n    }  \n    return max;  \n}\n```\n再运行程序，依然错，通过调试工具的查看差异功能，定位`machineResult`参数，再查看`sumOfElementwiseMax(arrOne, arrTwo)`方法，`maxes`数组没有问题，查看`arraySum`方法，通过调试工具发现`mysteryAdd`方法的错误，这里有个小坑，我一开始理所当然的以为`mysteryAdd`方法返回的应该时两数之和，但是运行错误，仔细看才发现不对：\n```java\npublic static int mysteryAdd(int a, int b) {  \n    return b;\n```\n\n最后运行程序成功：\n![Pasted image 20250615230527.png](/images/Pastedimage20250615230527.png)\n\n以上就是这次`Lab03`的内容。","source":"CS61B/Leb03.md","raw":"---\ntitle: Leb03\ndate: 2025-06-15\ncssclasses: CS61B\n---\n![Pastedimage20250615154243](/images/Pastedimage20250615154243.png)\n### Debug `BeeCountingStage` \n\n#### Expected lines modified: 1\n![Pasted20image2020250615170843](/images/Pastedimage20250615170843.png)\n跳转到`BeeCountingStage.java:54`,看到：\n```java\nthis.input.add(input);\n```\n也就是这个类有一个input变量和input局部变量，`because \"this.input\" is null`看起来应该是`this.input`的问题，向上看到：\n```java\nimport java.util.List; // this.input是个List类\n...\nprivate List<String> input; // 猜对了，有声明\npublic BeeCountingStage(In in) {  \n    this.in = in;  \n    this.responses = Map.of(\"go\", new SpeciesListStage(in));  // 没有实例化\n}\n...\nthis.input.add(input); // this.input应该是个List类(毕竟目前只讲到这个),看看引入的工具包\n```\n那加个实例化就好了，这里卡了我好一会，不明白官方怎么做到只改一行代码的：\n```java\nimport java.util.ArrayList; // 加上\n...\npublic BeeCountingStage(In in) {  \n    this.in = in;  \n    this.responses = Map.of(\"go\", new SpeciesListStage(in));  \n    this.input = new ArrayList<>(); // 加上\n}\n```\n\n#### Expected lines modified: 1\n![Pasted image 20250615172020.png](/images/Pastedimage20250615172020.png)\n简单的超出索引异常，这里比较不同的是不能根据堆栈跟踪的第一行直接判断出错的位置，只能通过调试工具找，最终修改：\n```java\nprivate int sumInput() {  \n    int sum = 0;  \n    for (int i = 0; i < this.input.size(); i++) {  \n    // 这里的 i <= this.input.size() 就是导致异常的原因\n        sum += Integer.parseInt(this.input.get(i));  \n    }  \n    return sum;  \n}\n```\n修改之后就可以通过测试了：\n![Pasted image 20250615172423.png](/images/Pastedimage20250615172423.png)\n\n复盘时看到官方说：\n```\n修正SpeciesListStage中的错误。如果你在发生异常的方法内部（堆栈跟踪的第一行）没有发现问题所在，通常查看第二行，了解该方法是从何处被调用以及使用了哪些参数，这是个不错的办法。 \n```\n回去看了看出错点，的确就在下面的第三行有提到。\n\n### Debug `PalindromeStage`\n#### Expected lines modified: 3\n![Pasted image 20250615173326.png](/images/Pastedimage20250615173326.png)\n查了下含义，是算术异常，表示程序尝试执行**除以零**的操作。\n直接跳转到`SpeciesListStage.java:102`，改一下就好：\n```java\n    public static int arraySimilarity(List<String> listOne, List<String> listTwo) {  \n        ...\n        for (String o : listTwo) {  \n\t\t...\n        }  \n        if (similarObjects > 0) {  \n            return 1;  \n        }else {  \n            return 0;  \n        }  \n        //return similarObjects / listOne.size();  \n    }  \n}\n```\n\n\n#### Expected lines modified: 2-5\n![Pasted image 20250615175444.png](/images/Pastedimage20250615175444.png)\n跳转到：\n![Pasted image 20250615175613.png](/images/Pastedimage20250615175613.png)\n先`Ctl+F`找一下`Preconditions`类，发现是引入的工具包，那直接一整个复制搜索的大操作，然后从这里开始调试，但是会发现很多次返回错误点，那就很难判断到底是哪次的错误了，于是点开被折叠的堆栈跟踪。\n![Pasted image 20250615211618.png](/images/Pastedimage20250615211618.png)\n从第一条蓝色标注的开始看(虽然不知道什么原理，但是从上面的经验来看，标蓝的最有可能)\n后来复盘时查了下，写在下面：\n* 在 IDE的报错堆栈信息里，标蓝的部分一般是**与你当前项目代码直接相关的类和方法** ，也就是你自己编写的代码文件里的内容，方便你快速定位到项目中出错的具体位置\n* 不标蓝的，是 **JDK 内部的类和方法** 。这些属于 Java 标准库的代码，不是你项目里自己写的代码。IDE 通常不会把它们标蓝突出显示，因为一般情况下，我们不会去修改 JDK 源码，主要是聚焦在自己项目代码里找问题，它们更多是辅助说明错误发生时的调用链路。\n然后点旁边的灯泡，会看到提示：\n![Pasted image 20250615184116.png](/images/Pastedimage20250615184116.png)\n这个比较好改，仔细点就行：\n```java\nprivate static IntList digitsToIntList(String s) { \n    int[] a = new int[s.length()];  \n    for (int i = s.length(); i >= 1; i--) {  \n        a[s.length() - i] = Character.getNumericValue(s.charAt(i-1));  \n    } \n    return IntList.of(a);  \n}\n```\n\n接下来先看官方提示：\n```\n如果你还没有，请通读上面的注释。查看调用`digitsToIntList`的方法。如果你在该方法中设置断点并通过调试器运行，我们是否曾经退出`while`循环？我们需要满足什么条件才能跳出`while`循环？这个条件是否得到满足？尝试结合使用Java可视化工具，这样你就可以借助可视化工具更仔细地检查这个错误。\n```\n直接`ctl+F`找到调用`digitsToIntList` 的方法`playStage`，大概看一遍就能找到第一个比较明显的错误：\n![Pasted image 20250615213033.png](/images/Pastedimage20250615213033.png)\n一看就是死循环的料，我的修改方案是引入一个`boolean`值：\n```java\n    boolean finish = false;  // 修改\n    while (!finish) {  // 修改\n        ...\n        while (!AdventureUtils.isInt(input)) {  \n            ...\n        }  \n        ...\n        if (numLst.equals(reversedLst)) {  \n            System.out.println(\"Wow, nice room number!\");  \n            finish = true;  // 修改\n            break;  \n        }\n        ...\n    }  \n}\n```\n\n之后在运行就会一直进入死循环：\n![Pasted image 20250615213603.png](/images/Pastedimage20250615213603.png)\n通过调试工具发现问题在45行，结果一直为`false`:\n```java\nif (numLst.equals(reversedLst)) {  \n    System.out.println(\"Wow, nice room number!\");  \n    finish = true;  \n    break;  \n}\n```\n就是这里卡了我好久，一个个说：\n首先是：\n```java\npublic void playStage() { \n        ...\n    while (!finish) {  \n        String input = in.readLine();\n        while (!AdventureUtils.isInt(input)) {  \n            ...\n            input = this.in.readLine();  \n        }  \n        ...\n    }\n}\n```\n我不理解`in.readLine()`到底是什么，找资料可以知道这是'读取输入流从当前位置到下一行结束符（\\n、\\r或\\r\\n）的所有字符，并返回为字符串'的作用，但是我没有找到什么`输入流`，调试工具里看它们也是突然冒出来的，后来我以为`输入流`指的是开始时输出的一大串，然后通过调试工具发现，`input`的值和我预期的不同：\n```\ninput值的变化：'404'->'va cafe'->'go'->'null'->一直为'null'\n```\n所以我的猜想是错的，后来我猜想这个程序是找到回文数的目的，那会不会准确的程序应该在`input = 404`时就结束，后来通过调试根据发现：\n```java\npublic boolean equals(Object other) {  \n    if (other instanceof IntList oL) {  \n        if (first != oL.first) {  \n            return false;  //本来改反悔true的值，却返回false\n        } else if (rest == null && oL.rest == null) {  \n            ...\n        } else if (rest != null && oL.rest != null) {  \n            ...  \n        } else {  \n            ... \n        }  \n    }  \n    return false;  \n}\n```\n最后只要把对应的`return false;`改成`return true;`就行了。\n\n复盘时，关于`输入流`,我想到个有意思的：\n```java\npublic class ReadLineExample {\n    public static void main(String[] args) {\n        // 1. 第1次打印提示（仅输出，不阻塞）\n        System.out.println(\"请输入一行文本：\");  \n\n        // 2. 创建Scanner（初始化扫描器，不触发输入）\n        Scanner scanner = new Scanner(System.in); \n\n        // 3. 第2次打印提示（仅输出，不阻塞）\n        System.out.println(\"请输入一行文本：\");  \n\n        // 4. 第3次打印提示（仅输出，不阻塞）\n        System.out.println(\"请输入一行文本：\");  // 第六行代码\n\n        // 5. 关键：仅读取1次用户输入！\n        // 程序会暂停，等待用户在控制台输入（无论前面打印多少次提示）\n        String line = scanner.nextLine();  // 第七行代码\n\n        // 6. 输出结果\n        System.out.println(\"你输入的内容是：\" + line);\n        scanner.close();\n    }\n}\n```\n如果在计算机刚刚读取完第六行代码(上面代码里标注的一行)，在读取第七行前输入，那是不是就会卡bug了，用户的输入信息丢失。\n查了下，遗憾地发现不会：\n即使 “计算机刚刚读完第 6 行还没执行第 7 行”，用户此时在控制台输入内容：\n- 输入的内容会被**暂存到系统的输入缓冲区**（属于 `System.in` 的一部分），不会丢失。\n- 当程序执行到 `scanner.nextLine()` 时，会直接从缓冲区读取用户输入的内容，程序继续执行。\n\n### Debug `MachineStage`\n#### Expected lines modified: 2-5\n\n这一块写的很顺利，逻辑也很流畅：\n先运行一遍，通过调试工具的查看差异功能，定位到`machineResult`参数，通过参数的定义锁定`sumOfElementwiseMax(arrOne, arrTwo)`方法，在这里打上断点，开始调试：\n\n![Pasted image 20250615223538.png](/images/Pastedimage20250615223538.png)\n发现`maxes`数组错误，定位到`arrayMax`方法，打上断点，发现`biggerValue`错了：\n![Pasted image 20250615223111.png](/images/Pastedimage20250615223111.png)\n定位到`mysteryMax`方法，重写方法：\n```java\npublic static int mysteryMax(int a, int b) {  \n    int max;  \n    if(a > b) {  \n        max = a;  \n    }else {  \n        max = b;  \n    }  \n    return max;  \n}\n```\n再运行程序，依然错，通过调试工具的查看差异功能，定位`machineResult`参数，再查看`sumOfElementwiseMax(arrOne, arrTwo)`方法，`maxes`数组没有问题，查看`arraySum`方法，通过调试工具发现`mysteryAdd`方法的错误，这里有个小坑，我一开始理所当然的以为`mysteryAdd`方法返回的应该时两数之和，但是运行错误，仔细看才发现不对：\n```java\npublic static int mysteryAdd(int a, int b) {  \n    return b;\n```\n\n最后运行程序成功：\n![Pasted image 20250615230527.png](/images/Pastedimage20250615230527.png)\n\n以上就是这次`Lab03`的内容。","updated":"2025-06-16T06:18:52.186Z","path":"CS61B/Leb03.html","comments":1,"layout":"page","_id":"cmbyperzo0000vcv3dwnidulx","content":"<p><img src=\"/images/Pastedimage20250615154243.png\" alt=\"Pastedimage20250615154243\"></p>\n<h3 id=\"Debug-BeeCountingStage\"><a href=\"#Debug-BeeCountingStage\" class=\"headerlink\" title=\"Debug BeeCountingStage\"></a>Debug <code>BeeCountingStage</code></h3><h4 id=\"Expected-lines-modified-1\"><a href=\"#Expected-lines-modified-1\" class=\"headerlink\" title=\"Expected lines modified: 1\"></a>Expected lines modified: 1</h4><p><img src=\"/images/Pastedimage20250615170843.png\" alt=\"Pasted20image2020250615170843\"><br>跳转到<code>BeeCountingStage.java:54</code>,看到：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">this</span>.input.add(input);</span><br></pre></td></tr></table></figure>\n<p>也就是这个类有一个input变量和input局部变量，<code>because &quot;this.input&quot; is null</code>看起来应该是<code>this.input</code>的问题，向上看到：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.List; <span class=\"comment\">// this.input是个List类</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">private</span> List&lt;String&gt; input; <span class=\"comment\">// 猜对了，有声明</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">BeeCountingStage</span><span class=\"params\">(In in)</span> &#123;  </span><br><span class=\"line\">    <span class=\"built_in\">this</span>.in = in;  </span><br><span class=\"line\">    <span class=\"built_in\">this</span>.responses = Map.of(<span class=\"string\">&quot;go&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">SpeciesListStage</span>(in));  <span class=\"comment\">// 没有实例化</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"built_in\">this</span>.input.add(input); <span class=\"comment\">// this.input应该是个List类(毕竟目前只讲到这个),看看引入的工具包</span></span><br></pre></td></tr></table></figure>\n<p>那加个实例化就好了，这里卡了我好一会，不明白官方怎么做到只改一行代码的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList; <span class=\"comment\">// 加上</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">BeeCountingStage</span><span class=\"params\">(In in)</span> &#123;  </span><br><span class=\"line\">    <span class=\"built_in\">this</span>.in = in;  </span><br><span class=\"line\">    <span class=\"built_in\">this</span>.responses = Map.of(<span class=\"string\">&quot;go&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">SpeciesListStage</span>(in));  </span><br><span class=\"line\">    <span class=\"built_in\">this</span>.input = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(); <span class=\"comment\">// 加上</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Expected-lines-modified-1-1\"><a href=\"#Expected-lines-modified-1-1\" class=\"headerlink\" title=\"Expected lines modified: 1\"></a>Expected lines modified: 1</h4><p><img src=\"/images/Pastedimage20250615172020.png\" alt=\"Pasted image 20250615172020.png\"><br>简单的超出索引异常，这里比较不同的是不能根据堆栈跟踪的第一行直接判断出错的位置，只能通过调试工具找，最终修改：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"title function_\">sumInput</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">this</span>.input.size(); i++) &#123;  </span><br><span class=\"line\">    <span class=\"comment\">// 这里的 i &lt;= this.input.size() 就是导致异常的原因</span></span><br><span class=\"line\">        sum += Integer.parseInt(<span class=\"built_in\">this</span>.input.get(i));  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改之后就可以通过测试了：<br><img src=\"/images/Pastedimage20250615172423.png\" alt=\"Pasted image 20250615172423.png\"></p>\n<p>复盘时看到官方说：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">修正SpeciesListStage中的错误。如果你在发生异常的方法内部（堆栈跟踪的第一行）没有发现问题所在，通常查看第二行，了解该方法是从何处被调用以及使用了哪些参数，这是个不错的办法。 </span><br></pre></td></tr></table></figure>\n<p>回去看了看出错点，的确就在下面的第三行有提到。</p>\n<h3 id=\"Debug-PalindromeStage\"><a href=\"#Debug-PalindromeStage\" class=\"headerlink\" title=\"Debug PalindromeStage\"></a>Debug <code>PalindromeStage</code></h3><h4 id=\"Expected-lines-modified-3\"><a href=\"#Expected-lines-modified-3\" class=\"headerlink\" title=\"Expected lines modified: 3\"></a>Expected lines modified: 3</h4><p><img src=\"/images/Pastedimage20250615173326.png\" alt=\"Pasted image 20250615173326.png\"><br>查了下含义，是算术异常，表示程序尝试执行<strong>除以零</strong>的操作。<br>直接跳转到<code>SpeciesListStage.java:102</code>，改一下就好：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">arraySimilarity</span><span class=\"params\">(List&lt;String&gt; listOne, List&lt;String&gt; listTwo)</span> &#123;  </span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String o : listTwo) &#123;  </span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (similarObjects &gt; <span class=\"number\">0</span>) &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;  </span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"comment\">//return similarObjects / listOne.size();  </span></span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"Expected-lines-modified-2-5\"><a href=\"#Expected-lines-modified-2-5\" class=\"headerlink\" title=\"Expected lines modified: 2-5\"></a>Expected lines modified: 2-5</h4><p><img src=\"/images/Pastedimage20250615175444.png\" alt=\"Pasted image 20250615175444.png\"><br>跳转到：<br><img src=\"/images/Pastedimage20250615175613.png\" alt=\"Pasted image 20250615175613.png\"><br>先<code>Ctl+F</code>找一下<code>Preconditions</code>类，发现是引入的工具包，那直接一整个复制搜索的大操作，然后从这里开始调试，但是会发现很多次返回错误点，那就很难判断到底是哪次的错误了，于是点开被折叠的堆栈跟踪。<br><img src=\"/images/Pastedimage20250615211618.png\" alt=\"Pasted image 20250615211618.png\"><br>从第一条蓝色标注的开始看(虽然不知道什么原理，但是从上面的经验来看，标蓝的最有可能)<br>后来复盘时查了下，写在下面：</p>\n<ul>\n<li>在 IDE的报错堆栈信息里，标蓝的部分一般是<strong>与你当前项目代码直接相关的类和方法</strong> ，也就是你自己编写的代码文件里的内容，方便你快速定位到项目中出错的具体位置</li>\n<li>不标蓝的，是 <strong>JDK 内部的类和方法</strong> 。这些属于 Java 标准库的代码，不是你项目里自己写的代码。IDE 通常不会把它们标蓝突出显示，因为一般情况下，我们不会去修改 JDK 源码，主要是聚焦在自己项目代码里找问题，它们更多是辅助说明错误发生时的调用链路。<br>然后点旁边的灯泡，会看到提示：<br><img src=\"/images/Pastedimage20250615184116.png\" alt=\"Pasted image 20250615184116.png\"><br>这个比较好改，仔细点就行：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> IntList <span class=\"title function_\">digitsToIntList</span><span class=\"params\">(String s)</span> &#123; </span><br><span class=\"line\">    <span class=\"type\">int</span>[] a = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[s.length()];  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> s.length(); i &gt;= <span class=\"number\">1</span>; i--) &#123;  </span><br><span class=\"line\">        a[s.length() - i] = Character.getNumericValue(s.charAt(i-<span class=\"number\">1</span>));  </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> IntList.of(a);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>接下来先看官方提示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果你还没有，请通读上面的注释。查看调用`digitsToIntList`的方法。如果你在该方法中设置断点并通过调试器运行，我们是否曾经退出`while`循环？我们需要满足什么条件才能跳出`while`循环？这个条件是否得到满足？尝试结合使用Java可视化工具，这样你就可以借助可视化工具更仔细地检查这个错误。</span><br></pre></td></tr></table></figure>\n<p>直接<code>ctl+F</code>找到调用<code>digitsToIntList</code> 的方法<code>playStage</code>，大概看一遍就能找到第一个比较明显的错误：<br><img src=\"/images/Pastedimage20250615213033.png\" alt=\"Pasted image 20250615213033.png\"><br>一看就是死循环的料，我的修改方案是引入一个<code>boolean</code>值：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">finish</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;  <span class=\"comment\">// 修改</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!finish) &#123;  <span class=\"comment\">// 修改</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!AdventureUtils.isInt(input)) &#123;  </span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (numLst.equals(reversedLst)) &#123;  </span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Wow, nice room number!&quot;</span>);  </span><br><span class=\"line\">            finish = <span class=\"literal\">true</span>;  <span class=\"comment\">// 修改</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>之后在运行就会一直进入死循环：<br><img src=\"/images/Pastedimage20250615213603.png\" alt=\"Pasted image 20250615213603.png\"><br>通过调试工具发现问题在45行，结果一直为<code>false</code>:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (numLst.equals(reversedLst)) &#123;  </span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Wow, nice room number!&quot;</span>);  </span><br><span class=\"line\">    finish = <span class=\"literal\">true</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>就是这里卡了我好久，一个个说：<br>首先是：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">playStage</span><span class=\"params\">()</span> &#123; </span><br><span class=\"line\">        ...</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!finish) &#123;  </span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">input</span> <span class=\"operator\">=</span> in.readLine();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!AdventureUtils.isInt(input)) &#123;  </span><br><span class=\"line\">            ...</span><br><span class=\"line\">            input = <span class=\"built_in\">this</span>.in.readLine();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我不理解<code>in.readLine()</code>到底是什么，找资料可以知道这是’读取输入流从当前位置到下一行结束符（\\n、\\r或\\r\\n）的所有字符，并返回为字符串’的作用，但是我没有找到什么<code>输入流</code>，调试工具里看它们也是突然冒出来的，后来我以为<code>输入流</code>指的是开始时输出的一大串，然后通过调试工具发现，<code>input</code>的值和我预期的不同：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input值的变化：&#x27;404&#x27;-&gt;&#x27;va cafe&#x27;-&gt;&#x27;go&#x27;-&gt;&#x27;null&#x27;-&gt;一直为&#x27;null&#x27;</span><br></pre></td></tr></table></figure>\n<p>所以我的猜想是错的，后来我猜想这个程序是找到回文数的目的，那会不会准确的程序应该在<code>input = 404</code>时就结束，后来通过调试根据发现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">equals</span><span class=\"params\">(Object other)</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (other <span class=\"keyword\">instanceof</span> IntList oL) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (first != oL.first) &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;  <span class=\"comment\">//本来改反悔true的值，却返回false</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rest == <span class=\"literal\">null</span> &amp;&amp; oL.rest == <span class=\"literal\">null</span>) &#123;  </span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rest != <span class=\"literal\">null</span> &amp;&amp; oL.rest != <span class=\"literal\">null</span>) &#123;  </span><br><span class=\"line\">            ...  </span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">            ... </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后只要把对应的<code>return false;</code>改成<code>return true;</code>就行了。</p>\n<p>复盘时，关于<code>输入流</code>,我想到个有意思的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ReadLineExample</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1. 第1次打印提示（仅输出，不阻塞）</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;请输入一行文本：&quot;</span>);  </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 2. 创建Scanner（初始化扫描器，不触发输入）</span></span><br><span class=\"line\">        <span class=\"type\">Scanner</span> <span class=\"variable\">scanner</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in); </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 3. 第2次打印提示（仅输出，不阻塞）</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;请输入一行文本：&quot;</span>);  </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 4. 第3次打印提示（仅输出，不阻塞）</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;请输入一行文本：&quot;</span>);  <span class=\"comment\">// 第六行代码</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 5. 关键：仅读取1次用户输入！</span></span><br><span class=\"line\">        <span class=\"comment\">// 程序会暂停，等待用户在控制台输入（无论前面打印多少次提示）</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">line</span> <span class=\"operator\">=</span> scanner.nextLine();  <span class=\"comment\">// 第七行代码</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 6. 输出结果</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;你输入的内容是：&quot;</span> + line);</span><br><span class=\"line\">        scanner.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果在计算机刚刚读取完第六行代码(上面代码里标注的一行)，在读取第七行前输入，那是不是就会卡bug了，用户的输入信息丢失。<br>查了下，遗憾地发现不会：<br>即使 “计算机刚刚读完第 6 行还没执行第 7 行”，用户此时在控制台输入内容：</p>\n<ul>\n<li>输入的内容会被<strong>暂存到系统的输入缓冲区</strong>（属于 <code>System.in</code> 的一部分），不会丢失。</li>\n<li>当程序执行到 <code>scanner.nextLine()</code> 时，会直接从缓冲区读取用户输入的内容，程序继续执行。</li>\n</ul>\n<h3 id=\"Debug-MachineStage\"><a href=\"#Debug-MachineStage\" class=\"headerlink\" title=\"Debug MachineStage\"></a>Debug <code>MachineStage</code></h3><h4 id=\"Expected-lines-modified-2-5-1\"><a href=\"#Expected-lines-modified-2-5-1\" class=\"headerlink\" title=\"Expected lines modified: 2-5\"></a>Expected lines modified: 2-5</h4><p>这一块写的很顺利，逻辑也很流畅：<br>先运行一遍，通过调试工具的查看差异功能，定位到<code>machineResult</code>参数，通过参数的定义锁定<code>sumOfElementwiseMax(arrOne, arrTwo)</code>方法，在这里打上断点，开始调试：</p>\n<p><img src=\"/images/Pastedimage20250615223538.png\" alt=\"Pasted image 20250615223538.png\"><br>发现<code>maxes</code>数组错误，定位到<code>arrayMax</code>方法，打上断点，发现<code>biggerValue</code>错了：<br><img src=\"/images/Pastedimage20250615223111.png\" alt=\"Pasted image 20250615223111.png\"><br>定位到<code>mysteryMax</code>方法，重写方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">mysteryMax</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> &#123;  </span><br><span class=\"line\">    <span class=\"type\">int</span> max;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a &gt; b) &#123;  </span><br><span class=\"line\">        max = a;  </span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">        max = b;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> max;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>再运行程序，依然错，通过调试工具的查看差异功能，定位<code>machineResult</code>参数，再查看<code>sumOfElementwiseMax(arrOne, arrTwo)</code>方法，<code>maxes</code>数组没有问题，查看<code>arraySum</code>方法，通过调试工具发现<code>mysteryAdd</code>方法的错误，这里有个小坑，我一开始理所当然的以为<code>mysteryAdd</code>方法返回的应该时两数之和，但是运行错误，仔细看才发现不对：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">mysteryAdd</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> b;</span><br></pre></td></tr></table></figure>\n\n<p>最后运行程序成功：<br><img src=\"/images/Pastedimage20250615230527.png\" alt=\"Pasted image 20250615230527.png\"></p>\n<p>以上就是这次<code>Lab03</code>的内容。</p>\n","excerpt":"","more":"<p><img src=\"/images/Pastedimage20250615154243.png\" alt=\"Pastedimage20250615154243\"></p>\n<h3 id=\"Debug-BeeCountingStage\"><a href=\"#Debug-BeeCountingStage\" class=\"headerlink\" title=\"Debug BeeCountingStage\"></a>Debug <code>BeeCountingStage</code></h3><h4 id=\"Expected-lines-modified-1\"><a href=\"#Expected-lines-modified-1\" class=\"headerlink\" title=\"Expected lines modified: 1\"></a>Expected lines modified: 1</h4><p><img src=\"/images/Pastedimage20250615170843.png\" alt=\"Pasted20image2020250615170843\"><br>跳转到<code>BeeCountingStage.java:54</code>,看到：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">this</span>.input.add(input);</span><br></pre></td></tr></table></figure>\n<p>也就是这个类有一个input变量和input局部变量，<code>because &quot;this.input&quot; is null</code>看起来应该是<code>this.input</code>的问题，向上看到：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.List; <span class=\"comment\">// this.input是个List类</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">private</span> List&lt;String&gt; input; <span class=\"comment\">// 猜对了，有声明</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">BeeCountingStage</span><span class=\"params\">(In in)</span> &#123;  </span><br><span class=\"line\">    <span class=\"built_in\">this</span>.in = in;  </span><br><span class=\"line\">    <span class=\"built_in\">this</span>.responses = Map.of(<span class=\"string\">&quot;go&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">SpeciesListStage</span>(in));  <span class=\"comment\">// 没有实例化</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"built_in\">this</span>.input.add(input); <span class=\"comment\">// this.input应该是个List类(毕竟目前只讲到这个),看看引入的工具包</span></span><br></pre></td></tr></table></figure>\n<p>那加个实例化就好了，这里卡了我好一会，不明白官方怎么做到只改一行代码的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList; <span class=\"comment\">// 加上</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">BeeCountingStage</span><span class=\"params\">(In in)</span> &#123;  </span><br><span class=\"line\">    <span class=\"built_in\">this</span>.in = in;  </span><br><span class=\"line\">    <span class=\"built_in\">this</span>.responses = Map.of(<span class=\"string\">&quot;go&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">SpeciesListStage</span>(in));  </span><br><span class=\"line\">    <span class=\"built_in\">this</span>.input = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(); <span class=\"comment\">// 加上</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Expected-lines-modified-1-1\"><a href=\"#Expected-lines-modified-1-1\" class=\"headerlink\" title=\"Expected lines modified: 1\"></a>Expected lines modified: 1</h4><p><img src=\"/images/Pastedimage20250615172020.png\" alt=\"Pasted image 20250615172020.png\"><br>简单的超出索引异常，这里比较不同的是不能根据堆栈跟踪的第一行直接判断出错的位置，只能通过调试工具找，最终修改：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"title function_\">sumInput</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">this</span>.input.size(); i++) &#123;  </span><br><span class=\"line\">    <span class=\"comment\">// 这里的 i &lt;= this.input.size() 就是导致异常的原因</span></span><br><span class=\"line\">        sum += Integer.parseInt(<span class=\"built_in\">this</span>.input.get(i));  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改之后就可以通过测试了：<br><img src=\"/images/Pastedimage20250615172423.png\" alt=\"Pasted image 20250615172423.png\"></p>\n<p>复盘时看到官方说：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">修正SpeciesListStage中的错误。如果你在发生异常的方法内部（堆栈跟踪的第一行）没有发现问题所在，通常查看第二行，了解该方法是从何处被调用以及使用了哪些参数，这是个不错的办法。 </span><br></pre></td></tr></table></figure>\n<p>回去看了看出错点，的确就在下面的第三行有提到。</p>\n<h3 id=\"Debug-PalindromeStage\"><a href=\"#Debug-PalindromeStage\" class=\"headerlink\" title=\"Debug PalindromeStage\"></a>Debug <code>PalindromeStage</code></h3><h4 id=\"Expected-lines-modified-3\"><a href=\"#Expected-lines-modified-3\" class=\"headerlink\" title=\"Expected lines modified: 3\"></a>Expected lines modified: 3</h4><p><img src=\"/images/Pastedimage20250615173326.png\" alt=\"Pasted image 20250615173326.png\"><br>查了下含义，是算术异常，表示程序尝试执行<strong>除以零</strong>的操作。<br>直接跳转到<code>SpeciesListStage.java:102</code>，改一下就好：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">arraySimilarity</span><span class=\"params\">(List&lt;String&gt; listOne, List&lt;String&gt; listTwo)</span> &#123;  </span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String o : listTwo) &#123;  </span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (similarObjects &gt; <span class=\"number\">0</span>) &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;  </span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"comment\">//return similarObjects / listOne.size();  </span></span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"Expected-lines-modified-2-5\"><a href=\"#Expected-lines-modified-2-5\" class=\"headerlink\" title=\"Expected lines modified: 2-5\"></a>Expected lines modified: 2-5</h4><p><img src=\"/images/Pastedimage20250615175444.png\" alt=\"Pasted image 20250615175444.png\"><br>跳转到：<br><img src=\"/images/Pastedimage20250615175613.png\" alt=\"Pasted image 20250615175613.png\"><br>先<code>Ctl+F</code>找一下<code>Preconditions</code>类，发现是引入的工具包，那直接一整个复制搜索的大操作，然后从这里开始调试，但是会发现很多次返回错误点，那就很难判断到底是哪次的错误了，于是点开被折叠的堆栈跟踪。<br><img src=\"/images/Pastedimage20250615211618.png\" alt=\"Pasted image 20250615211618.png\"><br>从第一条蓝色标注的开始看(虽然不知道什么原理，但是从上面的经验来看，标蓝的最有可能)<br>后来复盘时查了下，写在下面：</p>\n<ul>\n<li>在 IDE的报错堆栈信息里，标蓝的部分一般是<strong>与你当前项目代码直接相关的类和方法</strong> ，也就是你自己编写的代码文件里的内容，方便你快速定位到项目中出错的具体位置</li>\n<li>不标蓝的，是 <strong>JDK 内部的类和方法</strong> 。这些属于 Java 标准库的代码，不是你项目里自己写的代码。IDE 通常不会把它们标蓝突出显示，因为一般情况下，我们不会去修改 JDK 源码，主要是聚焦在自己项目代码里找问题，它们更多是辅助说明错误发生时的调用链路。<br>然后点旁边的灯泡，会看到提示：<br><img src=\"/images/Pastedimage20250615184116.png\" alt=\"Pasted image 20250615184116.png\"><br>这个比较好改，仔细点就行：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> IntList <span class=\"title function_\">digitsToIntList</span><span class=\"params\">(String s)</span> &#123; </span><br><span class=\"line\">    <span class=\"type\">int</span>[] a = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[s.length()];  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> s.length(); i &gt;= <span class=\"number\">1</span>; i--) &#123;  </span><br><span class=\"line\">        a[s.length() - i] = Character.getNumericValue(s.charAt(i-<span class=\"number\">1</span>));  </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> IntList.of(a);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>接下来先看官方提示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果你还没有，请通读上面的注释。查看调用`digitsToIntList`的方法。如果你在该方法中设置断点并通过调试器运行，我们是否曾经退出`while`循环？我们需要满足什么条件才能跳出`while`循环？这个条件是否得到满足？尝试结合使用Java可视化工具，这样你就可以借助可视化工具更仔细地检查这个错误。</span><br></pre></td></tr></table></figure>\n<p>直接<code>ctl+F</code>找到调用<code>digitsToIntList</code> 的方法<code>playStage</code>，大概看一遍就能找到第一个比较明显的错误：<br><img src=\"/images/Pastedimage20250615213033.png\" alt=\"Pasted image 20250615213033.png\"><br>一看就是死循环的料，我的修改方案是引入一个<code>boolean</code>值：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">finish</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;  <span class=\"comment\">// 修改</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!finish) &#123;  <span class=\"comment\">// 修改</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!AdventureUtils.isInt(input)) &#123;  </span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (numLst.equals(reversedLst)) &#123;  </span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Wow, nice room number!&quot;</span>);  </span><br><span class=\"line\">            finish = <span class=\"literal\">true</span>;  <span class=\"comment\">// 修改</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>之后在运行就会一直进入死循环：<br><img src=\"/images/Pastedimage20250615213603.png\" alt=\"Pasted image 20250615213603.png\"><br>通过调试工具发现问题在45行，结果一直为<code>false</code>:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (numLst.equals(reversedLst)) &#123;  </span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Wow, nice room number!&quot;</span>);  </span><br><span class=\"line\">    finish = <span class=\"literal\">true</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>就是这里卡了我好久，一个个说：<br>首先是：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">playStage</span><span class=\"params\">()</span> &#123; </span><br><span class=\"line\">        ...</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!finish) &#123;  </span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">input</span> <span class=\"operator\">=</span> in.readLine();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!AdventureUtils.isInt(input)) &#123;  </span><br><span class=\"line\">            ...</span><br><span class=\"line\">            input = <span class=\"built_in\">this</span>.in.readLine();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我不理解<code>in.readLine()</code>到底是什么，找资料可以知道这是’读取输入流从当前位置到下一行结束符（\\n、\\r或\\r\\n）的所有字符，并返回为字符串’的作用，但是我没有找到什么<code>输入流</code>，调试工具里看它们也是突然冒出来的，后来我以为<code>输入流</code>指的是开始时输出的一大串，然后通过调试工具发现，<code>input</code>的值和我预期的不同：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input值的变化：&#x27;404&#x27;-&gt;&#x27;va cafe&#x27;-&gt;&#x27;go&#x27;-&gt;&#x27;null&#x27;-&gt;一直为&#x27;null&#x27;</span><br></pre></td></tr></table></figure>\n<p>所以我的猜想是错的，后来我猜想这个程序是找到回文数的目的，那会不会准确的程序应该在<code>input = 404</code>时就结束，后来通过调试根据发现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">equals</span><span class=\"params\">(Object other)</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (other <span class=\"keyword\">instanceof</span> IntList oL) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (first != oL.first) &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;  <span class=\"comment\">//本来改反悔true的值，却返回false</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rest == <span class=\"literal\">null</span> &amp;&amp; oL.rest == <span class=\"literal\">null</span>) &#123;  </span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rest != <span class=\"literal\">null</span> &amp;&amp; oL.rest != <span class=\"literal\">null</span>) &#123;  </span><br><span class=\"line\">            ...  </span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">            ... </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后只要把对应的<code>return false;</code>改成<code>return true;</code>就行了。</p>\n<p>复盘时，关于<code>输入流</code>,我想到个有意思的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ReadLineExample</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1. 第1次打印提示（仅输出，不阻塞）</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;请输入一行文本：&quot;</span>);  </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 2. 创建Scanner（初始化扫描器，不触发输入）</span></span><br><span class=\"line\">        <span class=\"type\">Scanner</span> <span class=\"variable\">scanner</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in); </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 3. 第2次打印提示（仅输出，不阻塞）</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;请输入一行文本：&quot;</span>);  </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 4. 第3次打印提示（仅输出，不阻塞）</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;请输入一行文本：&quot;</span>);  <span class=\"comment\">// 第六行代码</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 5. 关键：仅读取1次用户输入！</span></span><br><span class=\"line\">        <span class=\"comment\">// 程序会暂停，等待用户在控制台输入（无论前面打印多少次提示）</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">line</span> <span class=\"operator\">=</span> scanner.nextLine();  <span class=\"comment\">// 第七行代码</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 6. 输出结果</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;你输入的内容是：&quot;</span> + line);</span><br><span class=\"line\">        scanner.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果在计算机刚刚读取完第六行代码(上面代码里标注的一行)，在读取第七行前输入，那是不是就会卡bug了，用户的输入信息丢失。<br>查了下，遗憾地发现不会：<br>即使 “计算机刚刚读完第 6 行还没执行第 7 行”，用户此时在控制台输入内容：</p>\n<ul>\n<li>输入的内容会被<strong>暂存到系统的输入缓冲区</strong>（属于 <code>System.in</code> 的一部分），不会丢失。</li>\n<li>当程序执行到 <code>scanner.nextLine()</code> 时，会直接从缓冲区读取用户输入的内容，程序继续执行。</li>\n</ul>\n<h3 id=\"Debug-MachineStage\"><a href=\"#Debug-MachineStage\" class=\"headerlink\" title=\"Debug MachineStage\"></a>Debug <code>MachineStage</code></h3><h4 id=\"Expected-lines-modified-2-5-1\"><a href=\"#Expected-lines-modified-2-5-1\" class=\"headerlink\" title=\"Expected lines modified: 2-5\"></a>Expected lines modified: 2-5</h4><p>这一块写的很顺利，逻辑也很流畅：<br>先运行一遍，通过调试工具的查看差异功能，定位到<code>machineResult</code>参数，通过参数的定义锁定<code>sumOfElementwiseMax(arrOne, arrTwo)</code>方法，在这里打上断点，开始调试：</p>\n<p><img src=\"/images/Pastedimage20250615223538.png\" alt=\"Pasted image 20250615223538.png\"><br>发现<code>maxes</code>数组错误，定位到<code>arrayMax</code>方法，打上断点，发现<code>biggerValue</code>错了：<br><img src=\"/images/Pastedimage20250615223111.png\" alt=\"Pasted image 20250615223111.png\"><br>定位到<code>mysteryMax</code>方法，重写方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">mysteryMax</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> &#123;  </span><br><span class=\"line\">    <span class=\"type\">int</span> max;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a &gt; b) &#123;  </span><br><span class=\"line\">        max = a;  </span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">        max = b;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> max;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>再运行程序，依然错，通过调试工具的查看差异功能，定位<code>machineResult</code>参数，再查看<code>sumOfElementwiseMax(arrOne, arrTwo)</code>方法，<code>maxes</code>数组没有问题，查看<code>arraySum</code>方法，通过调试工具发现<code>mysteryAdd</code>方法的错误，这里有个小坑，我一开始理所当然的以为<code>mysteryAdd</code>方法返回的应该时两数之和，但是运行错误，仔细看才发现不对：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">mysteryAdd</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> b;</span><br></pre></td></tr></table></figure>\n\n<p>最后运行程序成功：<br><img src=\"/images/Pastedimage20250615230527.png\" alt=\"Pasted image 20250615230527.png\"></p>\n<p>以上就是这次<code>Lab03</code>的内容。</p>\n"},{"title":"Debug 目录","date":"2025-06-13T16:00:00.000Z","categories":["Debug"],"_content":"- [博客流程](博客流程)","source":"Debug/index.md","raw":"---\ntitle: Debug 目录\ndate: 2025-06-14\ncategories:\n  - Debug\n---\n- [博客流程](博客流程)","updated":"2025-06-14T13:31:40.935Z","path":"Debug/index.html","comments":1,"layout":"page","_id":"cmbyperzs0002vcv3bk1h9xt6","content":"<ul>\n<li><a href=\"%E5%8D%9A%E5%AE%A2%E6%B5%81%E7%A8%8B\">博客流程</a></li>\n</ul>\n","excerpt":"","more":"<ul>\n<li><a href=\"%E5%8D%9A%E5%AE%A2%E6%B5%81%E7%A8%8B\">博客流程</a></li>\n</ul>\n"},{"title":"博客流程","date":"2025-06-13T16:00:00.000Z","cssclasses":["Debug","Blog"],"_content":"以下是在 Hexo 博客中，于 `CS61B` 下添加 `proj1` 文件、修改、上传并提交到 GitHub 的完整流程，清晰说明各步骤的目录和操作：\n\n### 一、添加 `proj1` 文件（本地 Hexo 项目中）\n\n#### 1. 确定文件存放目录\n\nHexo 博客中，文章等内容一般放在 `source` 目录。要在 `CS61B` 下添加 `proj1` 文件，需进入 Hexo 项目根目录（假设为 `D:\\study\\Blog` ）的 `source\\CS61B` 目录。\n\n你可以通过文件资源管理器手动进入该目录，也可在终端（PowerShell 或 CMD）中执行：\n```bash\n# 进入 Hexo 根目录\ncd D:\\study\\Blog  \n# 进入 source\\CS61B 目录\ncd source\\CS61B  \n```\n\n#### 2. 创建 `proj1` 文件\n\n- **方式 1：手动创建**  \n    在 `source\\CS61B` 目录下，新建 Markdown 文件（如 `proj1.md` ），直接编辑内容，写入 `proj1` 相关笔记、代码等。\n    \n- **方式 2：Hexo 命令创建**  \n    在 Hexo 根目录（`D:\\study\\Blog` ）执行：\n```bash\nhexo new --path \"source/CS61B/proj1\" \"CS61B proj1 标题\"  \n```\n\n此命令会在 `source\\CS61B` 目录下创建名为 `proj1.md` 的文件（`\"CS61B proj1 标题\"` 是文章标题，可自定义 ），之后你可编辑该文件内容。\n\n### 二、修改文件内容\n\n打开 `source\\CS61B\\proj1.md` 文件（不管是手动创建还是命令创建的 ），在文件中编写或修改内容，比如添加 `proj1` 的说明、代码、笔记等。\n\n文件开头的 Front-matter 可按需配置，示例：\n```markdown\n---\ntitle: CS61B proj1 笔记  \ndate: 2025-06-14  \ncategories:\n  - CS61B  \ntags:\n  - CS61B\n  - proj1  \n---\n\n# CS61B proj1 内容\n这里写具体的 proj1 相关内容，如实现思路、代码片段、遇到的问题及解决办法等...\n```\n\n\n### 三、修改`index.md` 文件\n\n添加**正文内容** 用 Markdown 语法编写，比如：\n```markdown\n---\ntitle: Debug 目录\ndate: 2025-06-14\n---\n# 显示文件索引\n- [文件名](文件相对地址)\n这里记录一些 Debug 过程中遇到的问题和解决方法：\n\n- **问题 1**：程序运行时报错 `xxx`，通过检查配置文件解决。\n- **问题 2**：网络请求超时，调整了超时时间参数。\n```\n\n### 四、生成静态文件并本地预览（可选，确保内容显示正常）\n\n在 Hexo 根目录（`D:\\study\\Blog` ）执行以下命令，生成静态站点文件并启动本地服务器：\n```bash\n# 清理旧的生成文件\nhexo clean  \n# 生成新的静态文件，会把 source 目录内容渲染成 HTML 等\nhexo generate  \n# 启动本地服务器，访问 http://localhost:4000 预览\nhexo server  \n```\n打开浏览器访问 `http://localhost:4000` ，进入 `CS61B` 相关页面，确认 `proj1` 内容显示正常。\n\n### 五、提交到 GitHub（通过 Git 操作）\n\n#### 1. 初始化 Git（若 Hexo 项目未关联 Git 仓库）\n\n如果你的 Hexo 项目还没和 GitHub 仓库关联，先在 Hexo 根目录（`D:\\study\\Blog` ）执行：\n```bash\n# 初始化 Git 仓库\ngit init  \n# 关联 GitHub 远程仓库（替换为你自己的仓库地址）\ngit remote add origin https://github.com/你的GitHub用户名/你的仓库名.git  \n```\n\n#### 2. 暂存、提交、推送文件\n\n在 `Hexo` 根目录（`D:\\study\\Blog` ）执行以下 Git 命令：\n```bash\n# 将修改的文件（包括新增的 proj1.md 等）添加到暂存区\ngit add .  \n# 提交到本地 Git 仓库，填写提交说明（描述本次修改内容）\ngit commit -m \"添加 CS61B/proj1 文件，更新相关内容\"  \n# 推送到 GitHub 远程仓库（假设推送到 main 分支，根据实际分支名调整）\ngit push origin main  \n```\n执行完 `git push` 后，登录 GitHub，进入对应的仓库，就能看到 `CS61B` 目录及 `proj1.md` 文件已上传。\n\n### 关键目录与命令总结\n\n|操作阶段|所在目录|执行命令 / 操作|\n|---|---|---|\n|添加 `proj1` 文件|Hexo 根目录 `source\\CS61B`|手动新建 `proj1.md` 或用 `hexo new --path \"source/CS61B/proj1\" \"标题\"` 创建|\n|修改文件内容|Hexo 根目录 `source\\CS61B`|直接编辑 `proj1.md` 文件内容|\n|本地预览|Hexo 根目录|`hexo clean` → `hexo generate` → `hexo server`|\n|提交到 GitHub|Hexo 根目录|`git add .` → `git commit -m \"提交说明\"` → `git push origin main`|\n\n按照上述步骤，就能顺利在 `CS61B` 下添加、修改 `proj1` 文件，并提交到 GitHub 仓库，让你的 `CS61B` 学习记录同步到线上啦。","source":"Debug/博客流程.md","raw":"---\ntitle: 博客流程\ndate: 2025-06-14\ncssclasses:\n  - Debug\n  - Blog\n---\n以下是在 Hexo 博客中，于 `CS61B` 下添加 `proj1` 文件、修改、上传并提交到 GitHub 的完整流程，清晰说明各步骤的目录和操作：\n\n### 一、添加 `proj1` 文件（本地 Hexo 项目中）\n\n#### 1. 确定文件存放目录\n\nHexo 博客中，文章等内容一般放在 `source` 目录。要在 `CS61B` 下添加 `proj1` 文件，需进入 Hexo 项目根目录（假设为 `D:\\study\\Blog` ）的 `source\\CS61B` 目录。\n\n你可以通过文件资源管理器手动进入该目录，也可在终端（PowerShell 或 CMD）中执行：\n```bash\n# 进入 Hexo 根目录\ncd D:\\study\\Blog  \n# 进入 source\\CS61B 目录\ncd source\\CS61B  \n```\n\n#### 2. 创建 `proj1` 文件\n\n- **方式 1：手动创建**  \n    在 `source\\CS61B` 目录下，新建 Markdown 文件（如 `proj1.md` ），直接编辑内容，写入 `proj1` 相关笔记、代码等。\n    \n- **方式 2：Hexo 命令创建**  \n    在 Hexo 根目录（`D:\\study\\Blog` ）执行：\n```bash\nhexo new --path \"source/CS61B/proj1\" \"CS61B proj1 标题\"  \n```\n\n此命令会在 `source\\CS61B` 目录下创建名为 `proj1.md` 的文件（`\"CS61B proj1 标题\"` 是文章标题，可自定义 ），之后你可编辑该文件内容。\n\n### 二、修改文件内容\n\n打开 `source\\CS61B\\proj1.md` 文件（不管是手动创建还是命令创建的 ），在文件中编写或修改内容，比如添加 `proj1` 的说明、代码、笔记等。\n\n文件开头的 Front-matter 可按需配置，示例：\n```markdown\n---\ntitle: CS61B proj1 笔记  \ndate: 2025-06-14  \ncategories:\n  - CS61B  \ntags:\n  - CS61B\n  - proj1  \n---\n\n# CS61B proj1 内容\n这里写具体的 proj1 相关内容，如实现思路、代码片段、遇到的问题及解决办法等...\n```\n\n\n### 三、修改`index.md` 文件\n\n添加**正文内容** 用 Markdown 语法编写，比如：\n```markdown\n---\ntitle: Debug 目录\ndate: 2025-06-14\n---\n# 显示文件索引\n- [文件名](文件相对地址)\n这里记录一些 Debug 过程中遇到的问题和解决方法：\n\n- **问题 1**：程序运行时报错 `xxx`，通过检查配置文件解决。\n- **问题 2**：网络请求超时，调整了超时时间参数。\n```\n\n### 四、生成静态文件并本地预览（可选，确保内容显示正常）\n\n在 Hexo 根目录（`D:\\study\\Blog` ）执行以下命令，生成静态站点文件并启动本地服务器：\n```bash\n# 清理旧的生成文件\nhexo clean  \n# 生成新的静态文件，会把 source 目录内容渲染成 HTML 等\nhexo generate  \n# 启动本地服务器，访问 http://localhost:4000 预览\nhexo server  \n```\n打开浏览器访问 `http://localhost:4000` ，进入 `CS61B` 相关页面，确认 `proj1` 内容显示正常。\n\n### 五、提交到 GitHub（通过 Git 操作）\n\n#### 1. 初始化 Git（若 Hexo 项目未关联 Git 仓库）\n\n如果你的 Hexo 项目还没和 GitHub 仓库关联，先在 Hexo 根目录（`D:\\study\\Blog` ）执行：\n```bash\n# 初始化 Git 仓库\ngit init  \n# 关联 GitHub 远程仓库（替换为你自己的仓库地址）\ngit remote add origin https://github.com/你的GitHub用户名/你的仓库名.git  \n```\n\n#### 2. 暂存、提交、推送文件\n\n在 `Hexo` 根目录（`D:\\study\\Blog` ）执行以下 Git 命令：\n```bash\n# 将修改的文件（包括新增的 proj1.md 等）添加到暂存区\ngit add .  \n# 提交到本地 Git 仓库，填写提交说明（描述本次修改内容）\ngit commit -m \"添加 CS61B/proj1 文件，更新相关内容\"  \n# 推送到 GitHub 远程仓库（假设推送到 main 分支，根据实际分支名调整）\ngit push origin main  \n```\n执行完 `git push` 后，登录 GitHub，进入对应的仓库，就能看到 `CS61B` 目录及 `proj1.md` 文件已上传。\n\n### 关键目录与命令总结\n\n|操作阶段|所在目录|执行命令 / 操作|\n|---|---|---|\n|添加 `proj1` 文件|Hexo 根目录 `source\\CS61B`|手动新建 `proj1.md` 或用 `hexo new --path \"source/CS61B/proj1\" \"标题\"` 创建|\n|修改文件内容|Hexo 根目录 `source\\CS61B`|直接编辑 `proj1.md` 文件内容|\n|本地预览|Hexo 根目录|`hexo clean` → `hexo generate` → `hexo server`|\n|提交到 GitHub|Hexo 根目录|`git add .` → `git commit -m \"提交说明\"` → `git push origin main`|\n\n按照上述步骤，就能顺利在 `CS61B` 下添加、修改 `proj1` 文件，并提交到 GitHub 仓库，让你的 `CS61B` 学习记录同步到线上啦。","updated":"2025-06-14T10:48:13.725Z","path":"Debug/博客流程.html","comments":1,"layout":"page","_id":"cmbyperzt0004vcv3ha344rlc","content":"<p>以下是在 Hexo 博客中，于 <code>CS61B</code> 下添加 <code>proj1</code> 文件、修改、上传并提交到 GitHub 的完整流程，清晰说明各步骤的目录和操作：</p>\n<h3 id=\"一、添加-proj1-文件（本地-Hexo-项目中）\"><a href=\"#一、添加-proj1-文件（本地-Hexo-项目中）\" class=\"headerlink\" title=\"一、添加 proj1 文件（本地 Hexo 项目中）\"></a>一、添加 <code>proj1</code> 文件（本地 Hexo 项目中）</h3><h4 id=\"1-确定文件存放目录\"><a href=\"#1-确定文件存放目录\" class=\"headerlink\" title=\"1. 确定文件存放目录\"></a>1. 确定文件存放目录</h4><p>Hexo 博客中，文章等内容一般放在 <code>source</code> 目录。要在 <code>CS61B</code> 下添加 <code>proj1</code> 文件，需进入 Hexo 项目根目录（假设为 <code>D:\\study\\Blog</code> ）的 <code>source\\CS61B</code> 目录。</p>\n<p>你可以通过文件资源管理器手动进入该目录，也可在终端（PowerShell 或 CMD）中执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入 Hexo 根目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> D:\\study\\Blog  </span><br><span class=\"line\"><span class=\"comment\"># 进入 source\\CS61B 目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"built_in\">source</span>\\CS61B  </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-创建-proj1-文件\"><a href=\"#2-创建-proj1-文件\" class=\"headerlink\" title=\"2. 创建 proj1 文件\"></a>2. 创建 <code>proj1</code> 文件</h4><ul>\n<li><p><strong>方式 1：手动创建</strong><br>  在 <code>source\\CS61B</code> 目录下，新建 Markdown 文件（如 <code>proj1.md</code> ），直接编辑内容，写入 <code>proj1</code> 相关笔记、代码等。</p>\n</li>\n<li><p><strong>方式 2：Hexo 命令创建</strong><br>  在 Hexo 根目录（<code>D:\\study\\Blog</code> ）执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new --path <span class=\"string\">&quot;source/CS61B/proj1&quot;</span> <span class=\"string\">&quot;CS61B proj1 标题&quot;</span>  </span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>此命令会在 <code>source\\CS61B</code> 目录下创建名为 <code>proj1.md</code> 的文件（<code>&quot;CS61B proj1 标题&quot;</code> 是文章标题，可自定义 ），之后你可编辑该文件内容。</p>\n<h3 id=\"二、修改文件内容\"><a href=\"#二、修改文件内容\" class=\"headerlink\" title=\"二、修改文件内容\"></a>二、修改文件内容</h3><p>打开 <code>source\\CS61B\\proj1.md</code> 文件（不管是手动创建还是命令创建的 ），在文件中编写或修改内容，比如添加 <code>proj1</code> 的说明、代码、笔记等。</p>\n<p>文件开头的 Front-matter 可按需配置，示例：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: CS61B proj1 笔记  </span><br><span class=\"line\">date: 2025-06-14  </span><br><span class=\"line\">categories:</span><br><span class=\"line\"><span class=\"bullet\">  -</span> CS61B  </span><br><span class=\"line\">tags:</span><br><span class=\"line\"><span class=\"bullet\">  -</span> CS61B</span><br><span class=\"line\"><span class=\"section\">  - proj1  </span></span><br><span class=\"line\"><span class=\"section\">---</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\"># CS61B proj1 内容</span></span><br><span class=\"line\">这里写具体的 proj1 相关内容，如实现思路、代码片段、遇到的问题及解决办法等...</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"三、修改index-md-文件\"><a href=\"#三、修改index-md-文件\" class=\"headerlink\" title=\"三、修改index.md 文件\"></a>三、修改<code>index.md</code> 文件</h3><p>添加<strong>正文内容</strong> 用 Markdown 语法编写，比如：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: Debug 目录</span><br><span class=\"line\"><span class=\"section\">date: 2025-06-14</span></span><br><span class=\"line\"><span class=\"section\">---</span></span><br><span class=\"line\"><span class=\"section\"># 显示文件索引</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> [<span class=\"string\">文件名</span>](<span class=\"link\">文件相对地址</span>)</span><br><span class=\"line\">这里记录一些 Debug 过程中遇到的问题和解决方法：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"strong\">**问题 1**</span>：程序运行时报错 <span class=\"code\">`xxx`</span>，通过检查配置文件解决。</span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"strong\">**问题 2**</span>：网络请求超时，调整了超时时间参数。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"四、生成静态文件并本地预览（可选，确保内容显示正常）\"><a href=\"#四、生成静态文件并本地预览（可选，确保内容显示正常）\" class=\"headerlink\" title=\"四、生成静态文件并本地预览（可选，确保内容显示正常）\"></a>四、生成静态文件并本地预览（可选，确保内容显示正常）</h3><p>在 Hexo 根目录（<code>D:\\study\\Blog</code> ）执行以下命令，生成静态站点文件并启动本地服务器：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 清理旧的生成文件</span></span><br><span class=\"line\">hexo clean  </span><br><span class=\"line\"><span class=\"comment\"># 生成新的静态文件，会把 source 目录内容渲染成 HTML 等</span></span><br><span class=\"line\">hexo generate  </span><br><span class=\"line\"><span class=\"comment\"># 启动本地服务器，访问 http://localhost:4000 预览</span></span><br><span class=\"line\">hexo server  </span><br></pre></td></tr></table></figure>\n<p>打开浏览器访问 <code>http://localhost:4000</code> ，进入 <code>CS61B</code> 相关页面，确认 <code>proj1</code> 内容显示正常。</p>\n<h3 id=\"五、提交到-GitHub（通过-Git-操作）\"><a href=\"#五、提交到-GitHub（通过-Git-操作）\" class=\"headerlink\" title=\"五、提交到 GitHub（通过 Git 操作）\"></a>五、提交到 GitHub（通过 Git 操作）</h3><h4 id=\"1-初始化-Git（若-Hexo-项目未关联-Git-仓库）\"><a href=\"#1-初始化-Git（若-Hexo-项目未关联-Git-仓库）\" class=\"headerlink\" title=\"1. 初始化 Git（若 Hexo 项目未关联 Git 仓库）\"></a>1. 初始化 Git（若 Hexo 项目未关联 Git 仓库）</h4><p>如果你的 Hexo 项目还没和 GitHub 仓库关联，先在 Hexo 根目录（<code>D:\\study\\Blog</code> ）执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 初始化 Git 仓库</span></span><br><span class=\"line\">git init  </span><br><span class=\"line\"><span class=\"comment\"># 关联 GitHub 远程仓库（替换为你自己的仓库地址）</span></span><br><span class=\"line\">git remote add origin https://github.com/你的GitHub用户名/你的仓库名.git  </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-暂存、提交、推送文件\"><a href=\"#2-暂存、提交、推送文件\" class=\"headerlink\" title=\"2. 暂存、提交、推送文件\"></a>2. 暂存、提交、推送文件</h4><p>在 <code>Hexo</code> 根目录（<code>D:\\study\\Blog</code> ）执行以下 Git 命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将修改的文件（包括新增的 proj1.md 等）添加到暂存区</span></span><br><span class=\"line\">git add .  </span><br><span class=\"line\"><span class=\"comment\"># 提交到本地 Git 仓库，填写提交说明（描述本次修改内容）</span></span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;添加 CS61B/proj1 文件，更新相关内容&quot;</span>  </span><br><span class=\"line\"><span class=\"comment\"># 推送到 GitHub 远程仓库（假设推送到 main 分支，根据实际分支名调整）</span></span><br><span class=\"line\">git push origin main  </span><br></pre></td></tr></table></figure>\n<p>执行完 <code>git push</code> 后，登录 GitHub，进入对应的仓库，就能看到 <code>CS61B</code> 目录及 <code>proj1.md</code> 文件已上传。</p>\n<h3 id=\"关键目录与命令总结\"><a href=\"#关键目录与命令总结\" class=\"headerlink\" title=\"关键目录与命令总结\"></a>关键目录与命令总结</h3><table>\n<thead>\n<tr>\n<th>操作阶段</th>\n<th>所在目录</th>\n<th>执行命令 &#x2F; 操作</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>添加 <code>proj1</code> 文件</td>\n<td>Hexo 根目录 <code>source\\CS61B</code></td>\n<td>手动新建 <code>proj1.md</code> 或用 <code>hexo new --path &quot;source/CS61B/proj1&quot; &quot;标题&quot;</code> 创建</td>\n</tr>\n<tr>\n<td>修改文件内容</td>\n<td>Hexo 根目录 <code>source\\CS61B</code></td>\n<td>直接编辑 <code>proj1.md</code> 文件内容</td>\n</tr>\n<tr>\n<td>本地预览</td>\n<td>Hexo 根目录</td>\n<td><code>hexo clean</code> → <code>hexo generate</code> → <code>hexo server</code></td>\n</tr>\n<tr>\n<td>提交到 GitHub</td>\n<td>Hexo 根目录</td>\n<td><code>git add .</code> → <code>git commit -m &quot;提交说明&quot;</code> → <code>git push origin main</code></td>\n</tr>\n</tbody></table>\n<p>按照上述步骤，就能顺利在 <code>CS61B</code> 下添加、修改 <code>proj1</code> 文件，并提交到 GitHub 仓库，让你的 <code>CS61B</code> 学习记录同步到线上啦。</p>\n","excerpt":"","more":"<p>以下是在 Hexo 博客中，于 <code>CS61B</code> 下添加 <code>proj1</code> 文件、修改、上传并提交到 GitHub 的完整流程，清晰说明各步骤的目录和操作：</p>\n<h3 id=\"一、添加-proj1-文件（本地-Hexo-项目中）\"><a href=\"#一、添加-proj1-文件（本地-Hexo-项目中）\" class=\"headerlink\" title=\"一、添加 proj1 文件（本地 Hexo 项目中）\"></a>一、添加 <code>proj1</code> 文件（本地 Hexo 项目中）</h3><h4 id=\"1-确定文件存放目录\"><a href=\"#1-确定文件存放目录\" class=\"headerlink\" title=\"1. 确定文件存放目录\"></a>1. 确定文件存放目录</h4><p>Hexo 博客中，文章等内容一般放在 <code>source</code> 目录。要在 <code>CS61B</code> 下添加 <code>proj1</code> 文件，需进入 Hexo 项目根目录（假设为 <code>D:\\study\\Blog</code> ）的 <code>source\\CS61B</code> 目录。</p>\n<p>你可以通过文件资源管理器手动进入该目录，也可在终端（PowerShell 或 CMD）中执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入 Hexo 根目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> D:\\study\\Blog  </span><br><span class=\"line\"><span class=\"comment\"># 进入 source\\CS61B 目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"built_in\">source</span>\\CS61B  </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-创建-proj1-文件\"><a href=\"#2-创建-proj1-文件\" class=\"headerlink\" title=\"2. 创建 proj1 文件\"></a>2. 创建 <code>proj1</code> 文件</h4><ul>\n<li><p><strong>方式 1：手动创建</strong><br>  在 <code>source\\CS61B</code> 目录下，新建 Markdown 文件（如 <code>proj1.md</code> ），直接编辑内容，写入 <code>proj1</code> 相关笔记、代码等。</p>\n</li>\n<li><p><strong>方式 2：Hexo 命令创建</strong><br>  在 Hexo 根目录（<code>D:\\study\\Blog</code> ）执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new --path <span class=\"string\">&quot;source/CS61B/proj1&quot;</span> <span class=\"string\">&quot;CS61B proj1 标题&quot;</span>  </span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>此命令会在 <code>source\\CS61B</code> 目录下创建名为 <code>proj1.md</code> 的文件（<code>&quot;CS61B proj1 标题&quot;</code> 是文章标题，可自定义 ），之后你可编辑该文件内容。</p>\n<h3 id=\"二、修改文件内容\"><a href=\"#二、修改文件内容\" class=\"headerlink\" title=\"二、修改文件内容\"></a>二、修改文件内容</h3><p>打开 <code>source\\CS61B\\proj1.md</code> 文件（不管是手动创建还是命令创建的 ），在文件中编写或修改内容，比如添加 <code>proj1</code> 的说明、代码、笔记等。</p>\n<p>文件开头的 Front-matter 可按需配置，示例：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: CS61B proj1 笔记  </span><br><span class=\"line\">date: 2025-06-14  </span><br><span class=\"line\">categories:</span><br><span class=\"line\"><span class=\"bullet\">  -</span> CS61B  </span><br><span class=\"line\">tags:</span><br><span class=\"line\"><span class=\"bullet\">  -</span> CS61B</span><br><span class=\"line\"><span class=\"section\">  - proj1  </span></span><br><span class=\"line\"><span class=\"section\">---</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\"># CS61B proj1 内容</span></span><br><span class=\"line\">这里写具体的 proj1 相关内容，如实现思路、代码片段、遇到的问题及解决办法等...</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"三、修改index-md-文件\"><a href=\"#三、修改index-md-文件\" class=\"headerlink\" title=\"三、修改index.md 文件\"></a>三、修改<code>index.md</code> 文件</h3><p>添加<strong>正文内容</strong> 用 Markdown 语法编写，比如：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: Debug 目录</span><br><span class=\"line\"><span class=\"section\">date: 2025-06-14</span></span><br><span class=\"line\"><span class=\"section\">---</span></span><br><span class=\"line\"><span class=\"section\"># 显示文件索引</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> [<span class=\"string\">文件名</span>](<span class=\"link\">文件相对地址</span>)</span><br><span class=\"line\">这里记录一些 Debug 过程中遇到的问题和解决方法：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"strong\">**问题 1**</span>：程序运行时报错 <span class=\"code\">`xxx`</span>，通过检查配置文件解决。</span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"strong\">**问题 2**</span>：网络请求超时，调整了超时时间参数。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"四、生成静态文件并本地预览（可选，确保内容显示正常）\"><a href=\"#四、生成静态文件并本地预览（可选，确保内容显示正常）\" class=\"headerlink\" title=\"四、生成静态文件并本地预览（可选，确保内容显示正常）\"></a>四、生成静态文件并本地预览（可选，确保内容显示正常）</h3><p>在 Hexo 根目录（<code>D:\\study\\Blog</code> ）执行以下命令，生成静态站点文件并启动本地服务器：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 清理旧的生成文件</span></span><br><span class=\"line\">hexo clean  </span><br><span class=\"line\"><span class=\"comment\"># 生成新的静态文件，会把 source 目录内容渲染成 HTML 等</span></span><br><span class=\"line\">hexo generate  </span><br><span class=\"line\"><span class=\"comment\"># 启动本地服务器，访问 http://localhost:4000 预览</span></span><br><span class=\"line\">hexo server  </span><br></pre></td></tr></table></figure>\n<p>打开浏览器访问 <code>http://localhost:4000</code> ，进入 <code>CS61B</code> 相关页面，确认 <code>proj1</code> 内容显示正常。</p>\n<h3 id=\"五、提交到-GitHub（通过-Git-操作）\"><a href=\"#五、提交到-GitHub（通过-Git-操作）\" class=\"headerlink\" title=\"五、提交到 GitHub（通过 Git 操作）\"></a>五、提交到 GitHub（通过 Git 操作）</h3><h4 id=\"1-初始化-Git（若-Hexo-项目未关联-Git-仓库）\"><a href=\"#1-初始化-Git（若-Hexo-项目未关联-Git-仓库）\" class=\"headerlink\" title=\"1. 初始化 Git（若 Hexo 项目未关联 Git 仓库）\"></a>1. 初始化 Git（若 Hexo 项目未关联 Git 仓库）</h4><p>如果你的 Hexo 项目还没和 GitHub 仓库关联，先在 Hexo 根目录（<code>D:\\study\\Blog</code> ）执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 初始化 Git 仓库</span></span><br><span class=\"line\">git init  </span><br><span class=\"line\"><span class=\"comment\"># 关联 GitHub 远程仓库（替换为你自己的仓库地址）</span></span><br><span class=\"line\">git remote add origin https://github.com/你的GitHub用户名/你的仓库名.git  </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-暂存、提交、推送文件\"><a href=\"#2-暂存、提交、推送文件\" class=\"headerlink\" title=\"2. 暂存、提交、推送文件\"></a>2. 暂存、提交、推送文件</h4><p>在 <code>Hexo</code> 根目录（<code>D:\\study\\Blog</code> ）执行以下 Git 命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将修改的文件（包括新增的 proj1.md 等）添加到暂存区</span></span><br><span class=\"line\">git add .  </span><br><span class=\"line\"><span class=\"comment\"># 提交到本地 Git 仓库，填写提交说明（描述本次修改内容）</span></span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;添加 CS61B/proj1 文件，更新相关内容&quot;</span>  </span><br><span class=\"line\"><span class=\"comment\"># 推送到 GitHub 远程仓库（假设推送到 main 分支，根据实际分支名调整）</span></span><br><span class=\"line\">git push origin main  </span><br></pre></td></tr></table></figure>\n<p>执行完 <code>git push</code> 后，登录 GitHub，进入对应的仓库，就能看到 <code>CS61B</code> 目录及 <code>proj1.md</code> 文件已上传。</p>\n<h3 id=\"关键目录与命令总结\"><a href=\"#关键目录与命令总结\" class=\"headerlink\" title=\"关键目录与命令总结\"></a>关键目录与命令总结</h3><table>\n<thead>\n<tr>\n<th>操作阶段</th>\n<th>所在目录</th>\n<th>执行命令 &#x2F; 操作</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>添加 <code>proj1</code> 文件</td>\n<td>Hexo 根目录 <code>source\\CS61B</code></td>\n<td>手动新建 <code>proj1.md</code> 或用 <code>hexo new --path &quot;source/CS61B/proj1&quot; &quot;标题&quot;</code> 创建</td>\n</tr>\n<tr>\n<td>修改文件内容</td>\n<td>Hexo 根目录 <code>source\\CS61B</code></td>\n<td>直接编辑 <code>proj1.md</code> 文件内容</td>\n</tr>\n<tr>\n<td>本地预览</td>\n<td>Hexo 根目录</td>\n<td><code>hexo clean</code> → <code>hexo generate</code> → <code>hexo server</code></td>\n</tr>\n<tr>\n<td>提交到 GitHub</td>\n<td>Hexo 根目录</td>\n<td><code>git add .</code> → <code>git commit -m &quot;提交说明&quot;</code> → <code>git push origin main</code></td>\n</tr>\n</tbody></table>\n<p>按照上述步骤，就能顺利在 <code>CS61B</code> 下添加、修改 <code>proj1</code> 文件，并提交到 GitHub 仓库，让你的 <code>CS61B</code> 学习记录同步到线上啦。</p>\n"},{"title":"proj0","date":"2025-06-13T16:00:00.000Z","cssclasses":"CS61B","_content":"这次的`proj` 整体挺简单的，让我惊讶的是相比CS61A，它会提示要用到的辅助方法，不需要像之前非得看完整个框架才能开始做，而且还有风格检查和`git` ,`GitHub` 相关，刚好弥补了我不知道该怎么练习的苦恼。 \n\n---\n\n这次的项目是一个叫[2048](https://play2048.co/) 的游戏。\n\n## Task 1: Empty Space Exists\n\n如果棋盘上有空格就返回true，否则放回false 。\n遍历就解决了：\n\n```java\npublic boolean emptySpaceExists() {  \n    for (int x = 0; x < board.size(); x++) {  \n        for (int y = 0; y < board.size(); y++) {  \n            if (board.tile(x, y) == null) { //空方块则返回null  \n                return true;  \n            }  \n        }  \n    }  \n    return false;  \n}\n```\n\n## Task 2: Max Tile Exists\n\n如果棋盘上的任何瓦片值为获胜值（MAX_PIECE = 2048），此方法应返回 true。\n同样是遍历，但是要注意获取瓦片值前要确保瓦片存在：\n\n```java\npublic boolean maxTileExists() {  \n    for (int x = 0; x < board.size(); x++) {  \n        for (int y = 0; y < board.size(); y++) {  \n            if ((board.tile(x, y) != null) && (board.tile(x, y).value() == MAX_PIECE)) {  \n                return true;  \n            }  \n        }  \n    }  \n    return false;  \n}\n```\n\n## Task 3: At Least One Move Exists\n\n如果存在任何有效的移动，这个方法应该返回 true。\n存在有效移动的两种方式：\n*  棋盘上至少有一个空格。\n* 棋盘上有两个相邻（它们之间可以有空格）且值相同的方块。\n\n第一种很好判断，直接丢给刚刚完成的`emptySpaceExists()` 就行，第二个条件我写的很丑...QAQ也是基于遍历，分成横向遍历和纵向遍历，它们接下来的步骤差不多：创建一个‘先行者’(`x1`,`y1`),比较基础瓦片和先行者的值。\n感觉这题有点像力扣的一道棋盘题，不过那个是判断达到最终结果的最少步数，用的多叉树解决的。\n\n```java\npublic boolean atLeastOneMoveExists() {  \n    if (emptySpaceExists()) {  \n        return true;  \n    }  \n    for (int x = 0; x < board.size(); x++) {  \n        for (int y = 0; y < board.size() - 1; y++) {  \n            for (int x1 = x + 1; x1 < board.size(); x1++) {  \n                if (board.tile(x, y) != null && board.tile(x1, y) != null) {  \n                    if (board.tile(x, y).value() == board.tile(x1, y).value()) {  \n                        return true;  \n                    } else {  \n                        break;  \n                    }  \n                }  \n            }  \n            for (int y1 = y + 1; y1 < board.size(); y1++) {  \n                if (board.tile(x, y) != null && board.tile(x, y1) != null) {  \n                    if (board.tile(x, y).value() == board.tile(x, y1).value()) {  \n                        return true;  \n                    } else {  \n                        break;  \n                    }  \n                }  \n  \n            }  \n        }  \n    }  \n    return false;  \n}\n```\n\n## ## Task 5: Move Tile Up (No Merging)\n\n将位置 `(x, y)` 的方块尽可能向上移动到其所在列的最上方。\n这里提示要用 `Board` 类的方法 `move(int x, int y, Tile tile)`，这个方法将给定的 `tile` 移动到棋盘上的 `(x, y)` 位置。而且要求`moveTileUpAsFarAsPossible` 解决方案应该恰好调用一次 `move` 方法。那就是先确定步数再用`move` 。\n这里有一个小坑，如果你查看`Board` 类方法 `move` ，会发现：\n```java\nif (tile1 == null) {  \n\t...\n} else {  \n    if (tile.value() != tile1.value()) {  \n    ...  \n    }  \n    next = Tile.create(2 * tile.value(), px, py);  \n    tile1.setNext(next);  \n}\n```\n也就是如果传入`move` 的瓦片如果值存在，就一定会更新值，无论它是否移动过。于是就要注意不能把顶层瓦片传入`move` :\n```java\npublic void moveTileUpAsFarAsPossible(int x, int y) {  \n    Tile currTile = board.tile(x, y);  \n    int myValue = currTile.value();  \n    int targetY = y;  \n    int step = 0;  \n    for (int i = targetY + 1; i < board.size(); i++) { //i = targetY + 1 从下一个方块开始比较  \n        if (board.tile(x, i) == null) {  \n            step += 1;  \n        } else {  \n            if (board.tile(x, i).value() == myValue && i != y) { //i != y 防止方块在顶层时加上自己的值  \n                if (!board.tile(x, i).wasMerged()) {  \n                    step += 1;  \n                }  \n            }  \n            break;  \n        }  \n    }  \n    if (step != 0) {  \n        board.move(x, targetY + step, currTile); // 顶层方块不移动但会检测合并，防止重复加上自己的值  \n    }  \n}\n```\n\n## Task 6: Merging Tiles\n\n瓦片可以通过空格向上移动。当瓦片遇到非空格时，如果那个格子里有另一个相同值的瓦片，并且那个瓦片还没有因为这个倾斜操作被合并过，那么这两个瓦片应该合并。\n我发现我在上面的题里已经解决这个问题了，于是跳过。\n\n## Task 7: Tilt Column\n\n这个方法应该将给定坐标的列向上倾斜，将列中的所有方块移动到正确的位置，并合并需要合并的方块。\n其实就是对`moveTileUpAsFarAsPossible`方法的抽象包装，把`moveTileUpAsFarAsPossible`方法用到给定`x`坐标的一列，注意要自上而下的调用：\n\n```java\npublic void tiltColumn(int x) {  \n    for (int y = board.size() - 1; y >= 0; y--) {  \n        if (board.tile(x, y) != null) {  \n            moveTileUpAsFarAsPossible(x, y);  \n        }  \n    }  \n}\n```\n\n## Task 8: Tilt Up\n\n这个方法应该将整个棋盘向上倾斜，将所有列中的所有方块移动到它们应有的位置，并合并需要合并的方块。\n其实就是对`tiltColumn`方法的抽象包装，在棋盘的每一列调用`tiltColumn`方法：\n```java\npublic void tilt(Side side) {  \n    for (int x = 0; x < board.size(); x++) {  \n        tiltColumn(x);  \n    }  \n}\n```\n\n## Task 9: Tilt in Four Directions\n\n既然我们已经实现了向上方向的倾斜功能，现在我们必须对其他三个方向做同样的事情。\n这里我的方法应该和官方期望的解法不同，我看官方的提示好像还要用到`dubug`，这里我看它给出\n1. “ `Side` 类是一种特殊的类，称为 `Enum` ”\n2. “枚举可以用类似 `Side s = Side.NORTH` 的语法赋值。请注意，我们不是使用 `new` 关键字，而是直接将 `Side` 值设置为四个值中的一个”\n3. “如果你对 Java 枚举感兴趣，请查看 https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html 。”\n这几个提示，结合起来就是：\n```java\npublic void tiltWrapper(Side side) {  \n    board.resetMerged();  \n    switch (side) {  \n        case NORTH:  \n            board.setViewingPerspective(Side.NORTH);  \n            tilt(side);  \n            break;  \n        case WEST:  \n            board.setViewingPerspective(Side.WEST);  \n            tilt(side);  \n            board.setViewingPerspective(Side.NORTH);  \n            break;  \n        case SOUTH:  \n            board.setViewingPerspective(Side.SOUTH);  \n            tilt(side);  \n            board.setViewingPerspective(Side.NORTH);  \n            break;  \n        case EAST:  \n            board.setViewingPerspective(Side.EAST);  \n            tilt(side);  \n            board.setViewingPerspective(Side.NORTH);  \n            break;  \n        default:  \n            break;  \n    }  \n}\n```\n\n## Task 10: Updating Score\n\n实现的分数更新。\n这个直接在`moveTileUpAsFarAsPossible`方法里插入一行就行了：\n\n```java\npublic void moveTileUpAsFarAsPossible(int x, int y) {  \n    Tile currTile = board.tile(x, y);  \n    int myValue = currTile.value();  \n    int targetY = y;  \n    int step = 0;  \n    for (int i = targetY + 1; i < board.size(); i++) { \n        if (board.tile(x, i) == null) {  \n            step += 1;  \n        } else {  \n            if (board.tile(x, i).value() == myValue && i != y) { \n                if (!board.tile(x, i).wasMerged()) {  \n                    this.score += board.tile(x, y).value() * 2;  // 插入这里\n                    step += 1; \n                }  \n            }  \n            break;  \n        }  \n    }  \n    if (step != 0) {  \n        board.move(x, targetY + step, currTile); \n}\n```","source":"CS61B/proj0.md","raw":"---\ntitle: proj0\ndate: 2025-06-14\ncssclasses: CS61B\n---\n这次的`proj` 整体挺简单的，让我惊讶的是相比CS61A，它会提示要用到的辅助方法，不需要像之前非得看完整个框架才能开始做，而且还有风格检查和`git` ,`GitHub` 相关，刚好弥补了我不知道该怎么练习的苦恼。 \n\n---\n\n这次的项目是一个叫[2048](https://play2048.co/) 的游戏。\n\n## Task 1: Empty Space Exists\n\n如果棋盘上有空格就返回true，否则放回false 。\n遍历就解决了：\n\n```java\npublic boolean emptySpaceExists() {  \n    for (int x = 0; x < board.size(); x++) {  \n        for (int y = 0; y < board.size(); y++) {  \n            if (board.tile(x, y) == null) { //空方块则返回null  \n                return true;  \n            }  \n        }  \n    }  \n    return false;  \n}\n```\n\n## Task 2: Max Tile Exists\n\n如果棋盘上的任何瓦片值为获胜值（MAX_PIECE = 2048），此方法应返回 true。\n同样是遍历，但是要注意获取瓦片值前要确保瓦片存在：\n\n```java\npublic boolean maxTileExists() {  \n    for (int x = 0; x < board.size(); x++) {  \n        for (int y = 0; y < board.size(); y++) {  \n            if ((board.tile(x, y) != null) && (board.tile(x, y).value() == MAX_PIECE)) {  \n                return true;  \n            }  \n        }  \n    }  \n    return false;  \n}\n```\n\n## Task 3: At Least One Move Exists\n\n如果存在任何有效的移动，这个方法应该返回 true。\n存在有效移动的两种方式：\n*  棋盘上至少有一个空格。\n* 棋盘上有两个相邻（它们之间可以有空格）且值相同的方块。\n\n第一种很好判断，直接丢给刚刚完成的`emptySpaceExists()` 就行，第二个条件我写的很丑...QAQ也是基于遍历，分成横向遍历和纵向遍历，它们接下来的步骤差不多：创建一个‘先行者’(`x1`,`y1`),比较基础瓦片和先行者的值。\n感觉这题有点像力扣的一道棋盘题，不过那个是判断达到最终结果的最少步数，用的多叉树解决的。\n\n```java\npublic boolean atLeastOneMoveExists() {  \n    if (emptySpaceExists()) {  \n        return true;  \n    }  \n    for (int x = 0; x < board.size(); x++) {  \n        for (int y = 0; y < board.size() - 1; y++) {  \n            for (int x1 = x + 1; x1 < board.size(); x1++) {  \n                if (board.tile(x, y) != null && board.tile(x1, y) != null) {  \n                    if (board.tile(x, y).value() == board.tile(x1, y).value()) {  \n                        return true;  \n                    } else {  \n                        break;  \n                    }  \n                }  \n            }  \n            for (int y1 = y + 1; y1 < board.size(); y1++) {  \n                if (board.tile(x, y) != null && board.tile(x, y1) != null) {  \n                    if (board.tile(x, y).value() == board.tile(x, y1).value()) {  \n                        return true;  \n                    } else {  \n                        break;  \n                    }  \n                }  \n  \n            }  \n        }  \n    }  \n    return false;  \n}\n```\n\n## ## Task 5: Move Tile Up (No Merging)\n\n将位置 `(x, y)` 的方块尽可能向上移动到其所在列的最上方。\n这里提示要用 `Board` 类的方法 `move(int x, int y, Tile tile)`，这个方法将给定的 `tile` 移动到棋盘上的 `(x, y)` 位置。而且要求`moveTileUpAsFarAsPossible` 解决方案应该恰好调用一次 `move` 方法。那就是先确定步数再用`move` 。\n这里有一个小坑，如果你查看`Board` 类方法 `move` ，会发现：\n```java\nif (tile1 == null) {  \n\t...\n} else {  \n    if (tile.value() != tile1.value()) {  \n    ...  \n    }  \n    next = Tile.create(2 * tile.value(), px, py);  \n    tile1.setNext(next);  \n}\n```\n也就是如果传入`move` 的瓦片如果值存在，就一定会更新值，无论它是否移动过。于是就要注意不能把顶层瓦片传入`move` :\n```java\npublic void moveTileUpAsFarAsPossible(int x, int y) {  \n    Tile currTile = board.tile(x, y);  \n    int myValue = currTile.value();  \n    int targetY = y;  \n    int step = 0;  \n    for (int i = targetY + 1; i < board.size(); i++) { //i = targetY + 1 从下一个方块开始比较  \n        if (board.tile(x, i) == null) {  \n            step += 1;  \n        } else {  \n            if (board.tile(x, i).value() == myValue && i != y) { //i != y 防止方块在顶层时加上自己的值  \n                if (!board.tile(x, i).wasMerged()) {  \n                    step += 1;  \n                }  \n            }  \n            break;  \n        }  \n    }  \n    if (step != 0) {  \n        board.move(x, targetY + step, currTile); // 顶层方块不移动但会检测合并，防止重复加上自己的值  \n    }  \n}\n```\n\n## Task 6: Merging Tiles\n\n瓦片可以通过空格向上移动。当瓦片遇到非空格时，如果那个格子里有另一个相同值的瓦片，并且那个瓦片还没有因为这个倾斜操作被合并过，那么这两个瓦片应该合并。\n我发现我在上面的题里已经解决这个问题了，于是跳过。\n\n## Task 7: Tilt Column\n\n这个方法应该将给定坐标的列向上倾斜，将列中的所有方块移动到正确的位置，并合并需要合并的方块。\n其实就是对`moveTileUpAsFarAsPossible`方法的抽象包装，把`moveTileUpAsFarAsPossible`方法用到给定`x`坐标的一列，注意要自上而下的调用：\n\n```java\npublic void tiltColumn(int x) {  \n    for (int y = board.size() - 1; y >= 0; y--) {  \n        if (board.tile(x, y) != null) {  \n            moveTileUpAsFarAsPossible(x, y);  \n        }  \n    }  \n}\n```\n\n## Task 8: Tilt Up\n\n这个方法应该将整个棋盘向上倾斜，将所有列中的所有方块移动到它们应有的位置，并合并需要合并的方块。\n其实就是对`tiltColumn`方法的抽象包装，在棋盘的每一列调用`tiltColumn`方法：\n```java\npublic void tilt(Side side) {  \n    for (int x = 0; x < board.size(); x++) {  \n        tiltColumn(x);  \n    }  \n}\n```\n\n## Task 9: Tilt in Four Directions\n\n既然我们已经实现了向上方向的倾斜功能，现在我们必须对其他三个方向做同样的事情。\n这里我的方法应该和官方期望的解法不同，我看官方的提示好像还要用到`dubug`，这里我看它给出\n1. “ `Side` 类是一种特殊的类，称为 `Enum` ”\n2. “枚举可以用类似 `Side s = Side.NORTH` 的语法赋值。请注意，我们不是使用 `new` 关键字，而是直接将 `Side` 值设置为四个值中的一个”\n3. “如果你对 Java 枚举感兴趣，请查看 https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html 。”\n这几个提示，结合起来就是：\n```java\npublic void tiltWrapper(Side side) {  \n    board.resetMerged();  \n    switch (side) {  \n        case NORTH:  \n            board.setViewingPerspective(Side.NORTH);  \n            tilt(side);  \n            break;  \n        case WEST:  \n            board.setViewingPerspective(Side.WEST);  \n            tilt(side);  \n            board.setViewingPerspective(Side.NORTH);  \n            break;  \n        case SOUTH:  \n            board.setViewingPerspective(Side.SOUTH);  \n            tilt(side);  \n            board.setViewingPerspective(Side.NORTH);  \n            break;  \n        case EAST:  \n            board.setViewingPerspective(Side.EAST);  \n            tilt(side);  \n            board.setViewingPerspective(Side.NORTH);  \n            break;  \n        default:  \n            break;  \n    }  \n}\n```\n\n## Task 10: Updating Score\n\n实现的分数更新。\n这个直接在`moveTileUpAsFarAsPossible`方法里插入一行就行了：\n\n```java\npublic void moveTileUpAsFarAsPossible(int x, int y) {  \n    Tile currTile = board.tile(x, y);  \n    int myValue = currTile.value();  \n    int targetY = y;  \n    int step = 0;  \n    for (int i = targetY + 1; i < board.size(); i++) { \n        if (board.tile(x, i) == null) {  \n            step += 1;  \n        } else {  \n            if (board.tile(x, i).value() == myValue && i != y) { \n                if (!board.tile(x, i).wasMerged()) {  \n                    this.score += board.tile(x, y).value() * 2;  // 插入这里\n                    step += 1; \n                }  \n            }  \n            break;  \n        }  \n    }  \n    if (step != 0) {  \n        board.move(x, targetY + step, currTile); \n}\n```","updated":"2025-06-15T04:31:30.312Z","path":"CS61B/proj0.html","comments":1,"layout":"page","_id":"cmbyperzt0005vcv32k505llr","content":"<p>这次的<code>proj</code> 整体挺简单的，让我惊讶的是相比CS61A，它会提示要用到的辅助方法，不需要像之前非得看完整个框架才能开始做，而且还有风格检查和<code>git</code> ,<code>GitHub</code> 相关，刚好弥补了我不知道该怎么练习的苦恼。 </p>\n<hr>\n<p>这次的项目是一个叫<a href=\"https://play2048.co/\">2048</a> 的游戏。</p>\n<h2 id=\"Task-1-Empty-Space-Exists\"><a href=\"#Task-1-Empty-Space-Exists\" class=\"headerlink\" title=\"Task 1: Empty Space Exists\"></a>Task 1: Empty Space Exists</h2><p>如果棋盘上有空格就返回true，否则放回false 。<br>遍历就解决了：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">emptySpaceExists</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; x &lt; board.size(); x++) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; y &lt; board.size(); y++) &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (board.tile(x, y) == <span class=\"literal\">null</span>) &#123; <span class=\"comment\">//空方块则返回null  </span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Task-2-Max-Tile-Exists\"><a href=\"#Task-2-Max-Tile-Exists\" class=\"headerlink\" title=\"Task 2: Max Tile Exists\"></a>Task 2: Max Tile Exists</h2><p>如果棋盘上的任何瓦片值为获胜值（MAX_PIECE &#x3D; 2048），此方法应返回 true。<br>同样是遍历，但是要注意获取瓦片值前要确保瓦片存在：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">maxTileExists</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; x &lt; board.size(); x++) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; y &lt; board.size(); y++) &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((board.tile(x, y) != <span class=\"literal\">null</span>) &amp;&amp; (board.tile(x, y).value() == MAX_PIECE)) &#123;  </span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Task-3-At-Least-One-Move-Exists\"><a href=\"#Task-3-At-Least-One-Move-Exists\" class=\"headerlink\" title=\"Task 3: At Least One Move Exists\"></a>Task 3: At Least One Move Exists</h2><p>如果存在任何有效的移动，这个方法应该返回 true。<br>存在有效移动的两种方式：</p>\n<ul>\n<li>棋盘上至少有一个空格。</li>\n<li>棋盘上有两个相邻（它们之间可以有空格）且值相同的方块。</li>\n</ul>\n<p>第一种很好判断，直接丢给刚刚完成的<code>emptySpaceExists()</code> 就行，第二个条件我写的很丑…QAQ也是基于遍历，分成横向遍历和纵向遍历，它们接下来的步骤差不多：创建一个‘先行者’(<code>x1</code>,<code>y1</code>),比较基础瓦片和先行者的值。<br>感觉这题有点像力扣的一道棋盘题，不过那个是判断达到最终结果的最少步数，用的多叉树解决的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">atLeastOneMoveExists</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (emptySpaceExists()) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; x &lt; board.size(); x++) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; y &lt; board.size() - <span class=\"number\">1</span>; y++) &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">x1</span> <span class=\"operator\">=</span> x + <span class=\"number\">1</span>; x1 &lt; board.size(); x1++) &#123;  </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (board.tile(x, y) != <span class=\"literal\">null</span> &amp;&amp; board.tile(x1, y) != <span class=\"literal\">null</span>) &#123;  </span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (board.tile(x, y).value() == board.tile(x1, y).value()) &#123;  </span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  </span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">                    &#125;  </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">y1</span> <span class=\"operator\">=</span> y + <span class=\"number\">1</span>; y1 &lt; board.size(); y1++) &#123;  </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (board.tile(x, y) != <span class=\"literal\">null</span> &amp;&amp; board.tile(x, y1) != <span class=\"literal\">null</span>) &#123;  </span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (board.tile(x, y).value() == board.tile(x, y1).value()) &#123;  </span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  </span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">                    &#125;  </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Task-5-Move-Tile-Up-No-Merging\"><a href=\"#Task-5-Move-Tile-Up-No-Merging\" class=\"headerlink\" title=\"## Task 5: Move Tile Up (No Merging)\"></a>## Task 5: Move Tile Up (No Merging)</h2><p>将位置 <code>(x, y)</code> 的方块尽可能向上移动到其所在列的最上方。<br>这里提示要用 <code>Board</code> 类的方法 <code>move(int x, int y, Tile tile)</code>，这个方法将给定的 <code>tile</code> 移动到棋盘上的 <code>(x, y)</code> 位置。而且要求<code>moveTileUpAsFarAsPossible</code> 解决方案应该恰好调用一次 <code>move</code> 方法。那就是先确定步数再用<code>move</code> 。<br>这里有一个小坑，如果你查看<code>Board</code> 类方法 <code>move</code> ，会发现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (tile1 == <span class=\"literal\">null</span>) &#123;  </span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tile.value() != tile1.value()) &#123;  </span><br><span class=\"line\">    ...  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    next = Tile.create(<span class=\"number\">2</span> * tile.value(), px, py);  </span><br><span class=\"line\">    tile1.setNext(next);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>也就是如果传入<code>move</code> 的瓦片如果值存在，就一定会更新值，无论它是否移动过。于是就要注意不能把顶层瓦片传入<code>move</code> :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">moveTileUpAsFarAsPossible</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> &#123;  </span><br><span class=\"line\">    <span class=\"type\">Tile</span> <span class=\"variable\">currTile</span> <span class=\"operator\">=</span> board.tile(x, y);  </span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">myValue</span> <span class=\"operator\">=</span> currTile.value();  </span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">targetY</span> <span class=\"operator\">=</span> y;  </span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">step</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> targetY + <span class=\"number\">1</span>; i &lt; board.size(); i++) &#123; <span class=\"comment\">//i = targetY + 1 从下一个方块开始比较  </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (board.tile(x, i) == <span class=\"literal\">null</span>) &#123;  </span><br><span class=\"line\">            step += <span class=\"number\">1</span>;  </span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (board.tile(x, i).value() == myValue &amp;&amp; i != y) &#123; <span class=\"comment\">//i != y 防止方块在顶层时加上自己的值  </span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!board.tile(x, i).wasMerged()) &#123;  </span><br><span class=\"line\">                    step += <span class=\"number\">1</span>;  </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">            <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (step != <span class=\"number\">0</span>) &#123;  </span><br><span class=\"line\">        board.move(x, targetY + step, currTile); <span class=\"comment\">// 顶层方块不移动但会检测合并，防止重复加上自己的值  </span></span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Task-6-Merging-Tiles\"><a href=\"#Task-6-Merging-Tiles\" class=\"headerlink\" title=\"Task 6: Merging Tiles\"></a>Task 6: Merging Tiles</h2><p>瓦片可以通过空格向上移动。当瓦片遇到非空格时，如果那个格子里有另一个相同值的瓦片，并且那个瓦片还没有因为这个倾斜操作被合并过，那么这两个瓦片应该合并。<br>我发现我在上面的题里已经解决这个问题了，于是跳过。</p>\n<h2 id=\"Task-7-Tilt-Column\"><a href=\"#Task-7-Tilt-Column\" class=\"headerlink\" title=\"Task 7: Tilt Column\"></a>Task 7: Tilt Column</h2><p>这个方法应该将给定坐标的列向上倾斜，将列中的所有方块移动到正确的位置，并合并需要合并的方块。<br>其实就是对<code>moveTileUpAsFarAsPossible</code>方法的抽象包装，把<code>moveTileUpAsFarAsPossible</code>方法用到给定<code>x</code>坐标的一列，注意要自上而下的调用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">tiltColumn</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> board.size() - <span class=\"number\">1</span>; y &gt;= <span class=\"number\">0</span>; y--) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (board.tile(x, y) != <span class=\"literal\">null</span>) &#123;  </span><br><span class=\"line\">            moveTileUpAsFarAsPossible(x, y);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Task-8-Tilt-Up\"><a href=\"#Task-8-Tilt-Up\" class=\"headerlink\" title=\"Task 8: Tilt Up\"></a>Task 8: Tilt Up</h2><p>这个方法应该将整个棋盘向上倾斜，将所有列中的所有方块移动到它们应有的位置，并合并需要合并的方块。<br>其实就是对<code>tiltColumn</code>方法的抽象包装，在棋盘的每一列调用<code>tiltColumn</code>方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">tilt</span><span class=\"params\">(Side side)</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; x &lt; board.size(); x++) &#123;  </span><br><span class=\"line\">        tiltColumn(x);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Task-9-Tilt-in-Four-Directions\"><a href=\"#Task-9-Tilt-in-Four-Directions\" class=\"headerlink\" title=\"Task 9: Tilt in Four Directions\"></a>Task 9: Tilt in Four Directions</h2><p>既然我们已经实现了向上方向的倾斜功能，现在我们必须对其他三个方向做同样的事情。<br>这里我的方法应该和官方期望的解法不同，我看官方的提示好像还要用到<code>dubug</code>，这里我看它给出</p>\n<ol>\n<li>“ <code>Side</code> 类是一种特殊的类，称为 <code>Enum</code> ”</li>\n<li>“枚举可以用类似 <code>Side s = Side.NORTH</code> 的语法赋值。请注意，我们不是使用 <code>new</code> 关键字，而是直接将 <code>Side</code> 值设置为四个值中的一个”</li>\n<li>“如果你对 Java 枚举感兴趣，请查看 <a href=\"https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html\">https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html</a> 。”<br>这几个提示，结合起来就是：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">tiltWrapper</span><span class=\"params\">(Side side)</span> &#123;  </span><br><span class=\"line\">    board.resetMerged();  </span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (side) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">case</span> NORTH:  </span><br><span class=\"line\">            board.setViewingPerspective(Side.NORTH);  </span><br><span class=\"line\">            tilt(side);  </span><br><span class=\"line\">            <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">case</span> WEST:  </span><br><span class=\"line\">            board.setViewingPerspective(Side.WEST);  </span><br><span class=\"line\">            tilt(side);  </span><br><span class=\"line\">            board.setViewingPerspective(Side.NORTH);  </span><br><span class=\"line\">            <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">case</span> SOUTH:  </span><br><span class=\"line\">            board.setViewingPerspective(Side.SOUTH);  </span><br><span class=\"line\">            tilt(side);  </span><br><span class=\"line\">            board.setViewingPerspective(Side.NORTH);  </span><br><span class=\"line\">            <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">case</span> EAST:  </span><br><span class=\"line\">            board.setViewingPerspective(Side.EAST);  </span><br><span class=\"line\">            tilt(side);  </span><br><span class=\"line\">            board.setViewingPerspective(Side.NORTH);  </span><br><span class=\"line\">            <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">default</span>:  </span><br><span class=\"line\">            <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"Task-10-Updating-Score\"><a href=\"#Task-10-Updating-Score\" class=\"headerlink\" title=\"Task 10: Updating Score\"></a>Task 10: Updating Score</h2><p>实现的分数更新。<br>这个直接在<code>moveTileUpAsFarAsPossible</code>方法里插入一行就行了：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">moveTileUpAsFarAsPossible</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> &#123;  </span><br><span class=\"line\">    <span class=\"type\">Tile</span> <span class=\"variable\">currTile</span> <span class=\"operator\">=</span> board.tile(x, y);  </span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">myValue</span> <span class=\"operator\">=</span> currTile.value();  </span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">targetY</span> <span class=\"operator\">=</span> y;  </span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">step</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> targetY + <span class=\"number\">1</span>; i &lt; board.size(); i++) &#123; </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (board.tile(x, i) == <span class=\"literal\">null</span>) &#123;  </span><br><span class=\"line\">            step += <span class=\"number\">1</span>;  </span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (board.tile(x, i).value() == myValue &amp;&amp; i != y) &#123; </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!board.tile(x, i).wasMerged()) &#123;  </span><br><span class=\"line\">                    <span class=\"built_in\">this</span>.score += board.tile(x, y).value() * <span class=\"number\">2</span>;  <span class=\"comment\">// 插入这里</span></span><br><span class=\"line\">                    step += <span class=\"number\">1</span>; </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">            <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (step != <span class=\"number\">0</span>) &#123;  </span><br><span class=\"line\">        board.move(x, targetY + step, currTile); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<p>这次的<code>proj</code> 整体挺简单的，让我惊讶的是相比CS61A，它会提示要用到的辅助方法，不需要像之前非得看完整个框架才能开始做，而且还有风格检查和<code>git</code> ,<code>GitHub</code> 相关，刚好弥补了我不知道该怎么练习的苦恼。 </p>\n<hr>\n<p>这次的项目是一个叫<a href=\"https://play2048.co/\">2048</a> 的游戏。</p>\n<h2 id=\"Task-1-Empty-Space-Exists\"><a href=\"#Task-1-Empty-Space-Exists\" class=\"headerlink\" title=\"Task 1: Empty Space Exists\"></a>Task 1: Empty Space Exists</h2><p>如果棋盘上有空格就返回true，否则放回false 。<br>遍历就解决了：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">emptySpaceExists</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; x &lt; board.size(); x++) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; y &lt; board.size(); y++) &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (board.tile(x, y) == <span class=\"literal\">null</span>) &#123; <span class=\"comment\">//空方块则返回null  </span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Task-2-Max-Tile-Exists\"><a href=\"#Task-2-Max-Tile-Exists\" class=\"headerlink\" title=\"Task 2: Max Tile Exists\"></a>Task 2: Max Tile Exists</h2><p>如果棋盘上的任何瓦片值为获胜值（MAX_PIECE &#x3D; 2048），此方法应返回 true。<br>同样是遍历，但是要注意获取瓦片值前要确保瓦片存在：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">maxTileExists</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; x &lt; board.size(); x++) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; y &lt; board.size(); y++) &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((board.tile(x, y) != <span class=\"literal\">null</span>) &amp;&amp; (board.tile(x, y).value() == MAX_PIECE)) &#123;  </span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Task-3-At-Least-One-Move-Exists\"><a href=\"#Task-3-At-Least-One-Move-Exists\" class=\"headerlink\" title=\"Task 3: At Least One Move Exists\"></a>Task 3: At Least One Move Exists</h2><p>如果存在任何有效的移动，这个方法应该返回 true。<br>存在有效移动的两种方式：</p>\n<ul>\n<li>棋盘上至少有一个空格。</li>\n<li>棋盘上有两个相邻（它们之间可以有空格）且值相同的方块。</li>\n</ul>\n<p>第一种很好判断，直接丢给刚刚完成的<code>emptySpaceExists()</code> 就行，第二个条件我写的很丑…QAQ也是基于遍历，分成横向遍历和纵向遍历，它们接下来的步骤差不多：创建一个‘先行者’(<code>x1</code>,<code>y1</code>),比较基础瓦片和先行者的值。<br>感觉这题有点像力扣的一道棋盘题，不过那个是判断达到最终结果的最少步数，用的多叉树解决的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">atLeastOneMoveExists</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (emptySpaceExists()) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; x &lt; board.size(); x++) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; y &lt; board.size() - <span class=\"number\">1</span>; y++) &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">x1</span> <span class=\"operator\">=</span> x + <span class=\"number\">1</span>; x1 &lt; board.size(); x1++) &#123;  </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (board.tile(x, y) != <span class=\"literal\">null</span> &amp;&amp; board.tile(x1, y) != <span class=\"literal\">null</span>) &#123;  </span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (board.tile(x, y).value() == board.tile(x1, y).value()) &#123;  </span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  </span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">                    &#125;  </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">y1</span> <span class=\"operator\">=</span> y + <span class=\"number\">1</span>; y1 &lt; board.size(); y1++) &#123;  </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (board.tile(x, y) != <span class=\"literal\">null</span> &amp;&amp; board.tile(x, y1) != <span class=\"literal\">null</span>) &#123;  </span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (board.tile(x, y).value() == board.tile(x, y1).value()) &#123;  </span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  </span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">                    &#125;  </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Task-5-Move-Tile-Up-No-Merging\"><a href=\"#Task-5-Move-Tile-Up-No-Merging\" class=\"headerlink\" title=\"## Task 5: Move Tile Up (No Merging)\"></a>## Task 5: Move Tile Up (No Merging)</h2><p>将位置 <code>(x, y)</code> 的方块尽可能向上移动到其所在列的最上方。<br>这里提示要用 <code>Board</code> 类的方法 <code>move(int x, int y, Tile tile)</code>，这个方法将给定的 <code>tile</code> 移动到棋盘上的 <code>(x, y)</code> 位置。而且要求<code>moveTileUpAsFarAsPossible</code> 解决方案应该恰好调用一次 <code>move</code> 方法。那就是先确定步数再用<code>move</code> 。<br>这里有一个小坑，如果你查看<code>Board</code> 类方法 <code>move</code> ，会发现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (tile1 == <span class=\"literal\">null</span>) &#123;  </span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tile.value() != tile1.value()) &#123;  </span><br><span class=\"line\">    ...  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    next = Tile.create(<span class=\"number\">2</span> * tile.value(), px, py);  </span><br><span class=\"line\">    tile1.setNext(next);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>也就是如果传入<code>move</code> 的瓦片如果值存在，就一定会更新值，无论它是否移动过。于是就要注意不能把顶层瓦片传入<code>move</code> :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">moveTileUpAsFarAsPossible</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> &#123;  </span><br><span class=\"line\">    <span class=\"type\">Tile</span> <span class=\"variable\">currTile</span> <span class=\"operator\">=</span> board.tile(x, y);  </span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">myValue</span> <span class=\"operator\">=</span> currTile.value();  </span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">targetY</span> <span class=\"operator\">=</span> y;  </span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">step</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> targetY + <span class=\"number\">1</span>; i &lt; board.size(); i++) &#123; <span class=\"comment\">//i = targetY + 1 从下一个方块开始比较  </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (board.tile(x, i) == <span class=\"literal\">null</span>) &#123;  </span><br><span class=\"line\">            step += <span class=\"number\">1</span>;  </span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (board.tile(x, i).value() == myValue &amp;&amp; i != y) &#123; <span class=\"comment\">//i != y 防止方块在顶层时加上自己的值  </span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!board.tile(x, i).wasMerged()) &#123;  </span><br><span class=\"line\">                    step += <span class=\"number\">1</span>;  </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">            <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (step != <span class=\"number\">0</span>) &#123;  </span><br><span class=\"line\">        board.move(x, targetY + step, currTile); <span class=\"comment\">// 顶层方块不移动但会检测合并，防止重复加上自己的值  </span></span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Task-6-Merging-Tiles\"><a href=\"#Task-6-Merging-Tiles\" class=\"headerlink\" title=\"Task 6: Merging Tiles\"></a>Task 6: Merging Tiles</h2><p>瓦片可以通过空格向上移动。当瓦片遇到非空格时，如果那个格子里有另一个相同值的瓦片，并且那个瓦片还没有因为这个倾斜操作被合并过，那么这两个瓦片应该合并。<br>我发现我在上面的题里已经解决这个问题了，于是跳过。</p>\n<h2 id=\"Task-7-Tilt-Column\"><a href=\"#Task-7-Tilt-Column\" class=\"headerlink\" title=\"Task 7: Tilt Column\"></a>Task 7: Tilt Column</h2><p>这个方法应该将给定坐标的列向上倾斜，将列中的所有方块移动到正确的位置，并合并需要合并的方块。<br>其实就是对<code>moveTileUpAsFarAsPossible</code>方法的抽象包装，把<code>moveTileUpAsFarAsPossible</code>方法用到给定<code>x</code>坐标的一列，注意要自上而下的调用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">tiltColumn</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> board.size() - <span class=\"number\">1</span>; y &gt;= <span class=\"number\">0</span>; y--) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (board.tile(x, y) != <span class=\"literal\">null</span>) &#123;  </span><br><span class=\"line\">            moveTileUpAsFarAsPossible(x, y);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Task-8-Tilt-Up\"><a href=\"#Task-8-Tilt-Up\" class=\"headerlink\" title=\"Task 8: Tilt Up\"></a>Task 8: Tilt Up</h2><p>这个方法应该将整个棋盘向上倾斜，将所有列中的所有方块移动到它们应有的位置，并合并需要合并的方块。<br>其实就是对<code>tiltColumn</code>方法的抽象包装，在棋盘的每一列调用<code>tiltColumn</code>方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">tilt</span><span class=\"params\">(Side side)</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; x &lt; board.size(); x++) &#123;  </span><br><span class=\"line\">        tiltColumn(x);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Task-9-Tilt-in-Four-Directions\"><a href=\"#Task-9-Tilt-in-Four-Directions\" class=\"headerlink\" title=\"Task 9: Tilt in Four Directions\"></a>Task 9: Tilt in Four Directions</h2><p>既然我们已经实现了向上方向的倾斜功能，现在我们必须对其他三个方向做同样的事情。<br>这里我的方法应该和官方期望的解法不同，我看官方的提示好像还要用到<code>dubug</code>，这里我看它给出</p>\n<ol>\n<li>“ <code>Side</code> 类是一种特殊的类，称为 <code>Enum</code> ”</li>\n<li>“枚举可以用类似 <code>Side s = Side.NORTH</code> 的语法赋值。请注意，我们不是使用 <code>new</code> 关键字，而是直接将 <code>Side</code> 值设置为四个值中的一个”</li>\n<li>“如果你对 Java 枚举感兴趣，请查看 <a href=\"https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html\">https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html</a> 。”<br>这几个提示，结合起来就是：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">tiltWrapper</span><span class=\"params\">(Side side)</span> &#123;  </span><br><span class=\"line\">    board.resetMerged();  </span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (side) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">case</span> NORTH:  </span><br><span class=\"line\">            board.setViewingPerspective(Side.NORTH);  </span><br><span class=\"line\">            tilt(side);  </span><br><span class=\"line\">            <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">case</span> WEST:  </span><br><span class=\"line\">            board.setViewingPerspective(Side.WEST);  </span><br><span class=\"line\">            tilt(side);  </span><br><span class=\"line\">            board.setViewingPerspective(Side.NORTH);  </span><br><span class=\"line\">            <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">case</span> SOUTH:  </span><br><span class=\"line\">            board.setViewingPerspective(Side.SOUTH);  </span><br><span class=\"line\">            tilt(side);  </span><br><span class=\"line\">            board.setViewingPerspective(Side.NORTH);  </span><br><span class=\"line\">            <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">case</span> EAST:  </span><br><span class=\"line\">            board.setViewingPerspective(Side.EAST);  </span><br><span class=\"line\">            tilt(side);  </span><br><span class=\"line\">            board.setViewingPerspective(Side.NORTH);  </span><br><span class=\"line\">            <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">default</span>:  </span><br><span class=\"line\">            <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"Task-10-Updating-Score\"><a href=\"#Task-10-Updating-Score\" class=\"headerlink\" title=\"Task 10: Updating Score\"></a>Task 10: Updating Score</h2><p>实现的分数更新。<br>这个直接在<code>moveTileUpAsFarAsPossible</code>方法里插入一行就行了：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">moveTileUpAsFarAsPossible</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> &#123;  </span><br><span class=\"line\">    <span class=\"type\">Tile</span> <span class=\"variable\">currTile</span> <span class=\"operator\">=</span> board.tile(x, y);  </span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">myValue</span> <span class=\"operator\">=</span> currTile.value();  </span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">targetY</span> <span class=\"operator\">=</span> y;  </span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">step</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> targetY + <span class=\"number\">1</span>; i &lt; board.size(); i++) &#123; </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (board.tile(x, i) == <span class=\"literal\">null</span>) &#123;  </span><br><span class=\"line\">            step += <span class=\"number\">1</span>;  </span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (board.tile(x, i).value() == myValue &amp;&amp; i != y) &#123; </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!board.tile(x, i).wasMerged()) &#123;  </span><br><span class=\"line\">                    <span class=\"built_in\">this</span>.score += board.tile(x, y).value() * <span class=\"number\">2</span>;  <span class=\"comment\">// 插入这里</span></span><br><span class=\"line\">                    step += <span class=\"number\">1</span>; </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">            <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (step != <span class=\"number\">0</span>) &#123;  </span><br><span class=\"line\">        board.move(x, targetY + step, currTile); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"CS61B 目录","date":"2025-06-13T16:00:00.000Z","categories":["CS61B"],"_content":"# CS61B 学习笔记汇总\n- [proj0](proj0)\n- [Leb03](Leb03)","source":"CS61B/index.md","raw":"---\ntitle: CS61B 目录\ndate: 2025-06-14\ncategories:\n  - CS61B\n---\n# CS61B 学习笔记汇总\n- [proj0](proj0)\n- [Leb03](Leb03)","updated":"2025-06-15T15:28:19.492Z","path":"CS61B/index.html","comments":1,"layout":"page","_id":"cmbyperzu0006vcv34f388wae","content":"<h1 id=\"CS61B-学习笔记汇总\"><a href=\"#CS61B-学习笔记汇总\" class=\"headerlink\" title=\"CS61B 学习笔记汇总\"></a>CS61B 学习笔记汇总</h1><ul>\n<li><a href=\"proj0\">proj0</a></li>\n<li><a href=\"Leb03\">Leb03</a></li>\n</ul>\n","excerpt":"","more":"<h1 id=\"CS61B-学习笔记汇总\"><a href=\"#CS61B-学习笔记汇总\" class=\"headerlink\" title=\"CS61B 学习笔记汇总\"></a>CS61B 学习笔记汇总</h1><ul>\n<li><a href=\"proj0\">proj0</a></li>\n<li><a href=\"Leb03\">Leb03</a></li>\n</ul>\n"},{"title":"Debug 板块的第一篇博客","date":"2025-06-13T16:00:00.000Z","categories":["Debug","Blog"],"_content":"\n# 这里是文章正文\n这是放在 `Debug/Blog` 里的 Hexo 文章。","source":"Debug/Blog/Blog.md","raw":"---\ntitle: Debug 板块的第一篇博客\ndate: 2025-06-14\ncategories:\n  - Debug\n  - Blog\n---\n\n# 这里是文章正文\n这是放在 `Debug/Blog` 里的 Hexo 文章。","updated":"2025-06-14T10:14:11.212Z","path":"Debug/Blog/Blog.html","comments":1,"layout":"page","_id":"cmbyperzu0007vcv3aoud104d","content":"<h1 id=\"这里是文章正文\"><a href=\"#这里是文章正文\" class=\"headerlink\" title=\"这里是文章正文\"></a>这里是文章正文</h1><p>这是放在 <code>Debug/Blog</code> 里的 Hexo 文章。</p>\n","excerpt":"","more":"<h1 id=\"这里是文章正文\"><a href=\"#这里是文章正文\" class=\"headerlink\" title=\"这里是文章正文\"></a>这里是文章正文</h1><p>这是放在 <code>Debug/Blog</code> 里的 Hexo 文章。</p>\n"}],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2025-06-14T05:17:22.475Z","updated":"2025-06-13T11:47:41.237Z","comments":1,"layout":"post","photos":[],"_id":"cmbyperzq0001vcv35ym3cyxn","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"博客流程","date":"2025-06-14T10:37:39.000Z","_content":"","source":"_posts/source/Debug/博客流程.md","raw":"---\ntitle: 博客流程\ndate: 2025-06-14 18:37:39\ntags:\n---\n","slug":"source/Debug/博客流程","published":1,"updated":"2025-06-14T10:37:39.475Z","comments":1,"layout":"post","photos":[],"_id":"cmbyperzs0003vcv3ceq8dupd","content":"","excerpt":"","more":""}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}