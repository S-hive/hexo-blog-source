{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"source/images/Pastedimage20250615154243.png","path":"images/Pastedimage20250615154243.png","modified":0,"renderable":0},{"_id":"source/images/Pastedimage20250615170843.png","path":"images/Pastedimage20250615170843.png","modified":0,"renderable":0},{"_id":"source/images/Pastedimage20250615172020.png","path":"images/Pastedimage20250615172020.png","modified":0,"renderable":0},{"_id":"source/images/Pastedimage20250615172423.png","path":"images/Pastedimage20250615172423.png","modified":0,"renderable":0},{"_id":"source/images/Pastedimage20250615173326.png","path":"images/Pastedimage20250615173326.png","modified":0,"renderable":0},{"_id":"source/images/Pastedimage20250615175444.png","path":"images/Pastedimage20250615175444.png","modified":0,"renderable":0},{"_id":"source/images/Pastedimage20250615175558.png","path":"images/Pastedimage20250615175558.png","modified":0,"renderable":0},{"_id":"source/images/Pastedimage20250615175613.png","path":"images/Pastedimage20250615175613.png","modified":0,"renderable":0},{"_id":"source/images/Pastedimage20250615184116.png","path":"images/Pastedimage20250615184116.png","modified":0,"renderable":0},{"_id":"source/images/Pastedimage20250615195658.png","path":"images/Pastedimage20250615195658.png","modified":0,"renderable":0},{"_id":"source/images/Pastedimage20250615211618.png","path":"images/Pastedimage20250615211618.png","modified":0,"renderable":0},{"_id":"source/images/Pastedimage20250615213033.png","path":"images/Pastedimage20250615213033.png","modified":0,"renderable":0},{"_id":"source/images/Pastedimage20250615213603.png","path":"images/Pastedimage20250615213603.png","modified":0,"renderable":0},{"_id":"source/images/Pastedimage20250615223111.png","path":"images/Pastedimage20250615223111.png","modified":0,"renderable":0},{"_id":"source/images/Pastedimage20250615223116.png","path":"images/Pastedimage20250615223116.png","modified":0,"renderable":0},{"_id":"source/images/Pastedimage20250615223118.png","path":"images/Pastedimage20250615223118.png","modified":0,"renderable":0},{"_id":"source/images/Pastedimage20250615223202.png","path":"images/Pastedimage20250615223202.png","modified":0,"renderable":0},{"_id":"source/images/Pastedimage20250615223538.png","path":"images/Pastedimage20250615223538.png","modified":0,"renderable":0},{"_id":"source/images/Pastedimage20250615230527.png","path":"images/Pastedimage20250615230527.png","modified":0,"renderable":0},{"_id":"source/images/Pastedimage20250616212809.png","path":"images/Pastedimage20250616212809.png","modified":0,"renderable":0},{"_id":"source/images/Pastedimage20250616212818.png","path":"images/Pastedimage20250616212818.png","modified":0,"renderable":0},{"_id":"source/images/Pastedimage20250616213051.png","path":"images/Pastedimage20250616213051.png","modified":0,"renderable":0},{"_id":"source/images/Pastedimage20250616213103.png","path":"images/Pastedimage20250616213103.png","modified":0,"renderable":0},{"_id":"source/images/Pastedimage20250616213139.png","path":"images/Pastedimage20250616213139.png","modified":0,"renderable":0},{"_id":"source/images/Pastedimage20250617210149.png","path":"images/Pastedimage20250617210149.png","modified":0,"renderable":0},{"_id":"source/images/Pastedimage20250618163248.png","path":"images/Pastedimage20250618163248.png","modified":0,"renderable":0},{"_id":"source/images/Pastedimage20250619132929.png","path":"images/Pastedimage20250619132929.png","modified":0,"renderable":0},{"_id":"source/images/Pastedimage20250619142148.png","path":"images/Pastedimage20250619142148.png","modified":0,"renderable":0},{"_id":"node_modules/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","path":"css/noscript.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","path":"js/comments.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/config.js","path":"js/config.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","path":"js/pjax.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","path":"js/schedule.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/sidebar.js","path":"js/sidebar.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/addtoany.js","path":"js/third-party/addtoany.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/matomo.js","path":"js/third-party/analytics/matomo.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/wavedrom.js","path":"js/third-party/tags/wavedrom.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/.obsidian/app.json","hash":"0f285b534318ec6420714e235f8d6cb3541d8907","modified":1752678030684},{"_id":"source/.obsidian/workspace.json","hash":"08a071aad472636458d962db4df6e1cd1d5bb80d","modified":1752678085092},{"_id":"source/.obsidian/core-plugins.json","hash":"2a08642e2455d9db3afbaebcfb27b2884a1fb59e","modified":1752678030194},{"_id":"source/.obsidian/appearance.json","hash":"bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f","modified":1752678030685},{"_id":"source/Debug/index.md","hash":"dbd53ffd186fe934a9f0bb2f1ee0331468b900c1","modified":1749907900935},{"_id":"source/Debug/博客流程.md","hash":"0998f0c222f0def40676988dc40d2c211ed7833b","modified":1750320991129},{"_id":"source/CS61B/Leb03.md","hash":"3b426b5a3058290c4be33f542b82ba56e12ab6dd","modified":1751083136375},{"_id":"source/CS61B/index.md","hash":"e1b2e13a2501b83153eee8c071af26af41b32d7a","modified":1751081885582},{"_id":"source/CS61B/proj0.md","hash":"e9ef1f43a6876895c63e464a7442587d434cd540","modified":1750072204451},{"_id":"source/CS61B/proj1a.md","hash":"04d7f7d21e1ea65e837700acc1121a4b1e83f6ab","modified":1751031117306},{"_id":"source/CS61B/proj1b.md","hash":"437874dca763a3c208012859f1fbd80d51a4baaa","modified":1751082950039},{"_id":"source/Serve/index.md","hash":"b536d089add1fbc9f78e8fb9944385374081e438","modified":1752662492995},{"_id":"source/Serve/为什么称Tomcat为服务器？.md","hash":"807e75a096ce49810ce270080ad9e86a38a61e2e","modified":1752662398988},{"_id":"source/Serve/SSH概念.md","hash":"7b67f10311be894e5d2608f044c375f6b3ddbebb","modified":1752649714167},{"_id":"source/images/Pastedimage20250615170843.png","hash":"7b7a71e247393af48dfedcd03852fa2fc3f21fb9","modified":1749978523781},{"_id":"source/images/Pastedimage20250615154243.png","hash":"d1072ea1435886d68292a14ec6f91a69df24ff36","modified":1749973363641},{"_id":"source/images/Pastedimage20250615172020.png","hash":"287e42bc4a16f00698823170ea61249949139221","modified":1749979220438},{"_id":"source/images/Pastedimage20250615172423.png","hash":"bab763c6f5d11648e13f3184407fa3f63d72f51d","modified":1749979463732},{"_id":"source/images/Pastedimage20250615173326.png","hash":"7c25360c9cc092acca14fb194d89fbdcd28b69c1","modified":1749980006027},{"_id":"source/images/Pastedimage20250615175444.png","hash":"5c570b1c5cd756410875ab019745a4bd933ed1d2","modified":1749981284055},{"_id":"source/images/Pastedimage20250615184116.png","hash":"4916dc0d99713069f7a71c0d6224aab013ab6343","modified":1749984076894},{"_id":"source/images/Pastedimage20250615175558.png","hash":"10e11dec577257727fac0d3e84a05fa5314198cb","modified":1749981358413},{"_id":"source/images/Pastedimage20250615175613.png","hash":"dcb37094635acdc153b7731a4f8a8499535ad6ef","modified":1749981373173},{"_id":"source/images/Pastedimage20250615195658.png","hash":"af0157dd38d013c05880bcc1f6c57bea7721f1f0","modified":1749988618638},{"_id":"source/images/Pastedimage20250615213033.png","hash":"ac1ab4a24982b1544349e8514dccd44920b0d941","modified":1749994233464},{"_id":"source/images/Pastedimage20250615211618.png","hash":"fc83ae0142b34f6254ee391f7251fce3fbb44d7b","modified":1749993378522},{"_id":"source/images/Pastedimage20250615213603.png","hash":"4d66767a0eaa866f42f89d3c2f9692907144a8f1","modified":1749994563826},{"_id":"source/images/Pastedimage20250615223111.png","hash":"513dcbc39dd434cabf019a6eea78256fb8167af6","modified":1749997871086},{"_id":"source/images/Pastedimage20250615223116.png","hash":"54aa531107a7fa450cbec6949f9440bd703bcd83","modified":1749997876144},{"_id":"source/images/Pastedimage20250615223118.png","hash":"54aa531107a7fa450cbec6949f9440bd703bcd83","modified":1749997878694},{"_id":"source/images/Pastedimage20250615223538.png","hash":"cf39b6b5f9d2a7d1a9b5013283bcf2589f1b0c0e","modified":1749998138600},{"_id":"source/images/Pastedimage20250616212809.png","hash":"ce297fb24fa844351d8f7f953a1c4d716b6ea124","modified":1750080489331},{"_id":"source/images/Pastedimage20250615230527.png","hash":"21e9faf20a6c1c3f186356e53690fe89b2caabde","modified":1749999927572},{"_id":"source/images/Pastedimage20250616212818.png","hash":"843be5e635391f83ef21161dd40432991df331fd","modified":1750080498218},{"_id":"source/images/Pastedimage20250616213051.png","hash":"86a44f8a29b555e4aa4e1c5cbc3ef057f4a31b93","modified":1750080651779},{"_id":"source/images/Pastedimage20250616213139.png","hash":"1ceb8afbccde54cbdafbcbef09e7a1ccc0e703fa","modified":1750080699198},{"_id":"source/images/Pastedimage20250616213103.png","hash":"50332bf8167328dee4b9ef8107d27587ae22e563","modified":1750080663465},{"_id":"source/images/Pastedimage20250617210149.png","hash":"ebadca84d0e85954244fb3aeb155e0d3c6025679","modified":1750165309324},{"_id":"source/数据结构/index.md","hash":"eb98ced70fe18ee63bc4634735d3c5cb3d59ef96","modified":1752677851865},{"_id":"source/images/Pastedimage20250618163248.png","hash":"1d524f9fac00d74f709f2029c71ea006f6b520aa","modified":1750235568596},{"_id":"source/images/Pastedimage20250619132929.png","hash":"a26246ae54a655cf5090c5387fc6c5bc278cbb96","modified":1750310969593},{"_id":"source/数据结构/数组（顺序存储）基本原理.md","hash":"ac1367c9cb3deff25e5c6da9f7ef7f55ea0df575","modified":1752678065003},{"_id":"source/CS61B/.obsidian/app.json","hash":"009a3952701c890112985208d91a34d936f858dc","modified":1750065122976},{"_id":"source/数据结构/动态数组代码实现.md","hash":"a24f7e7f1e7c5242655ee5fa12c559ec45b539ce","modified":1752678080275},{"_id":"source/CS61B/.obsidian/core-plugins.json","hash":"2a08642e2455d9db3afbaebcfb27b2884a1fb59e","modified":1750065122486},{"_id":"source/CS61B/.obsidian/appearance.json","hash":"bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f","modified":1750065122977},{"_id":"source/CS61B/.obsidian/workspace.json","hash":"5173122b5ce0909f4a2358763b906ba0bc058cdf","modified":1750065123005},{"_id":"source/_posts/Debug/index.md","hash":"c0e1b105164016f5c694a4003599c6c627a4fed5","modified":1752569241580},{"_id":"source/_posts/CS61B/index.md","hash":"8d2d58c609341aba4ca7e6381f463966636661e4","modified":1752570194285},{"_id":"source/_posts/Serve/index.md","hash":"fe269855c17e57271afa56c37e4f8a91168570db","modified":1752662497095},{"_id":"source/_posts/数据结构/index.md","hash":"ccc0638820bdf0115036f42c33c2696eb4118072","modified":1752677739825},{"_id":"source/images/Pastedimage20250619142148.png","hash":"79202edd3b9c2696f249faf4d63fb8e2d7a9110d","modified":1750314108648},{"_id":"source/images/Pastedimage20250615223202.png","hash":"edd8c4c4a706a8ef8a05a91c461f53a4f7114a4b","modified":1749997922580},{"_id":"node_modules/hexo-theme-next/README.md","hash":"da88b205b702bcf222548466ddcac1883c9e347e","modified":1749893986931},{"_id":"node_modules/hexo-theme-next/LICENSE.md","hash":"68fc9a03d50fd4b5ea97092b05967d1819dea2c4","modified":1749893986706},{"_id":"node_modules/hexo-theme-next/_vendors.yml","hash":"49743c5be6dfff1fb78db0c8042f1b72b596201b","modified":1749893987214},{"_id":"node_modules/hexo-theme-next/package.json","hash":"ac9f70b4cb0c0385fc89f51acfb4a8507cdba992","modified":1749893986564},{"_id":"node_modules/hexo-theme-next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1749893986573},{"_id":"node_modules/hexo-theme-next/_config.yml","hash":"5d78b4d02279d87a45724d1616c01b738c084adc","modified":1749893987212},{"_id":"node_modules/hexo-theme-next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":1749893986576},{"_id":"node_modules/hexo-theme-next/docs/LICENSE.txt","hash":"f5b14f791b7cfa1d16da981d929152e088a5d1b8","modified":1749893987204},{"_id":"node_modules/hexo-theme-next/languages/bn.yml","hash":"564bed75da6e05b11dce6164508f97a15e2fb6c2","modified":1749893987220},{"_id":"node_modules/hexo-theme-next/languages/ar.yml","hash":"7d0f39e8684284a04bb9808521c87fecda8bd131","modified":1749893987218},{"_id":"node_modules/hexo-theme-next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":1749893986929},{"_id":"node_modules/hexo-theme-next/languages/de.yml","hash":"79b37df731c29665dee6cd7c90d278e1edfb6e24","modified":1749893987222},{"_id":"node_modules/hexo-theme-next/languages/es.yml","hash":"dffc63ef42e1266b88e0acf08994fd17a9908d53","modified":1749893987589},{"_id":"node_modules/hexo-theme-next/languages/en.yml","hash":"ba0fd79a2b1d8db01a034180556061745965ff05","modified":1749893987225},{"_id":"node_modules/hexo-theme-next/languages/fa.yml","hash":"f3ffc444599f4ac92d62e9ed00a1490ebc277d70","modified":1749893987592},{"_id":"node_modules/hexo-theme-next/languages/eo.yml","hash":"e34bb33ae827bf2f0727088599a73bc64bdad1b0","modified":1749893987227},{"_id":"node_modules/hexo-theme-next/languages/fr.yml","hash":"8ac44e58f71a38b7697a2f7f98a6971ed818cb5b","modified":1749893987595},{"_id":"node_modules/hexo-theme-next/languages/ja.yml","hash":"543222bfc516aab6c33e8534f807972ecb8943a9","modified":1749893987601},{"_id":"node_modules/hexo-theme-next/languages/id.yml","hash":"929df147f4f17d638b07de5fe52ca13e2549ab1c","modified":1749893987596},{"_id":"node_modules/hexo-theme-next/languages/nl.yml","hash":"3cb3687696635ec71b4ca40c5fc43b56acc8843e","modified":1749893987604},{"_id":"node_modules/hexo-theme-next/languages/ko.yml","hash":"d345a303310c8a5f4836c3683f3580f861ebd1b4","modified":1749893987603},{"_id":"node_modules/hexo-theme-next/languages/pt.yml","hash":"b62faaa767a45a613dd042b5f1903675eb5a8cf9","modified":1749893987608},{"_id":"node_modules/hexo-theme-next/languages/it.yml","hash":"16d716ecfd748def2f6486ef5a82d0ab7ceb4890","modified":1749893987598},{"_id":"node_modules/hexo-theme-next/languages/pt-BR.yml","hash":"76b8576ce228d540a16b1f0af5af2cce20923194","modified":1749893987606},{"_id":"node_modules/hexo-theme-next/languages/th.yml","hash":"6829e998b39f8f143e20b276bb1f62d95a29de58","modified":1749893987613},{"_id":"node_modules/hexo-theme-next/languages/tr.yml","hash":"a57e4ed089b893a95f5e1ecff17ce625165f4d46","modified":1749893987616},{"_id":"node_modules/hexo-theme-next/languages/tk.yml","hash":"511726054873f6f8d7ce0d2e803f6731de0ddbe7","modified":1749893987615},{"_id":"node_modules/hexo-theme-next/languages/si.yml","hash":"2d712eedf3f60d04d36c3108cf5a12e2a52e875c","modified":1749893987612},{"_id":"node_modules/hexo-theme-next/languages/uk.yml","hash":"ff537047b4b4c3ca9a7b64fa7f428a9942751eeb","modified":1749893987617},{"_id":"node_modules/hexo-theme-next/layout/_layout.njk","hash":"b17d44bd7379c23241053a0b7fbd38c9c43cc239","modified":1749893986933},{"_id":"node_modules/hexo-theme-next/languages/vi.yml","hash":"7ebcba5e1128784195e4681dffc9d34c4e873fec","modified":1749893987619},{"_id":"node_modules/hexo-theme-next/languages/zh-HK.yml","hash":"8eb6a9f231ce1bfa54cc54418ccf14f01dcc9a31","modified":1749893987622},{"_id":"node_modules/hexo-theme-next/languages/zh-TW.yml","hash":"5c0f00cdac3f4727b880dd223f622a535736fa8e","modified":1749893987623},{"_id":"node_modules/hexo-theme-next/languages/zh-CN.yml","hash":"741d7efe0262c9cdc2c648014b55599665d90f6b","modified":1749893987620},{"_id":"node_modules/hexo-theme-next/layout/category.njk","hash":"c68b7343d0f8145010f93351908cc36ef6212ec1","modified":1749893986945},{"_id":"node_modules/hexo-theme-next/layout/index.njk","hash":"dd63e488ae8cc144335a5958acedf6a16edd7a92","modified":1749893986976},{"_id":"node_modules/hexo-theme-next/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":1749893986939},{"_id":"node_modules/hexo-theme-next/layout/post.njk","hash":"0bfce9f133f501a9a4837257e3b862b3bbca15be","modified":1749893987014},{"_id":"node_modules/hexo-theme-next/docs/ru/README.md","hash":"294b6aebb8b766b5e167bcf816f485a73e0c7fa5","modified":1749893986924},{"_id":"node_modules/hexo-theme-next/layout/tag.njk","hash":"9e16ba20c28a7f2c6bc75aa427f48122301a30aa","modified":1749893987022},{"_id":"node_modules/hexo-theme-next/layout/page.njk","hash":"af6d7570621be760536c216a56d74e40a1cceae2","modified":1749893986995},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/README.md","hash":"bd9109d20dbc7feef3279386106a2efda3c98525","modified":1749893986927},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CONTRIBUTING.md","hash":"a089f7a8368ab0b7d7b9b7ec0ac3767a453435df","modified":1749893986705},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"12a6631617695504d5cf2a94b57d87bd331bef6f","modified":1749893986579},{"_id":"node_modules/hexo-theme-next/languages/ru.yml","hash":"c6d8de0ff7d8148d09993257cfd3b7aca755696c","modified":1749893987610},{"_id":"node_modules/hexo-theme-next/layout/_macro/post.njk","hash":"ec9bb9c5ede773c02f0c8d8475245a8a437a2b71","modified":1749893987013},{"_id":"node_modules/hexo-theme-next/layout/_macro/post-collapse.njk","hash":"313637fe3569f98fd926e8cd0fcc75d098eb6e6e","modified":1749893987000},{"_id":"node_modules/hexo-theme-next/layout/_partials/comments.njk","hash":"d0c470b0f6690aa217e9ada848c5e2e73fb27c6f","modified":1749893986951},{"_id":"node_modules/hexo-theme-next/layout/_partials/footer.njk","hash":"fbf8232cacf0df87e88e74860be66c9f86018302","modified":1749893986957},{"_id":"node_modules/hexo-theme-next/layout/_partials/pagination.njk","hash":"bc719473ed5948ab6859449d60b8d36cfc1542b4","modified":1749893986996},{"_id":"node_modules/hexo-theme-next/layout/_third-party/addtoany.njk","hash":"ef64c6bfb8540cd874701236b9be47db2496e98e","modified":1749893986935},{"_id":"node_modules/hexo-theme-next/layout/_partials/languages.njk","hash":"e43f22198cccb5f6e306b1ce0d28d12a4fb891f8","modified":1749893986980},{"_id":"node_modules/hexo-theme-next/layout/_partials/widgets.njk","hash":"d83fb59f02c5e6630a7770401a05c02f6f07358b","modified":1749893987031},{"_id":"node_modules/hexo-theme-next/layout/_third-party/fancybox.njk","hash":"844559f46e2ff1c8be234d5763703106e2072a7b","modified":1749893986954},{"_id":"node_modules/hexo-theme-next/layout/_macro/sidebar.njk","hash":"547c62ab14d9e05d2d9116db9048a677fbe1fb6d","modified":1749893987018},{"_id":"node_modules/hexo-theme-next/layout/_third-party/index.njk","hash":"dfd7cdd6ba89f8c3deabc27726c7a350cadafd11","modified":1749893986972},{"_id":"node_modules/hexo-theme-next/layout/_third-party/quicklink.njk","hash":"0efed71ed530447718c4ea5bbd5fc8695b0b0d5f","modified":1749893987015},{"_id":"node_modules/hexo-theme-next/layout/_third-party/pace.njk","hash":"d7ad5714079f7f65446f880baf14722435ca9061","modified":1749893986992},{"_id":"node_modules/hexo-theme-next/source/css/_colors.styl","hash":"ebfe0954e3931431f46f913abe08d0212e06e7c2","modified":1749893987036},{"_id":"node_modules/hexo-theme-next/source/css/_mixins.styl","hash":"e21309d4165ebb6645084eed8dd749846ae981f1","modified":1749893987050},{"_id":"node_modules/hexo-theme-next/source/css/main.styl","hash":"921a58577f411cf4eb5cfd66db0a241f8f88578c","modified":1749893987097},{"_id":"node_modules/hexo-theme-next/layout/_scripts/index.njk","hash":"2a7dfffebad19b67dc9e3b2a6b2986d0630ef930","modified":1749893986969},{"_id":"node_modules/hexo-theme-next/layout/_scripts/vendors.njk","hash":"7261e24287984853c8ef08cda8bbc80cacf9bd6f","modified":1749893987028},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1749893986296},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1749893987032},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","hash":"dadc81256afb127b77eac6763d5ee0ec9c77f0a3","modified":1749893987113},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","hash":"a38c6d92b368bfc42c72ad799ad03f3274957065","modified":1749893987196},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1749893987199},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1749893987034},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1749893987033},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","hash":"9ba4cceafd12c6d5ba8a6b986a046ef8319a7811","modified":1749893986314},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1749893986335},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1749893986333},{"_id":"node_modules/hexo-theme-next/source/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1749893986341},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","hash":"6f751f5c9499a39d7c5e1d323db3260342dd9431","modified":1749893986411},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1749893986440},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","hash":"523bbaeda463e82ab0be428cc0005717038ec63e","modified":1749893986417},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","hash":"694b271819aab37ce473b15db9e6aded971d82e5","modified":1749893986435},{"_id":"node_modules/hexo-theme-next/scripts/helpers/engine.js","hash":"83235f2879567eb8686431c9554a4b99f14ab665","modified":1749893986354},{"_id":"node_modules/hexo-theme-next/scripts/helpers/navigation.js","hash":"78107021101553c3d23e89290f7530b60cf4aa86","modified":1749893986415},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","hash":"345a8158e6c34e19245a07c778f5699c8673f1b1","modified":1749893986451},{"_id":"node_modules/hexo-theme-next/source/js/sidebar.js","hash":"2ee359ae48273b01ba1e0768704524e08702c7eb","modified":1749893986441},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-config.js","hash":"4bc2eb87f3fa26981652f517d1ab3f81de2ab89d","modified":1749893986419},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-url.js","hash":"6281d47c1de98eb38f3aa0f6df29bbb19d412173","modified":1749893986422},{"_id":"node_modules/hexo-theme-next/scripts/events/index.js","hash":"bd9ea82376cd87df611ea3ae077875c7c595a3df","modified":1749893986375},{"_id":"node_modules/hexo-theme-next/scripts/helpers/font.js","hash":"4c84d45daac86396edf656d2a8abe6e7583491ea","modified":1749893986363},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-vendors.js","hash":"af3946a595f997eb43d9af87428e4898c9acbc82","modified":1749893986425},{"_id":"node_modules/hexo-theme-next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":1749893986346},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-paginator.js","hash":"e86c764b546e4fbb87970cabc4135a56f9ef9fe1","modified":1749893986420},{"_id":"node_modules/hexo-theme-next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":1749893986316},{"_id":"node_modules/hexo-theme-next/scripts/filters/post.js","hash":"fdc8a0af90035e89c3fcb754a0eb189b8951a2bc","modified":1749893986437},{"_id":"node_modules/hexo-theme-next/scripts/filters/locals.js","hash":"9eb5310664759931287dd28ea39165dfb67f12ed","modified":1749893986398},{"_id":"node_modules/hexo-theme-next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":1749893986322},{"_id":"node_modules/hexo-theme-next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":1749893986320},{"_id":"node_modules/hexo-theme-next/scripts/tags/group-pictures.js","hash":"f57f7e09eb6220f681fa8385082b0960502ce5c4","modified":1749893986369},{"_id":"node_modules/hexo-theme-next/scripts/filters/minify.js","hash":"2063aaa1db448ebcf7b0fdbbc54d3991a368bbd3","modified":1749893986408},{"_id":"node_modules/hexo-theme-next/scripts/tags/mermaid.js","hash":"7d7bbc4a9970bd4c5449bc71b94364a8ec61e5d2","modified":1749893986403},{"_id":"node_modules/hexo-theme-next/scripts/tags/index.js","hash":"1f6aba7820f1fb58b61969485148db21846e1aa9","modified":1749893986377},{"_id":"node_modules/hexo-theme-next/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":1749893986427},{"_id":"node_modules/hexo-theme-next/scripts/tags/link-grid.js","hash":"18a483c2d5afd701f6080ffdddf2d1321370336c","modified":1749893986391},{"_id":"node_modules/hexo-theme-next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":1749893986387},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head-unique.njk","hash":"93c1d103d9d16581c944c51f3d0638f57c80ee41","modified":1749893986962},{"_id":"node_modules/hexo-theme-next/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":1749893986431},{"_id":"node_modules/hexo-theme-next/scripts/tags/tabs.js","hash":"0eabe51da40b4b13e16419c8fe02452d9a4fef73","modified":1749893986442},{"_id":"node_modules/hexo-theme-next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":1749893986561},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head.njk","hash":"5388b157bba4a40b9312f4a45c6678974ccf0837","modified":1749893986964},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/index.njk","hash":"650de421a8ce4cf685428ffbe0087ff84cbd1356","modified":1749893986966},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/brand.njk","hash":"dd9c4c03e99dfde0dfb8edefcb2c933f2f560efc","modified":1749893986941},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu.njk","hash":"ee6fc2f111572d3eeab0a2fecbb2d6b3e37ab26b","modified":1749893986988},{"_id":"node_modules/hexo-theme-next/scripts/tags/wavedrom.js","hash":"b44dfeeb58b41945d469141787f3dbce4b117d08","modified":1749893986562},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/sub-menu.njk","hash":"06480d8ec5f0b87eafd47f082f07968d7282dd5c","modified":1749893987021},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/breadcrumb.njk","hash":"89825e75cc45e9709fa6ba89883669eedaff6f46","modified":1749893986941},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu-item.njk","hash":"41a8b0cc16f60fa085cb719d07216d86b6bc4bf8","modified":1749893986986},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":1749893986994},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":1749893986944},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":1749893987024},{"_id":"node_modules/hexo-theme-next/layout/_partials/sidebar/site-overview.njk","hash":"bc5708e38b6070dff0cab6bf9480971017ce4dda","modified":1749893987020},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/schedule.njk","hash":"0f4bc8e257da60f77c0c1738607b2bde55810684","modified":1749893987016},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/index.njk","hash":"6ad43135bd3aecf933ffdd750763e27ade36f97c","modified":1749893986967},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.njk","hash":"6215309aee028dcb734452beec448c5afb6c63fc","modified":1749893986940},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/cloudflare.njk","hash":"a5b8297c2c383124dd6a56e256ecc0c0dcf489be","modified":1749893986949},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/google-analytics.njk","hash":"d89066ff53879693f023e540d59c86137172c529","modified":1749893986959},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/growingio.njk","hash":"8afaa772c390bd9d53a5cff9645ac3168334eb98","modified":1749893986960},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/index.njk","hash":"f900306497b133e8b098bd9f4b96b93d1d96c185","modified":1749893986971},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/microsoft-clarity.njk","hash":"1efeeda00db08a3c033798228dd0092ee532cc36","modified":1749893986991},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/matomo.njk","hash":"4e89648a8ec8194c5823064cbca39c938a799006","modified":1749893986985},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/chatra.njk","hash":"d7263fca16d0278ccf1f6aa1c6df6902a6344a09","modified":1749893986948},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/umami.njk","hash":"3343750682fbd8535e50f8129be3003ad26015b4","modified":1749893987026},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/plausible.njk","hash":"ef9f2bb7110507f1c4336800af9157d5fa9765bd","modified":1749893986998},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqus.njk","hash":"9375b19a89b7fa9474e558d085af5448d4c5c50c","modified":1749893986952},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/changyan.njk","hash":"d1c950f8fbdf85e7a3eae5463767a89e858e8220","modified":1749893986946},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqusjs.njk","hash":"0749cb6902baecdfd01f779a2a2513f6d2f6a823","modified":1749893986953},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/livere.njk","hash":"3b13b09fba84ec6000886890a6710736a2b8fafe","modified":1749893986982},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/isso.njk","hash":"64cc3bdaf644fd32c0d0a247f29f5b6904da9af3","modified":1749893986977},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/tidio.njk","hash":"02aab857c27fc103216029be991688b12a73a525","modified":1749893987025},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/gitalk.njk","hash":"b63b7e2ede0d3e66e732fa1a06bda9b19e1e85d4","modified":1749893986958},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/utterances.njk","hash":"5a94032bc3512a10ad4328fc19ec07b819a1d687","modified":1749893987027},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/index.njk","hash":"abf37fc55aa86702118e8fdf5bf2d389dd589aa0","modified":1749893986974},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/katex.njk","hash":"1ebf658690468ea197bdd0416eb7cfa4bd0b083a","modified":1749893986979},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"55c2468b2b7f035881d494085527d6554f37b556","modified":1749893986943},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/firestore.njk","hash":"d32ebe94560fa95824478ebbff531bffc47b194d","modified":1749893986955},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-copyright.njk","hash":"bfff923526d6800218f08dba6ce0bbf5c17755fd","modified":1749893987002},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/index.njk","hash":"568ddf7955d11d93fb5e842b403a7ac8b1b7fdb1","modified":1749893986975},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-followme.njk","hash":"c1e33b4889f75acc490af3c8bde0ec56c518ff41","modified":1749893987004},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/lean-analytics.njk","hash":"2446e748cdc102c78492216319ac02148db7daf6","modified":1749893986981},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/mathjax.njk","hash":"3677017fd4572b158311f5f5d870590ab25184e0","modified":1749893986984},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-related.njk","hash":"e0986db00a0201dd3c60570f964829c84ba5bc68","modified":1749893987008},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-meta.njk","hash":"9fa47e4fb342811da590ee4adc91cf81118c0a39","modified":1749893987007},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/mermaid.njk","hash":"099e031f52fb8e47b3af5b2684737efc9e643ee7","modified":1749893986990},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-reward.njk","hash":"e8b8a7c41e9ec612d0c0c73419529d55d1c16256","modified":1749893987010},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-share.njk","hash":"16696990e4ce65fc8db18c4635082a5d5d06ff07","modified":1749893987011},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":1749893987075},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/wavedrom.njk","hash":"02202bf563fb5eedde2ccad4d6c5b9109d30a703","modified":1749893987029},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/pdf.njk","hash":"2c81984cc4f5123103460442f6e046f5b6c97127","modified":1749893986997},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Muse.styl","hash":"879b49f693af0c04c285b2dd0c9cccaf77347b7c","modified":1749893987107},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Mist.styl","hash":"2c800eaab6c613e5d091be2111aaa786641aa0c2","modified":1749893987104},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/localsearch.njk","hash":"e45ea3542cdc9ed7ec8447b5e6f35df4c5e82758","modified":1749893986983},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"20d5c6aa136bbb55e03906d98ee90ad3fbaa80a7","modified":1749893987117},{"_id":"node_modules/hexo-theme-next/source/js/third-party/addtoany.js","hash":"5276c8f78ee562a8965216dc67d762e59cb4a9f2","modified":1749893986302},{"_id":"node_modules/hexo-theme-next/source/css/_variables/base.styl","hash":"b724edca546373d5eaf9b3602868f971c9094cf6","modified":1749893987063},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/algolia-search.njk","hash":"41b28f05e6233fb37700f7151f55868be10a0965","modified":1749893986937},{"_id":"node_modules/hexo-theme-next/source/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1749893986429},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","hash":"819f382c561fe5ec23c67cc5fabd63dd1cc22dc1","modified":1749893986357},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1749893986439},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/highlight.js","hash":"8a8f752260be5b8098393f9879b61ffe904465e8","modified":1749893986373},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/config.js","hash":"00af4f5f9a79eaccf051f9e372d233d65d44c8a5","modified":1749893986340},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/utils.js","hash":"5942feb3f31ed3480bf50b0f5a4a305b5bdca3d6","modified":1749893986446},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/vendors.js","hash":"e2b4a9d6b08155735ec336eedc506763d5671821","modified":1749893986560},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/changyan.js","hash":"5798cfc8f63665031dd3e01debed051628cec319","modified":1749893986326},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqus.js","hash":"7f71d6b271ba65ff333d5682e7575711d368c0d2","modified":1749893986347},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/common.js","hash":"19a402a225c31edffc50f202a14e0d582d3db23e","modified":1749893986336},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/injects.js","hash":"d987709267a1bc6e5014411e9983d7c49c102c16","modified":1749893986380},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/isso.js","hash":"ff8b5b5145220a17d0ecd9508ba9bd2d3b2da47d","modified":1749893986382},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/gitalk.js","hash":"7bb7dafdd7f6bca8464b54e17e552ce7f1714195","modified":1749893986364},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqusjs.js","hash":"a600a98e7436edeb31e291abca359885567df3c9","modified":1749893986350},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/navigation.js","hash":"dd3562686d95a50375e6fd32e717ccb0d99c1e3d","modified":1749893986413},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"b8445c828d78a38e2de50bdc86b3bff66285ea0f","modified":1749893987058},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/livere.js","hash":"5a07d8bb52bc1d51a624ca8db54be144566c306b","modified":1749893986392},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/utterances.js","hash":"d3bded697bc32dace689d2a6dfb6eb7514169d15","modified":1749893986453},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":1749893986344},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/reading-progress.styl","hash":"90a86045a33c1bae49fc2f6fa1e1b53170c7f77b","modified":1749893987141},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/mobile.styl","hash":"48b2dfc04df6409c6e0736ccc11462ad97d349b1","modified":1749893987105},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"f316ba87f8d3299677fbf8345e1e993c35210e2e","modified":1749893987061},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/index.styl","hash":"8e34df131830d4fa3725e4590a672ba1cf1903e5","modified":1749893987084},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":1749893987068},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/index.styl","hash":"2298e521253b3bf376a2412271bc2a7d305051f3","modified":1749893987077},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":1749893987070},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1749893987087},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":1749893987182},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1749893987112},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"dafc6d23c80d6fe3e55a7711e94210d2479b629a","modified":1749893987039},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/pagination.styl","hash":"f4228c759db4a650c8d38745c2edd1dc83c45687","modified":1749893987115},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/toggles.styl","hash":"69c66aab4651e2e7ae9e65f08600144970648c60","modified":1749893987189},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Gemini/index.styl","hash":"bcbf498d8d3ecea84324f0a59b7f95f389a52b8d","modified":1749893987089},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"f23c53e32d140091b819be2603d1afbbb5d66933","modified":1749893987046},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_layout.styl","hash":"fa4fd8f76464e214fb7318f325b13c2b62f4b478","modified":1749893987044},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":1749893987089},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"6569a6640f79d247a8235b3914772c0e2f99ead2","modified":1749893987045},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_posts-expand.styl","hash":"485d23ccb42c0d0c8ead7ea8930dd3e06d79a285","modified":1749893987051},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_header.styl","hash":"3fbfab591f280e2e7f3b0265901c93bc4bd137ed","modified":1749893987041},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1749893987054},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"e31f6adbb22a451f07e4661cff9a2f12e4e99a36","modified":1749893987048},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sidebar.styl","hash":"c29a827e82d2820ed8977c92994da73721200fac","modified":1749893987052},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1749893987090},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_header.styl","hash":"dc03835e42d82eaf2633cf3b627990ad3e1f5967","modified":1749893987043},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"a92c4eb16bdb7806079467eb022ccf193bb0f794","modified":1749893987046},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"a03f16ffc7dfdbdc6053f9fd68d77257ba0c559e","modified":1749893987049},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"778ed2ad5643b93970c95626b325defeb586733f","modified":1749893987055},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e792a6233e1d4dbc5fd2f10ae97b7a790b82568b","modified":1749893987053},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":1749893987092},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1749893986329},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","hash":"1e826dea3f684c0515f362dc1352447a1f0eae71","modified":1749893986351},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","hash":"da361917d65e5dca8362f8cdeb6c8cc0e8316cec","modified":1749893986349},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1749893986384},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1749893986366},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1749893986394},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","hash":"def07bcc7c17d8a0caad177fb1dd2f3a5e5b3536","modified":1749893986367},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1749893986312},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1749893986454},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1749893986371},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1749893986401},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1749893986444},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1749893986331},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1749893986399},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1749893986386},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","hash":"1905978ef587bf08fe088ce4693a4c08db07cfbb","modified":1749893986308},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","hash":"835cbf54c49ef1327f47df70ff2636ad36b6f57d","modified":1749893986390},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","hash":"6e0682bb42170d61b13b786295f45f9c785f8b73","modified":1749893986361},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","hash":"3968d972f47b79acc6c3fe44028bad77c9c5aab7","modified":1749893986396},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","hash":"df01075f52302873f7de36050b5408c8d1afb452","modified":1749893986406},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1749893986432},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/wavedrom.js","hash":"40dcd10df6edf124088c329346e0cc0bdac74ef1","modified":1749893986563},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":1749893987068},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"51a97a33879289904cb523ddc2d88b5b0c60fa72","modified":1749893987069},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":1749893987147},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1749893987078},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-body.styl","hash":"93f014809d6442da23f8b7d729f7375e2badba7d","modified":1749893987118},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":1749893987187},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"809bab3414b1eb1ae44444eb821126868f764414","modified":1749893987119},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-footer.styl","hash":"0f4830e19026317ed850f3be2979556e38f97f4a","modified":1749893987124},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-followme.styl","hash":"026cd5735fd2a75bb60b7bf8bd09139583d602b9","modified":1749893987121},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-header.styl","hash":"424de4f64b12c521e8c6bfbc711d7961490ab36e","modified":1749893987133},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":1749893987126},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":1749893987135},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"b47fb36915962309553ff7fb1782341585ed2b76","modified":1749893987137},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"ebfba158a0a4af3d1dabcacbc58986664de52140","modified":1749893987140},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/gitalk.styl","hash":"8f094c4ac17e2ab45569b12d157747f9c7333c12","modified":1749893987075},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/disqusjs.styl","hash":"877a537d5b95beb048142e4fdee6f17e6ef9c7bb","modified":1749893987073},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/math.styl","hash":"9d995eb4871a6c273d9d51558676a1fdabf69e72","modified":1749893987099},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/index.styl","hash":"54d12e2c5d9982f7b9e5b23be5133954a8514e9d","modified":1749893987081},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/index.styl","hash":"098d4bd034e986fcf7e443eac4fc2193935461b7","modified":1749893987079},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/utterances.styl","hash":"56d90ae0559caa55b75f3c300ff2711f9ed65fc4","modified":1749893987191},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/footer/index.styl","hash":"4e967702cf4c637132346bc74ec8854426f1a68c","modified":1749893987082},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/index.styl","hash":"21acb11e397526132605eef23bde7b307aa1eab5","modified":1749893987085},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/related-posts.styl","hash":"b05908f04ef95f2d91e6eba89b12411c378d050f","modified":1749893987143},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"0847400d8579b0a2dd1bf662c78954c10adf2680","modified":1749893987152},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/search.styl","hash":"1874e2b5d86cdeeaf2ccdc2669146a2b0c72d9db","modified":1749893987150},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":1749893987153},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"46eece42510c2c89bb9209afb0262ad76a4b0b36","modified":1749893987160},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"24752d145c6fb8f5344dca9c7b9640839c02e009","modified":1749893987165},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-copyright.styl","hash":"56805b77fe236fac19e19c716a49363bcf986311","modified":1749893987163},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"5c31f3a86e4e6fbf2f8419415620461fa8a63c56","modified":1749893987071},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"ce36bf1602233298e0351b4babc592315529eb26","modified":1749893987157},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"c2e354a565c8c1b32bd0ceacc972b17982758b67","modified":1749893987167},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"741566d6ac5f852b5c8dee6a8996b65e48e7c97f","modified":1749893987170},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/index.styl","hash":"9b0217e1caecd91e05572c7e8e52d32016ca312f","modified":1749893987086},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/site-state.styl","hash":"26dd0adfcb1db6df29c6090c8d7e9b5a43583fb0","modified":1749893987178},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"d6418fd2bbfba7b73ddf11ec62db9637fdf5d8af","modified":1749893987065},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":1749893987077},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/fold.styl","hash":"42a0b65491ad85438596b3fe0b7f23973e4cef34","modified":1749893987074},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/index.styl","hash":"22cd37bd5df9972d5074710896aba4424ad5161c","modified":1749893987087},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":1749893987093},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"49329a7144f3413d1c832e52a1f4954171ef11e1","modified":1749893987094},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"48d35dba575a7c9e8845b16652e76b7d4a4646de","modified":1749893987101},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/tabs.styl","hash":"c3be8b0738f693e750486bb71769c3dbbec174cc","modified":1749893987184},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b6654a1d7cf82577d8263faffee8af3ad4a5c0e8","modified":1749893987116},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/index.styl","hash":"6e0d0796ef7fbbb62ffdfb448753a850de82c74f","modified":1749893987083},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/note.styl","hash":"8213015d9cae45d2c9945f8aba9d8db39c734efc","modified":1749893987114},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/wavedrom.styl","hash":"af113411ad9cca7674177be36af8dd399680834d","modified":1749893987193},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/bookmark.styl","hash":"e74f4bb47a101b014ee2a1783c87f3b87323f9a0","modified":1749893987067},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/github-banner.styl","hash":"38c64c2d04e46848382bfa246a0e9c508294767b","modified":1749893987076},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/menu.styl","hash":"a3dd3edea9c01b66b28a8367185269b9dcc3bdee","modified":1749893987100},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-nav.styl","hash":"bf3ad8b4268f763a1e26377681644887694bc009","modified":1749893987176},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-meta.styl","hash":"a851e9d5aefcd027c95eeb323860b6da70f202d1","modified":1749893987172},{"_id":"public/Debug/index.html","hash":"7f7f903cebb4afeff1f1522bda8a8daf717db324","modified":1752678093370},{"_id":"public/CS61B/index.html","hash":"3dbac372e4abaca2a9296782ceae7f0492906d5e","modified":1752678093370},{"_id":"public/CS61B/proj1a.html","hash":"e03b31c8294bd41cf0b9828757e2950aa5c2645f","modified":1752678093370},{"_id":"public/Debug/博客流程.html","hash":"8818f86b23838462f0d98be16ac3eff893e4f318","modified":1752678093370},{"_id":"public/CS61B/Leb03.html","hash":"27202dfc1342aa5305231893ccf766da81f9f70a","modified":1752678093370},{"_id":"public/CS61B/proj1b.html","hash":"e45c0ffefdbadba771a47681833c59a4a639a8ca","modified":1752678093370},{"_id":"public/CS61B/proj0.html","hash":"9fcc82d480e00aa652448bde2c383fc4d2b0ea3a","modified":1752678093370},{"_id":"public/Serve/为什么称Tomcat为服务器？.html","hash":"59b4a1820a4b60dcd5c4140272d8061927815417","modified":1752678093370},{"_id":"public/Serve/index.html","hash":"8c6b6a54e53c0562f2a4895743d9f650f1265aac","modified":1752678093370},{"_id":"public/数据结构/index.html","hash":"cc292385dd521e4fd2f1445875178dad1329c972","modified":1752678093370},{"_id":"public/数据结构/动态数组代码实现.html","hash":"0996e2ac6ce20d8a088d47d9dfe29025e4bae7e3","modified":1752678093370},{"_id":"public/数据结构/数组（顺序存储）基本原理.html","hash":"1ec3ef324563bc688f9ad6705368f7a6afc1573b","modified":1752678093370},{"_id":"public/Serve/SSH概念.html","hash":"0aad8a451dac7c018bd5da3ca9d1fae7ed8c0fc2","modified":1752678093370},{"_id":"public/2025/07/16/数据结构/index/index.html","hash":"6c5443fe9d3606d435ca8d36f8b58858253371b2","modified":1752678093370},{"_id":"public/2025/07/15/Serve/index/index.html","hash":"f1ec95e9cb826ef143c4532ad066ea1f5c2c4d04","modified":1752678093370},{"_id":"public/2025/06/14/Debug/index/index.html","hash":"1387fb3ca6345c498168742251c6a8ec79258cc3","modified":1752678093370},{"_id":"public/archives/index.html","hash":"339dadcbb0d4a499036f97d932a32241c02fc471","modified":1752678093370},{"_id":"public/2025/06/14/CS61B/index/index.html","hash":"742c097ef388c398e8a377227a93d8f63152a7a1","modified":1752678093370},{"_id":"public/archives/2025/index.html","hash":"574ef02bbce23c61b60bd072ed6905fff20355d5","modified":1752678093370},{"_id":"public/archives/2025/07/index.html","hash":"9db878433857f006da3731152b8990eccaab0105","modified":1752678093370},{"_id":"public/archives/2025/06/index.html","hash":"c673968270993053f7b354f2eeec16e7b8b7a880","modified":1752678093370},{"_id":"public/tags/Serve/index.html","hash":"dda5058a3d07d3fde013e0b3b4c2c4584ccc2454","modified":1752678093370},{"_id":"public/categories/Debug/index.html","hash":"8662fe1540eff351ce45366aeff7a069f466a1fe","modified":1752678093370},{"_id":"public/categories/CS61B/index.html","hash":"efb7048dec7c0624cc2e79e2f30dc53cc3416a8c","modified":1752678093370},{"_id":"public/categories/数据结构/index.html","hash":"92c9faee5626fc2e8978fb6837d14ee66f74d019","modified":1752678093370},{"_id":"public/index.html","hash":"6efcffc1be59e3ba95304a442d5273e3b9640ba1","modified":1752678093370},{"_id":"public/images/Pastedimage20250615172423.png","hash":"bab763c6f5d11648e13f3184407fa3f63d72f51d","modified":1752678093370},{"_id":"public/images/Pastedimage20250615154243.png","hash":"d1072ea1435886d68292a14ec6f91a69df24ff36","modified":1752678093370},{"_id":"public/images/Pastedimage20250615172020.png","hash":"287e42bc4a16f00698823170ea61249949139221","modified":1752678093370},{"_id":"public/images/Pastedimage20250615173326.png","hash":"7c25360c9cc092acca14fb194d89fbdcd28b69c1","modified":1752678093370},{"_id":"public/images/Pastedimage20250615170843.png","hash":"7b7a71e247393af48dfedcd03852fa2fc3f21fb9","modified":1752678093370},{"_id":"public/images/Pastedimage20250615184116.png","hash":"4916dc0d99713069f7a71c0d6224aab013ab6343","modified":1752678093370},{"_id":"public/images/Pastedimage20250615175444.png","hash":"5c570b1c5cd756410875ab019745a4bd933ed1d2","modified":1752678093370},{"_id":"public/images/Pastedimage20250615175613.png","hash":"dcb37094635acdc153b7731a4f8a8499535ad6ef","modified":1752678093370},{"_id":"public/images/Pastedimage20250615175558.png","hash":"10e11dec577257727fac0d3e84a05fa5314198cb","modified":1752678093370},{"_id":"public/images/Pastedimage20250615211618.png","hash":"fc83ae0142b34f6254ee391f7251fce3fbb44d7b","modified":1752678093370},{"_id":"public/images/Pastedimage20250615213033.png","hash":"ac1ab4a24982b1544349e8514dccd44920b0d941","modified":1752678093370},{"_id":"public/images/Pastedimage20250615223111.png","hash":"513dcbc39dd434cabf019a6eea78256fb8167af6","modified":1752678093370},{"_id":"public/images/Pastedimage20250615223116.png","hash":"54aa531107a7fa450cbec6949f9440bd703bcd83","modified":1752678093370},{"_id":"public/images/Pastedimage20250615223118.png","hash":"54aa531107a7fa450cbec6949f9440bd703bcd83","modified":1752678093370},{"_id":"public/images/Pastedimage20250615213603.png","hash":"4d66767a0eaa866f42f89d3c2f9692907144a8f1","modified":1752678093370},{"_id":"public/images/Pastedimage20250615195658.png","hash":"af0157dd38d013c05880bcc1f6c57bea7721f1f0","modified":1752678093370},{"_id":"public/images/Pastedimage20250615230527.png","hash":"21e9faf20a6c1c3f186356e53690fe89b2caabde","modified":1752678093370},{"_id":"public/images/Pastedimage20250615223538.png","hash":"cf39b6b5f9d2a7d1a9b5013283bcf2589f1b0c0e","modified":1752678093370},{"_id":"public/images/Pastedimage20250616212809.png","hash":"ce297fb24fa844351d8f7f953a1c4d716b6ea124","modified":1752678093370},{"_id":"public/images/Pastedimage20250616212818.png","hash":"843be5e635391f83ef21161dd40432991df331fd","modified":1752678093370},{"_id":"public/images/Pastedimage20250616213103.png","hash":"50332bf8167328dee4b9ef8107d27587ae22e563","modified":1752678093370},{"_id":"public/images/Pastedimage20250616213051.png","hash":"86a44f8a29b555e4aa4e1c5cbc3ef057f4a31b93","modified":1752678093370},{"_id":"public/images/Pastedimage20250618163248.png","hash":"1d524f9fac00d74f709f2029c71ea006f6b520aa","modified":1752678093370},{"_id":"public/images/Pastedimage20250617210149.png","hash":"ebadca84d0e85954244fb3aeb155e0d3c6025679","modified":1752678093370},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1752678093370},{"_id":"public/images/Pastedimage20250619132929.png","hash":"a26246ae54a655cf5090c5387fc6c5bc278cbb96","modified":1752678093370},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1752678093370},{"_id":"public/images/Pastedimage20250616213139.png","hash":"1ceb8afbccde54cbdafbcbef09e7a1ccc0e703fa","modified":1752678093370},{"_id":"public/images/Pastedimage20250619142148.png","hash":"79202edd3b9c2696f249faf4d63fb8e2d7a9110d","modified":1752678093370},{"_id":"public/images/logo-algolia-nebula-blue-full.svg","hash":"a38c6d92b368bfc42c72ad799ad03f3274957065","modified":1752678093370},{"_id":"public/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1752678093370},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1752678093370},{"_id":"public/images/logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1752678093370},{"_id":"public/css/main.css","hash":"f1966adcc6783d68d872bede2c6e8cedcd8b292b","modified":1752678093370},{"_id":"public/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1752678093370},{"_id":"public/css/noscript.css","hash":"4cd5301e478e0e0d4b176740ec314087ec5cb707","modified":1752678093370},{"_id":"public/js/bookmark.js","hash":"9ba4cceafd12c6d5ba8a6b986a046ef8319a7811","modified":1752678093370},{"_id":"public/images/Pastedimage20250615223202.png","hash":"edd8c4c4a706a8ef8a05a91c461f53a4f7114a4b","modified":1752678093370},{"_id":"public/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1752678093370},{"_id":"public/js/pjax.js","hash":"694b271819aab37ce473b15db9e6aded971d82e5","modified":1752678093370},{"_id":"public/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1752678093370},{"_id":"public/js/third-party/addtoany.js","hash":"5276c8f78ee562a8965216dc67d762e59cb4a9f2","modified":1752678093370},{"_id":"public/js/motion.js","hash":"6f751f5c9499a39d7c5e1d323db3260342dd9431","modified":1752678093370},{"_id":"public/js/third-party/fancybox.js","hash":"819f382c561fe5ec23c67cc5fabd63dd1cc22dc1","modified":1752678093370},{"_id":"public/js/next-boot.js","hash":"523bbaeda463e82ab0be428cc0005717038ec63e","modified":1752678093370},{"_id":"public/js/sidebar.js","hash":"2ee359ae48273b01ba1e0768704524e08702c7eb","modified":1752678093370},{"_id":"public/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1752678093370},{"_id":"public/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1752678093370},{"_id":"public/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1752678093370},{"_id":"public/js/third-party/comments/disqus.js","hash":"da361917d65e5dca8362f8cdeb6c8cc0e8316cec","modified":1752678093370},{"_id":"public/js/third-party/comments/disqusjs.js","hash":"1e826dea3f684c0515f362dc1352447a1f0eae71","modified":1752678093370},{"_id":"public/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1752678093370},{"_id":"public/js/utils.js","hash":"345a8158e6c34e19245a07c778f5699c8673f1b1","modified":1752678093370},{"_id":"public/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1752678093370},{"_id":"public/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1752678093370},{"_id":"public/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1752678093370},{"_id":"public/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1752678093370},{"_id":"public/js/third-party/analytics/google-analytics.js","hash":"def07bcc7c17d8a0caad177fb1dd2f3a5e5b3536","modified":1752678093370},{"_id":"public/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1752678093370},{"_id":"public/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1752678093370},{"_id":"public/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1752678093370},{"_id":"public/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1752678093370},{"_id":"public/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1752678093370},{"_id":"public/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1752678093370},{"_id":"public/js/third-party/search/algolia-search.js","hash":"1905978ef587bf08fe088ce4693a4c08db07cfbb","modified":1752678093370},{"_id":"public/js/third-party/search/local-search.js","hash":"3968d972f47b79acc6c3fe44028bad77c9c5aab7","modified":1752678093370},{"_id":"public/js/third-party/statistics/firestore.js","hash":"6e0682bb42170d61b13b786295f45f9c785f8b73","modified":1752678093370},{"_id":"public/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1752678093370},{"_id":"public/js/third-party/statistics/lean-analytics.js","hash":"835cbf54c49ef1327f47df70ff2636ad36b6f57d","modified":1752678093370},{"_id":"public/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1752678093370},{"_id":"public/js/third-party/tags/wavedrom.js","hash":"40dcd10df6edf124088c329346e0cc0bdac74ef1","modified":1752678093370},{"_id":"public/js/third-party/tags/mermaid.js","hash":"df01075f52302873f7de36050b5408c8d1afb452","modified":1752678093370}],"Category":[{"name":"Debug","_id":"cmd63a8cq0004k8v3992z3ifd"},{"name":"CS61B","_id":"cmd63a8ct000bk8v36egp9b56"},{"name":"数据结构","_id":"cmd63a8cu000fk8v37kh0d4dd"}],"Data":[],"Page":[{"title":"Debug 目录","date":"2025-06-13T16:00:00.000Z","categories":["Debug"],"_content":"- [博客流程](博客流程)","source":"Debug/index.md","raw":"---\ntitle: Debug 目录\ndate: 2025-06-14\ncategories:\n  - Debug\n---\n- [博客流程](博客流程)","updated":"2025-06-14T13:31:40.935Z","path":"Debug/index.html","comments":1,"layout":"page","_id":"cmd63a8cm0000k8v311r9el61","content":"<ul>\n<li><a href=\"%E5%8D%9A%E5%AE%A2%E6%B5%81%E7%A8%8B\">博客流程</a></li>\n</ul>\n","excerpt":"","more":"<ul>\n<li><a href=\"%E5%8D%9A%E5%AE%A2%E6%B5%81%E7%A8%8B\">博客流程</a></li>\n</ul>\n"},{"title":"CS61B 目录","date":"2025-06-13T16:00:00.000Z","categories":["CS61B"],"_content":"# CS61B 学习笔记汇总\n- [proj0](proj0)\n- [proj1a](proj1a)\n- [Leb03](Leb03)\n- [proj1b](proj1b)","source":"CS61B/index.md","raw":"---\ntitle: CS61B 目录\ndate: 2025-06-14\ncategories:\n  - CS61B\n---\n# CS61B 学习笔记汇总\n- [proj0](proj0)\n- [proj1a](proj1a)\n- [Leb03](Leb03)\n- [proj1b](proj1b)","updated":"2025-06-28T03:38:05.582Z","path":"CS61B/index.html","comments":1,"layout":"page","_id":"cmd63a8cp0002k8v31nhud86a","content":"<h1 id=\"CS61B-学习笔记汇总\"><a href=\"#CS61B-学习笔记汇总\" class=\"headerlink\" title=\"CS61B 学习笔记汇总\"></a>CS61B 学习笔记汇总</h1><ul>\n<li><a href=\"proj0\">proj0</a></li>\n<li><a href=\"proj1a\">proj1a</a></li>\n<li><a href=\"Leb03\">Leb03</a></li>\n<li><a href=\"proj1b\">proj1b</a></li>\n</ul>\n","excerpt":"","more":"<h1 id=\"CS61B-学习笔记汇总\"><a href=\"#CS61B-学习笔记汇总\" class=\"headerlink\" title=\"CS61B 学习笔记汇总\"></a>CS61B 学习笔记汇总</h1><ul>\n<li><a href=\"proj0\">proj0</a></li>\n<li><a href=\"proj1a\">proj1a</a></li>\n<li><a href=\"Leb03\">Leb03</a></li>\n<li><a href=\"proj1b\">proj1b</a></li>\n</ul>\n"},{"title":"博客流程","date":"2025-06-13T16:00:00.000Z","cssclasses":["Debug"],"_content":"以下是在 Hexo 博客中，于 `CS61B` 下添加 `proj1` 文件、修改、上传并提交到 GitHub 的完整流程，清晰说明各步骤的目录和操作：\n\n### 一、添加 `proj1` 文件（本地 Hexo 项目中）\n\n#### 1. 确定文件存放目录\n\nHexo 博客中，文章等内容一般放在 `source` 目录。要在 `CS61B` 下添加 `proj1` 文件，需进入 Hexo 项目根目录（假设为 `D:\\study\\Blog` ）的 `source\\CS61B` 目录。\n\n你可以通过文件资源管理器手动进入该目录，也可在终端（PowerShell 或 CMD）中执行：\n```bash\n# 进入 Hexo 根目录\ncd D:\\study\\Blog  \n# 进入 source\\CS61B 目录\ncd source\\CS61B  \n```\n\n#### 2. 创建 `proj1` 文件\n\n- **方式 1：手动创建**  \n    在 `source\\CS61B` 目录下，新建 Markdown 文件（如 `proj1.md` ），直接编辑内容，写入 `proj1` 相关笔记、代码等。\n    \n- **方式 2：Hexo 命令创建**  \n    在 Hexo 根目录（`D:\\study\\Blog` ）执行：\n```bash\nhexo new --path \"source/CS61B/proj1\" \"CS61B proj1 标题\"  \n```\n\n此命令会在 `source\\CS61B` 目录下创建名为 `proj1.md` 的文件（`\"CS61B proj1 标题\"` 是文章标题，可自定义 ），之后你可编辑该文件内容。\n\n### 二、修改文件内容\n\n打开 `source\\CS61B\\proj1.md` 文件（不管是手动创建还是命令创建的 ），在文件中编写或修改内容，比如添加 `proj1` 的说明、代码、笔记等。\n\n文件开头的 Front-matter 可按需配置，示例：\n```markdown\n---\ntitle: CS61B proj1 笔记  \ndate: 2025-06-14  \ncategories:\n  - CS61B  \ntags:\n  - CS61B\n  - proj1  \n---\n\n# CS61B proj1 内容\n这里写具体的 proj1 相关内容，如实现思路、代码片段、遇到的问题及解决办法等...\n```\n\n\n### 三、修改`index.md` 文件\n\n添加**正文内容** 用 Markdown 语法编写，比如：\n```markdown\n---\ntitle: Debug 目录\ndate: 2025-06-14\n---\n# 显示文件索引\n- [文件名](文件相对地址)\n这里记录一些 Debug 过程中遇到的问题和解决方法：\n\n- **问题 1**：程序运行时报错 `xxx`，通过检查配置文件解决。\n- **问题 2**：网络请求超时，调整了超时时间参数。\n```\n\n### 四、生成静态文件并本地预览（可选，确保内容显示正常）\n\n在 Hexo 根目录（`D:\\study\\Blog` ）执行以下命令，生成静态站点文件并启动本地服务器：\n```bash\n# 清理旧的生成文件\nhexo clean  \n# 生成新的静态文件，会把 source 目录内容渲染成 HTML 等\nhexo generate  \n# 启动本地服务器，访问 http://localhost:4000 预览\nhexo server  \n```\n打开浏览器访问 `http://localhost:4000` ，进入 `CS61B` 相关页面，确认 `proj1` 内容显示正常。\n\n### 五、提交到 GitHub（通过 Git 操作）\n\n#### 1. 初始化 Git（若 Hexo 项目未关联 Git 仓库）\n\n如果你的 Hexo 项目还没和 GitHub 仓库关联，先在 Hexo 根目录（`D:\\study\\Blog` ）执行：\n```bash\n# 初始化 Git 仓库\ngit init  \n# 关联 GitHub 远程仓库（替换为你自己的仓库地址）\ngit remote add origin https://github.com/你的GitHub用户名/你的仓库名.git  \n```\n\n#### 2. 暂存、提交、推送文件\n\n在 `Hexo` 根目录（`D:\\study\\Blog` ）执行以下 Git 命令：\n```bash\n# 将修改的文件（包括新增的 proj1.md 等）添加到暂存区\ngit add .  \n# 提交到本地 Git 仓库，填写提交说明（描述本次修改内容）\ngit commit -m \"添加 CS61B/proj1 文件，更新相关内容\"  \n# 推送到 GitHub 远程仓库（假设推送到 main 分支，根据实际分支名调整）\ngit push origin main  \n```\n执行完 `git push` 后，登录 GitHub，进入对应的仓库，就能看到 `CS61B` 目录及 `proj1.md` 文件已上传。\n\n### 关键目录与命令总结\n\n|操作阶段|所在目录|执行命令 / 操作|\n|---|---|---|\n|添加 `proj1` 文件|Hexo 根目录 `source\\CS61B`|手动新建 `proj1.md` 或用 `hexo new --path \"source/CS61B/proj1\" \"标题\"` 创建|\n|修改文件内容|Hexo 根目录 `source\\CS61B`|直接编辑 `proj1.md` 文件内容|\n|本地预览|Hexo 根目录|`hexo clean` → `hexo generate` → `hexo server`|\n|提交到 GitHub|Hexo 根目录|`git add .` → `git commit -m \"提交说明\"` → `git push origin main`|\n\n按照上述步骤，就能顺利在 `CS61B` 下添加、修改 `proj1` 文件，并提交到 GitHub 仓库，让你的 `CS61B` 学习记录同步到线上啦。\n\n### 在window文件目录一次性删除文件名里的空格的命令\n你可以打开 PowerShell 终端，然后运行下面这条命令。运行前，请先把路径替换成你实际的目标文件夹路径：\n```\nGet-ChildItem -Path \"C:\\Your\\Folder\\Path\" -File | Rename-Item -NewName { $_.Name -replace ' ', '' }\n```\n","source":"Debug/博客流程.md","raw":"---\ntitle: 博客流程\ndate: 2025-06-14\ncssclasses:\n  - Debug\n---\n以下是在 Hexo 博客中，于 `CS61B` 下添加 `proj1` 文件、修改、上传并提交到 GitHub 的完整流程，清晰说明各步骤的目录和操作：\n\n### 一、添加 `proj1` 文件（本地 Hexo 项目中）\n\n#### 1. 确定文件存放目录\n\nHexo 博客中，文章等内容一般放在 `source` 目录。要在 `CS61B` 下添加 `proj1` 文件，需进入 Hexo 项目根目录（假设为 `D:\\study\\Blog` ）的 `source\\CS61B` 目录。\n\n你可以通过文件资源管理器手动进入该目录，也可在终端（PowerShell 或 CMD）中执行：\n```bash\n# 进入 Hexo 根目录\ncd D:\\study\\Blog  \n# 进入 source\\CS61B 目录\ncd source\\CS61B  \n```\n\n#### 2. 创建 `proj1` 文件\n\n- **方式 1：手动创建**  \n    在 `source\\CS61B` 目录下，新建 Markdown 文件（如 `proj1.md` ），直接编辑内容，写入 `proj1` 相关笔记、代码等。\n    \n- **方式 2：Hexo 命令创建**  \n    在 Hexo 根目录（`D:\\study\\Blog` ）执行：\n```bash\nhexo new --path \"source/CS61B/proj1\" \"CS61B proj1 标题\"  \n```\n\n此命令会在 `source\\CS61B` 目录下创建名为 `proj1.md` 的文件（`\"CS61B proj1 标题\"` 是文章标题，可自定义 ），之后你可编辑该文件内容。\n\n### 二、修改文件内容\n\n打开 `source\\CS61B\\proj1.md` 文件（不管是手动创建还是命令创建的 ），在文件中编写或修改内容，比如添加 `proj1` 的说明、代码、笔记等。\n\n文件开头的 Front-matter 可按需配置，示例：\n```markdown\n---\ntitle: CS61B proj1 笔记  \ndate: 2025-06-14  \ncategories:\n  - CS61B  \ntags:\n  - CS61B\n  - proj1  \n---\n\n# CS61B proj1 内容\n这里写具体的 proj1 相关内容，如实现思路、代码片段、遇到的问题及解决办法等...\n```\n\n\n### 三、修改`index.md` 文件\n\n添加**正文内容** 用 Markdown 语法编写，比如：\n```markdown\n---\ntitle: Debug 目录\ndate: 2025-06-14\n---\n# 显示文件索引\n- [文件名](文件相对地址)\n这里记录一些 Debug 过程中遇到的问题和解决方法：\n\n- **问题 1**：程序运行时报错 `xxx`，通过检查配置文件解决。\n- **问题 2**：网络请求超时，调整了超时时间参数。\n```\n\n### 四、生成静态文件并本地预览（可选，确保内容显示正常）\n\n在 Hexo 根目录（`D:\\study\\Blog` ）执行以下命令，生成静态站点文件并启动本地服务器：\n```bash\n# 清理旧的生成文件\nhexo clean  \n# 生成新的静态文件，会把 source 目录内容渲染成 HTML 等\nhexo generate  \n# 启动本地服务器，访问 http://localhost:4000 预览\nhexo server  \n```\n打开浏览器访问 `http://localhost:4000` ，进入 `CS61B` 相关页面，确认 `proj1` 内容显示正常。\n\n### 五、提交到 GitHub（通过 Git 操作）\n\n#### 1. 初始化 Git（若 Hexo 项目未关联 Git 仓库）\n\n如果你的 Hexo 项目还没和 GitHub 仓库关联，先在 Hexo 根目录（`D:\\study\\Blog` ）执行：\n```bash\n# 初始化 Git 仓库\ngit init  \n# 关联 GitHub 远程仓库（替换为你自己的仓库地址）\ngit remote add origin https://github.com/你的GitHub用户名/你的仓库名.git  \n```\n\n#### 2. 暂存、提交、推送文件\n\n在 `Hexo` 根目录（`D:\\study\\Blog` ）执行以下 Git 命令：\n```bash\n# 将修改的文件（包括新增的 proj1.md 等）添加到暂存区\ngit add .  \n# 提交到本地 Git 仓库，填写提交说明（描述本次修改内容）\ngit commit -m \"添加 CS61B/proj1 文件，更新相关内容\"  \n# 推送到 GitHub 远程仓库（假设推送到 main 分支，根据实际分支名调整）\ngit push origin main  \n```\n执行完 `git push` 后，登录 GitHub，进入对应的仓库，就能看到 `CS61B` 目录及 `proj1.md` 文件已上传。\n\n### 关键目录与命令总结\n\n|操作阶段|所在目录|执行命令 / 操作|\n|---|---|---|\n|添加 `proj1` 文件|Hexo 根目录 `source\\CS61B`|手动新建 `proj1.md` 或用 `hexo new --path \"source/CS61B/proj1\" \"标题\"` 创建|\n|修改文件内容|Hexo 根目录 `source\\CS61B`|直接编辑 `proj1.md` 文件内容|\n|本地预览|Hexo 根目录|`hexo clean` → `hexo generate` → `hexo server`|\n|提交到 GitHub|Hexo 根目录|`git add .` → `git commit -m \"提交说明\"` → `git push origin main`|\n\n按照上述步骤，就能顺利在 `CS61B` 下添加、修改 `proj1` 文件，并提交到 GitHub 仓库，让你的 `CS61B` 学习记录同步到线上啦。\n\n### 在window文件目录一次性删除文件名里的空格的命令\n你可以打开 PowerShell 终端，然后运行下面这条命令。运行前，请先把路径替换成你实际的目标文件夹路径：\n```\nGet-ChildItem -Path \"C:\\Your\\Folder\\Path\" -File | Rename-Item -NewName { $_.Name -replace ' ', '' }\n```\n","updated":"2025-06-19T08:16:31.129Z","path":"Debug/博客流程.html","comments":1,"layout":"page","_id":"cmd63a8cr0005k8v31wgka72e","content":"<p>以下是在 Hexo 博客中，于 <code>CS61B</code> 下添加 <code>proj1</code> 文件、修改、上传并提交到 GitHub 的完整流程，清晰说明各步骤的目录和操作：</p>\n<h3 id=\"一、添加-proj1-文件（本地-Hexo-项目中）\"><a href=\"#一、添加-proj1-文件（本地-Hexo-项目中）\" class=\"headerlink\" title=\"一、添加 proj1 文件（本地 Hexo 项目中）\"></a>一、添加 <code>proj1</code> 文件（本地 Hexo 项目中）</h3><h4 id=\"1-确定文件存放目录\"><a href=\"#1-确定文件存放目录\" class=\"headerlink\" title=\"1. 确定文件存放目录\"></a>1. 确定文件存放目录</h4><p>Hexo 博客中，文章等内容一般放在 <code>source</code> 目录。要在 <code>CS61B</code> 下添加 <code>proj1</code> 文件，需进入 Hexo 项目根目录（假设为 <code>D:\\study\\Blog</code> ）的 <code>source\\CS61B</code> 目录。</p>\n<p>你可以通过文件资源管理器手动进入该目录，也可在终端（PowerShell 或 CMD）中执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入 Hexo 根目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> D:\\study\\Blog  </span><br><span class=\"line\"><span class=\"comment\"># 进入 source\\CS61B 目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"built_in\">source</span>\\CS61B  </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-创建-proj1-文件\"><a href=\"#2-创建-proj1-文件\" class=\"headerlink\" title=\"2. 创建 proj1 文件\"></a>2. 创建 <code>proj1</code> 文件</h4><ul>\n<li><p><strong>方式 1：手动创建</strong><br>  在 <code>source\\CS61B</code> 目录下，新建 Markdown 文件（如 <code>proj1.md</code> ），直接编辑内容，写入 <code>proj1</code> 相关笔记、代码等。</p>\n</li>\n<li><p><strong>方式 2：Hexo 命令创建</strong><br>  在 Hexo 根目录（<code>D:\\study\\Blog</code> ）执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new --path <span class=\"string\">&quot;source/CS61B/proj1&quot;</span> <span class=\"string\">&quot;CS61B proj1 标题&quot;</span>  </span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>此命令会在 <code>source\\CS61B</code> 目录下创建名为 <code>proj1.md</code> 的文件（<code>&quot;CS61B proj1 标题&quot;</code> 是文章标题，可自定义 ），之后你可编辑该文件内容。</p>\n<h3 id=\"二、修改文件内容\"><a href=\"#二、修改文件内容\" class=\"headerlink\" title=\"二、修改文件内容\"></a>二、修改文件内容</h3><p>打开 <code>source\\CS61B\\proj1.md</code> 文件（不管是手动创建还是命令创建的 ），在文件中编写或修改内容，比如添加 <code>proj1</code> 的说明、代码、笔记等。</p>\n<p>文件开头的 Front-matter 可按需配置，示例：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: CS61B proj1 笔记  </span><br><span class=\"line\">date: 2025-06-14  </span><br><span class=\"line\">categories:</span><br><span class=\"line\"><span class=\"bullet\">  -</span> CS61B  </span><br><span class=\"line\">tags:</span><br><span class=\"line\"><span class=\"bullet\">  -</span> CS61B</span><br><span class=\"line\"><span class=\"section\">  - proj1  </span></span><br><span class=\"line\"><span class=\"section\">---</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\"># CS61B proj1 内容</span></span><br><span class=\"line\">这里写具体的 proj1 相关内容，如实现思路、代码片段、遇到的问题及解决办法等...</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"三、修改index-md-文件\"><a href=\"#三、修改index-md-文件\" class=\"headerlink\" title=\"三、修改index.md 文件\"></a>三、修改<code>index.md</code> 文件</h3><p>添加<strong>正文内容</strong> 用 Markdown 语法编写，比如：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: Debug 目录</span><br><span class=\"line\"><span class=\"section\">date: 2025-06-14</span></span><br><span class=\"line\"><span class=\"section\">---</span></span><br><span class=\"line\"><span class=\"section\"># 显示文件索引</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> [<span class=\"string\">文件名</span>](<span class=\"link\">文件相对地址</span>)</span><br><span class=\"line\">这里记录一些 Debug 过程中遇到的问题和解决方法：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"strong\">**问题 1**</span>：程序运行时报错 <span class=\"code\">`xxx`</span>，通过检查配置文件解决。</span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"strong\">**问题 2**</span>：网络请求超时，调整了超时时间参数。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"四、生成静态文件并本地预览（可选，确保内容显示正常）\"><a href=\"#四、生成静态文件并本地预览（可选，确保内容显示正常）\" class=\"headerlink\" title=\"四、生成静态文件并本地预览（可选，确保内容显示正常）\"></a>四、生成静态文件并本地预览（可选，确保内容显示正常）</h3><p>在 Hexo 根目录（<code>D:\\study\\Blog</code> ）执行以下命令，生成静态站点文件并启动本地服务器：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 清理旧的生成文件</span></span><br><span class=\"line\">hexo clean  </span><br><span class=\"line\"><span class=\"comment\"># 生成新的静态文件，会把 source 目录内容渲染成 HTML 等</span></span><br><span class=\"line\">hexo generate  </span><br><span class=\"line\"><span class=\"comment\"># 启动本地服务器，访问 http://localhost:4000 预览</span></span><br><span class=\"line\">hexo server  </span><br></pre></td></tr></table></figure>\n<p>打开浏览器访问 <code>http://localhost:4000</code> ，进入 <code>CS61B</code> 相关页面，确认 <code>proj1</code> 内容显示正常。</p>\n<h3 id=\"五、提交到-GitHub（通过-Git-操作）\"><a href=\"#五、提交到-GitHub（通过-Git-操作）\" class=\"headerlink\" title=\"五、提交到 GitHub（通过 Git 操作）\"></a>五、提交到 GitHub（通过 Git 操作）</h3><h4 id=\"1-初始化-Git（若-Hexo-项目未关联-Git-仓库）\"><a href=\"#1-初始化-Git（若-Hexo-项目未关联-Git-仓库）\" class=\"headerlink\" title=\"1. 初始化 Git（若 Hexo 项目未关联 Git 仓库）\"></a>1. 初始化 Git（若 Hexo 项目未关联 Git 仓库）</h4><p>如果你的 Hexo 项目还没和 GitHub 仓库关联，先在 Hexo 根目录（<code>D:\\study\\Blog</code> ）执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 初始化 Git 仓库</span></span><br><span class=\"line\">git init  </span><br><span class=\"line\"><span class=\"comment\"># 关联 GitHub 远程仓库（替换为你自己的仓库地址）</span></span><br><span class=\"line\">git remote add origin https://github.com/你的GitHub用户名/你的仓库名.git  </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-暂存、提交、推送文件\"><a href=\"#2-暂存、提交、推送文件\" class=\"headerlink\" title=\"2. 暂存、提交、推送文件\"></a>2. 暂存、提交、推送文件</h4><p>在 <code>Hexo</code> 根目录（<code>D:\\study\\Blog</code> ）执行以下 Git 命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将修改的文件（包括新增的 proj1.md 等）添加到暂存区</span></span><br><span class=\"line\">git add .  </span><br><span class=\"line\"><span class=\"comment\"># 提交到本地 Git 仓库，填写提交说明（描述本次修改内容）</span></span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;添加 CS61B/proj1 文件，更新相关内容&quot;</span>  </span><br><span class=\"line\"><span class=\"comment\"># 推送到 GitHub 远程仓库（假设推送到 main 分支，根据实际分支名调整）</span></span><br><span class=\"line\">git push origin main  </span><br></pre></td></tr></table></figure>\n<p>执行完 <code>git push</code> 后，登录 GitHub，进入对应的仓库，就能看到 <code>CS61B</code> 目录及 <code>proj1.md</code> 文件已上传。</p>\n<h3 id=\"关键目录与命令总结\"><a href=\"#关键目录与命令总结\" class=\"headerlink\" title=\"关键目录与命令总结\"></a>关键目录与命令总结</h3><table>\n<thead>\n<tr>\n<th>操作阶段</th>\n<th>所在目录</th>\n<th>执行命令 &#x2F; 操作</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>添加 <code>proj1</code> 文件</td>\n<td>Hexo 根目录 <code>source\\CS61B</code></td>\n<td>手动新建 <code>proj1.md</code> 或用 <code>hexo new --path &quot;source/CS61B/proj1&quot; &quot;标题&quot;</code> 创建</td>\n</tr>\n<tr>\n<td>修改文件内容</td>\n<td>Hexo 根目录 <code>source\\CS61B</code></td>\n<td>直接编辑 <code>proj1.md</code> 文件内容</td>\n</tr>\n<tr>\n<td>本地预览</td>\n<td>Hexo 根目录</td>\n<td><code>hexo clean</code> → <code>hexo generate</code> → <code>hexo server</code></td>\n</tr>\n<tr>\n<td>提交到 GitHub</td>\n<td>Hexo 根目录</td>\n<td><code>git add .</code> → <code>git commit -m &quot;提交说明&quot;</code> → <code>git push origin main</code></td>\n</tr>\n</tbody></table>\n<p>按照上述步骤，就能顺利在 <code>CS61B</code> 下添加、修改 <code>proj1</code> 文件，并提交到 GitHub 仓库，让你的 <code>CS61B</code> 学习记录同步到线上啦。</p>\n<h3 id=\"在window文件目录一次性删除文件名里的空格的命令\"><a href=\"#在window文件目录一次性删除文件名里的空格的命令\" class=\"headerlink\" title=\"在window文件目录一次性删除文件名里的空格的命令\"></a>在window文件目录一次性删除文件名里的空格的命令</h3><p>你可以打开 PowerShell 终端，然后运行下面这条命令。运行前，请先把路径替换成你实际的目标文件夹路径：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Get-ChildItem -Path &quot;C:\\Your\\Folder\\Path&quot; -File | Rename-Item -NewName &#123; $_.Name -replace &#x27; &#x27;, &#x27;&#x27; &#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>以下是在 Hexo 博客中，于 <code>CS61B</code> 下添加 <code>proj1</code> 文件、修改、上传并提交到 GitHub 的完整流程，清晰说明各步骤的目录和操作：</p>\n<h3 id=\"一、添加-proj1-文件（本地-Hexo-项目中）\"><a href=\"#一、添加-proj1-文件（本地-Hexo-项目中）\" class=\"headerlink\" title=\"一、添加 proj1 文件（本地 Hexo 项目中）\"></a>一、添加 <code>proj1</code> 文件（本地 Hexo 项目中）</h3><h4 id=\"1-确定文件存放目录\"><a href=\"#1-确定文件存放目录\" class=\"headerlink\" title=\"1. 确定文件存放目录\"></a>1. 确定文件存放目录</h4><p>Hexo 博客中，文章等内容一般放在 <code>source</code> 目录。要在 <code>CS61B</code> 下添加 <code>proj1</code> 文件，需进入 Hexo 项目根目录（假设为 <code>D:\\study\\Blog</code> ）的 <code>source\\CS61B</code> 目录。</p>\n<p>你可以通过文件资源管理器手动进入该目录，也可在终端（PowerShell 或 CMD）中执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入 Hexo 根目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> D:\\study\\Blog  </span><br><span class=\"line\"><span class=\"comment\"># 进入 source\\CS61B 目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"built_in\">source</span>\\CS61B  </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-创建-proj1-文件\"><a href=\"#2-创建-proj1-文件\" class=\"headerlink\" title=\"2. 创建 proj1 文件\"></a>2. 创建 <code>proj1</code> 文件</h4><ul>\n<li><p><strong>方式 1：手动创建</strong><br>  在 <code>source\\CS61B</code> 目录下，新建 Markdown 文件（如 <code>proj1.md</code> ），直接编辑内容，写入 <code>proj1</code> 相关笔记、代码等。</p>\n</li>\n<li><p><strong>方式 2：Hexo 命令创建</strong><br>  在 Hexo 根目录（<code>D:\\study\\Blog</code> ）执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new --path <span class=\"string\">&quot;source/CS61B/proj1&quot;</span> <span class=\"string\">&quot;CS61B proj1 标题&quot;</span>  </span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>此命令会在 <code>source\\CS61B</code> 目录下创建名为 <code>proj1.md</code> 的文件（<code>&quot;CS61B proj1 标题&quot;</code> 是文章标题，可自定义 ），之后你可编辑该文件内容。</p>\n<h3 id=\"二、修改文件内容\"><a href=\"#二、修改文件内容\" class=\"headerlink\" title=\"二、修改文件内容\"></a>二、修改文件内容</h3><p>打开 <code>source\\CS61B\\proj1.md</code> 文件（不管是手动创建还是命令创建的 ），在文件中编写或修改内容，比如添加 <code>proj1</code> 的说明、代码、笔记等。</p>\n<p>文件开头的 Front-matter 可按需配置，示例：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: CS61B proj1 笔记  </span><br><span class=\"line\">date: 2025-06-14  </span><br><span class=\"line\">categories:</span><br><span class=\"line\"><span class=\"bullet\">  -</span> CS61B  </span><br><span class=\"line\">tags:</span><br><span class=\"line\"><span class=\"bullet\">  -</span> CS61B</span><br><span class=\"line\"><span class=\"section\">  - proj1  </span></span><br><span class=\"line\"><span class=\"section\">---</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\"># CS61B proj1 内容</span></span><br><span class=\"line\">这里写具体的 proj1 相关内容，如实现思路、代码片段、遇到的问题及解决办法等...</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"三、修改index-md-文件\"><a href=\"#三、修改index-md-文件\" class=\"headerlink\" title=\"三、修改index.md 文件\"></a>三、修改<code>index.md</code> 文件</h3><p>添加<strong>正文内容</strong> 用 Markdown 语法编写，比如：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: Debug 目录</span><br><span class=\"line\"><span class=\"section\">date: 2025-06-14</span></span><br><span class=\"line\"><span class=\"section\">---</span></span><br><span class=\"line\"><span class=\"section\"># 显示文件索引</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> [<span class=\"string\">文件名</span>](<span class=\"link\">文件相对地址</span>)</span><br><span class=\"line\">这里记录一些 Debug 过程中遇到的问题和解决方法：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"strong\">**问题 1**</span>：程序运行时报错 <span class=\"code\">`xxx`</span>，通过检查配置文件解决。</span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"strong\">**问题 2**</span>：网络请求超时，调整了超时时间参数。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"四、生成静态文件并本地预览（可选，确保内容显示正常）\"><a href=\"#四、生成静态文件并本地预览（可选，确保内容显示正常）\" class=\"headerlink\" title=\"四、生成静态文件并本地预览（可选，确保内容显示正常）\"></a>四、生成静态文件并本地预览（可选，确保内容显示正常）</h3><p>在 Hexo 根目录（<code>D:\\study\\Blog</code> ）执行以下命令，生成静态站点文件并启动本地服务器：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 清理旧的生成文件</span></span><br><span class=\"line\">hexo clean  </span><br><span class=\"line\"><span class=\"comment\"># 生成新的静态文件，会把 source 目录内容渲染成 HTML 等</span></span><br><span class=\"line\">hexo generate  </span><br><span class=\"line\"><span class=\"comment\"># 启动本地服务器，访问 http://localhost:4000 预览</span></span><br><span class=\"line\">hexo server  </span><br></pre></td></tr></table></figure>\n<p>打开浏览器访问 <code>http://localhost:4000</code> ，进入 <code>CS61B</code> 相关页面，确认 <code>proj1</code> 内容显示正常。</p>\n<h3 id=\"五、提交到-GitHub（通过-Git-操作）\"><a href=\"#五、提交到-GitHub（通过-Git-操作）\" class=\"headerlink\" title=\"五、提交到 GitHub（通过 Git 操作）\"></a>五、提交到 GitHub（通过 Git 操作）</h3><h4 id=\"1-初始化-Git（若-Hexo-项目未关联-Git-仓库）\"><a href=\"#1-初始化-Git（若-Hexo-项目未关联-Git-仓库）\" class=\"headerlink\" title=\"1. 初始化 Git（若 Hexo 项目未关联 Git 仓库）\"></a>1. 初始化 Git（若 Hexo 项目未关联 Git 仓库）</h4><p>如果你的 Hexo 项目还没和 GitHub 仓库关联，先在 Hexo 根目录（<code>D:\\study\\Blog</code> ）执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 初始化 Git 仓库</span></span><br><span class=\"line\">git init  </span><br><span class=\"line\"><span class=\"comment\"># 关联 GitHub 远程仓库（替换为你自己的仓库地址）</span></span><br><span class=\"line\">git remote add origin https://github.com/你的GitHub用户名/你的仓库名.git  </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-暂存、提交、推送文件\"><a href=\"#2-暂存、提交、推送文件\" class=\"headerlink\" title=\"2. 暂存、提交、推送文件\"></a>2. 暂存、提交、推送文件</h4><p>在 <code>Hexo</code> 根目录（<code>D:\\study\\Blog</code> ）执行以下 Git 命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将修改的文件（包括新增的 proj1.md 等）添加到暂存区</span></span><br><span class=\"line\">git add .  </span><br><span class=\"line\"><span class=\"comment\"># 提交到本地 Git 仓库，填写提交说明（描述本次修改内容）</span></span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;添加 CS61B/proj1 文件，更新相关内容&quot;</span>  </span><br><span class=\"line\"><span class=\"comment\"># 推送到 GitHub 远程仓库（假设推送到 main 分支，根据实际分支名调整）</span></span><br><span class=\"line\">git push origin main  </span><br></pre></td></tr></table></figure>\n<p>执行完 <code>git push</code> 后，登录 GitHub，进入对应的仓库，就能看到 <code>CS61B</code> 目录及 <code>proj1.md</code> 文件已上传。</p>\n<h3 id=\"关键目录与命令总结\"><a href=\"#关键目录与命令总结\" class=\"headerlink\" title=\"关键目录与命令总结\"></a>关键目录与命令总结</h3><table>\n<thead>\n<tr>\n<th>操作阶段</th>\n<th>所在目录</th>\n<th>执行命令 &#x2F; 操作</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>添加 <code>proj1</code> 文件</td>\n<td>Hexo 根目录 <code>source\\CS61B</code></td>\n<td>手动新建 <code>proj1.md</code> 或用 <code>hexo new --path &quot;source/CS61B/proj1&quot; &quot;标题&quot;</code> 创建</td>\n</tr>\n<tr>\n<td>修改文件内容</td>\n<td>Hexo 根目录 <code>source\\CS61B</code></td>\n<td>直接编辑 <code>proj1.md</code> 文件内容</td>\n</tr>\n<tr>\n<td>本地预览</td>\n<td>Hexo 根目录</td>\n<td><code>hexo clean</code> → <code>hexo generate</code> → <code>hexo server</code></td>\n</tr>\n<tr>\n<td>提交到 GitHub</td>\n<td>Hexo 根目录</td>\n<td><code>git add .</code> → <code>git commit -m &quot;提交说明&quot;</code> → <code>git push origin main</code></td>\n</tr>\n</tbody></table>\n<p>按照上述步骤，就能顺利在 <code>CS61B</code> 下添加、修改 <code>proj1</code> 文件，并提交到 GitHub 仓库，让你的 <code>CS61B</code> 学习记录同步到线上啦。</p>\n<h3 id=\"在window文件目录一次性删除文件名里的空格的命令\"><a href=\"#在window文件目录一次性删除文件名里的空格的命令\" class=\"headerlink\" title=\"在window文件目录一次性删除文件名里的空格的命令\"></a>在window文件目录一次性删除文件名里的空格的命令</h3><p>你可以打开 PowerShell 终端，然后运行下面这条命令。运行前，请先把路径替换成你实际的目标文件夹路径：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Get-ChildItem -Path &quot;C:\\Your\\Folder\\Path&quot; -File | Rename-Item -NewName &#123; $_.Name -replace &#x27; &#x27;, &#x27;&#x27; &#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"Leb03","date":"2025-06-14T16:00:00.000Z","cssclasses":"CS61B","_content":"![Pastedimage20250615154243](/images/Pastedimage20250615154243.png)\n### Debug `BeeCountingStage` \n\n#### Expected lines modified: 1\n![Pasted20image2020250615170843](/images/Pastedimage20250615170843.png)\n跳转到`BeeCountingStage.java:54`,看到：\n```java\nthis.input.add(input);\n```\n也就是这个类有一个input变量和input局部变量，`because \"this.input\" is null`看起来应该是`this.input`的问题，向上看到：\n```java\nimport java.util.List; // this.input是个List类\n...\nprivate List<String> input; // 猜对了，有声明\npublic BeeCountingStage(In in) {  \n    this.in = in;  \n    this.responses = Map.of(\"go\", new SpeciesListStage(in));  // 没有实例化\n}\n...\nthis.input.add(input); // this.input应该是个List类(毕竟目前只讲到这个),看看引入的工具包\n```\n那加个实例化就好了，这里卡了我好一会，不明白官方怎么做到只改一行代码的：\n```java\nimport java.util.ArrayList; // 加上\n...\npublic BeeCountingStage(In in) {  \n    this.in = in;  \n    this.responses = Map.of(\"go\", new SpeciesListStage(in));  \n    this.input = new ArrayList<>(); // 加上\n}\n```\n\n#### Expected lines modified: 1\n![Pasted image 20250615172020.png](/images/Pastedimage20250615172020.png)\n简单的超出索引异常，这里比较不同的是不能根据堆栈跟踪的第一行直接判断出错的位置，只能通过调试工具找，最终修改：\n```java\nprivate int sumInput() {  \n    int sum = 0;  \n    for (int i = 0; i < this.input.size(); i++) {  \n    // 这里的 i <= this.input.size() 就是导致异常的原因\n        sum += Integer.parseInt(this.input.get(i));  \n    }  \n    return sum;  \n}\n```\n修改之后就可以通过测试了：\n![Pasted image 20250615172423.png](/images/Pastedimage20250615172423.png)\n\n复盘时看到官方说：\n```jobs \n修正SpeciesListStage中的错误。如果你在发生异常的方法内部（堆栈跟踪的第一行）没有发现问题所在，通常查看第二行，了解该方法是从何处被调用以及使用了哪些参数，这是个不错的办法。 \n```\n回去看了看出错点，的确就在下面的第三行有提到。\n\n### Debug `PalindromeStage`\n#### Expected lines modified: 3\n![Pasted image 20250615173326.png](/images/Pastedimage20250615173326.png)\n查了下含义，是算术异常，表示程序尝试执行**除以零**的操作。\n直接跳转到`SpeciesListStage.java:102`，改一下就好：\n```java\n    public static int arraySimilarity(List<String> listOne, List<String> listTwo) {  \n        ...\n        for (String o : listTwo) {  \n\t\t...\n        }  \n        if (similarObjects > 0) {  \n            return 1;  \n        }else {  \n            return 0;  \n        }  \n        //return similarObjects / listOne.size();  \n    }  \n}\n```\n\n\n#### Expected lines modified: 2-5\n![Pasted image 20250615175444.png](/images/Pastedimage20250615175444.png)\n跳转到：\n![Pasted image 20250615175613.png](/images/Pastedimage20250615175613.png)\n先`Ctl+F`找一下`Preconditions`类，发现是引入的工具包，那直接一整个复制搜索的大操作，然后从这里开始调试，但是会发现很多次返回错误点，那就很难判断到底是哪次的错误了，于是点开被折叠的堆栈跟踪。\n![Pasted image 20250615211618.png](/images/Pastedimage20250615211618.png)\n从第一条蓝色标注的开始看(虽然不知道什么原理，但是从上面的经验来看，标蓝的最有可能)\n后来复盘时查了下，写在下面：\n* 在 IDE的报错堆栈信息里，标蓝的部分一般是**与你当前项目代码直接相关的类和方法** ，也就是你自己编写的代码文件里的内容，方便你快速定位到项目中出错的具体位置\n* 不标蓝的，是 **JDK 内部的类和方法** 。这些属于 Java 标准库的代码，不是你项目里自己写的代码。IDE 通常不会把它们标蓝突出显示，因为一般情况下，我们不会去修改 JDK 源码，主要是聚焦在自己项目代码里找问题，它们更多是辅助说明错误发生时的调用链路。\n然后点旁边的灯泡，会看到提示：\n![Pasted image 20250615184116.png](/images/Pastedimage20250615184116.png)\n这个比较好改，仔细点就行：\n```java\nprivate static IntList digitsToIntList(String s) { \n    int[] a = new int[s.length()];  \n    for (int i = s.length(); i >= 1; i--) {  \n        a[s.length() - i] = Character.getNumericValue(s.charAt(i-1));  \n    } \n    return IntList.of(a);  \n}\n```\n\n接下来先看官方提示：\n```\n如果你还没有，请通读上面的注释。查看调用`digitsToIntList`的方法。如果你在该方法中设置断点并通过调试器运行，我们是否曾经退出`while`循环？我们需要满足什么条件才能跳出`while`循环？这个条件是否得到满足？尝试结合使用Java可视化工具，这样你就可以借助可视化工具更仔细地检查这个错误。\n```\n直接`ctl+F`找到调用`digitsToIntList` 的方法`playStage`，大概看一遍就能找到第一个比较明显的错误：\n![Pasted image 20250615213033.png](/images/Pastedimage20250615213033.png)\n一看就是死循环的料，我的修改方案是引入一个`boolean`值：\n```java\n    boolean finish = false;  // 修改\n    while (!finish) {  // 修改\n        ...\n        while (!AdventureUtils.isInt(input)) {  \n            ...\n        }  \n        ...\n        if (numLst.equals(reversedLst)) {  \n            System.out.println(\"Wow, nice room number!\");  \n            finish = true;  // 修改\n            break;  \n        }\n        ...\n    }  \n}\n```\n\n之后在运行就会一直进入死循环：\n![Pasted image 20250615213603.png](/images/Pastedimage20250615213603.png)\n通过调试工具发现问题在45行，结果一直为`false`:\n```java\nif (numLst.equals(reversedLst)) {  \n    System.out.println(\"Wow, nice room number!\");  \n    finish = true;  \n    break;  \n}\n```\n就是这里卡了我好久，一个个说：\n首先是：\n```java\npublic void playStage() { \n        ...\n    while (!finish) {  \n        String input = in.readLine();\n        while (!AdventureUtils.isInt(input)) {  \n            ...\n            input = this.in.readLine();  \n        }  \n        ...\n    }\n}\n```\n我不理解`in.readLine()`到底是什么，找资料可以知道这是'读取输入流从当前位置到下一行结束符（\\n、\\r或\\r\\n）的所有字符，并返回为字符串'的作用，但是我没有找到什么`输入流`，调试工具里看它们也是突然冒出来的，后来我以为`输入流`指的是开始时输出的一大串，然后通过调试工具发现，`input`的值和我预期的不同：\n```\ninput值的变化：'404'->'va cafe'->'go'->'null'->一直为'null'\n```\n所以我的猜想是错的，后来我猜想这个程序是找到回文数的目的，那会不会准确的程序应该在`input = 404`时就结束，后来通过调试根据发现：\n```java\npublic boolean equals(Object other) {  \n    if (other instanceof IntList oL) {  \n        if (first != oL.first) {  \n            return false;  //本来改反悔true的值，却返回false\n        } else if (rest == null && oL.rest == null) {  \n            ...\n        } else if (rest != null && oL.rest != null) {  \n            ...  \n        } else {  \n            ... \n        }  \n    }  \n    return false;  \n}\n```\n最后只要把对应的`return false;`改成`return true;`就行了。\n\n复盘时，关于`输入流`,我想到个有意思的：\n```java\npublic class ReadLineExample {\n    public static void main(String[] args) {\n        // 1. 第1次打印提示（仅输出，不阻塞）\n        System.out.println(\"请输入一行文本：\");  \n\n        // 2. 创建Scanner（初始化扫描器，不触发输入）\n        Scanner scanner = new Scanner(System.in); \n\n        // 3. 第2次打印提示（仅输出，不阻塞）\n        System.out.println(\"请输入一行文本：\");  \n\n        // 4. 第3次打印提示（仅输出，不阻塞）\n        System.out.println(\"请输入一行文本：\");  // 第六行代码\n\n        // 5. 关键：仅读取1次用户输入！\n        // 程序会暂停，等待用户在控制台输入（无论前面打印多少次提示）\n        String line = scanner.nextLine();  // 第七行代码\n\n        // 6. 输出结果\n        System.out.println(\"你输入的内容是：\" + line);\n        scanner.close();\n    }\n}\n```\n如果在计算机刚刚读取完第六行代码(上面代码里标注的一行)，在读取第七行前输入，那是不是就会卡bug了，用户的输入信息丢失。\n查了下，遗憾地发现不会：\n即使 “计算机刚刚读完第 6 行还没执行第 7 行”，用户此时在控制台输入内容：\n- 输入的内容会被**暂存到系统的输入缓冲区**（属于 `System.in` 的一部分），不会丢失。\n- 当程序执行到 `scanner.nextLine()` 时，会直接从缓冲区读取用户输入的内容，程序继续执行。\n\n### Debug `MachineStage`\n#### Expected lines modified: 2-5\n\n这一块写的很顺利，逻辑也很流畅：\n先运行一遍，通过调试工具的查看差异功能，定位到`machineResult`参数，通过参数的定义锁定`sumOfElementwiseMax(arrOne, arrTwo)`方法，在这里打上断点，开始调试：\n\n![Pasted image 20250615223538.png](/images/Pastedimage20250615223538.png)\n发现`maxes`数组错误，定位到`arrayMax`方法，打上断点，发现`biggerValue`错了：\n![Pasted image 20250615223111.png](/images/Pastedimage20250615223111.png)\n定位到`mysteryMax`方法，重写方法：\n```java\npublic static int mysteryMax(int a, int b) {  \n    int max;  \n    if(a > b) {  \n        max = a;  \n    }else {  \n        max = b;  \n    }  \n    return max;  \n}\n```\n再运行程序，依然错，通过调试工具的查看差异功能，定位`machineResult`参数，再查看`sumOfElementwiseMax(arrOne, arrTwo)`方法，`maxes`数组没有问题，查看`arraySum`方法，通过调试工具发现`mysteryAdd`方法的错误，这里有个小坑，我一开始理所当然的以为`mysteryAdd`方法返回的应该时两数之和，但是运行错误，仔细看才发现不对：\n```java\npublic static int mysteryAdd(int a, int b) {  \n    return b;\n```\n\n最后运行程序成功：\n![Pasted image 20250615230527.png](/images/Pastedimage20250615230527.png)\n\n以上就是这次`Lab03`的内容。","source":"CS61B/Leb03.md","raw":"---\ntitle: Leb03\ndate: 2025-06-15\ncssclasses: CS61B\n---\n![Pastedimage20250615154243](/images/Pastedimage20250615154243.png)\n### Debug `BeeCountingStage` \n\n#### Expected lines modified: 1\n![Pasted20image2020250615170843](/images/Pastedimage20250615170843.png)\n跳转到`BeeCountingStage.java:54`,看到：\n```java\nthis.input.add(input);\n```\n也就是这个类有一个input变量和input局部变量，`because \"this.input\" is null`看起来应该是`this.input`的问题，向上看到：\n```java\nimport java.util.List; // this.input是个List类\n...\nprivate List<String> input; // 猜对了，有声明\npublic BeeCountingStage(In in) {  \n    this.in = in;  \n    this.responses = Map.of(\"go\", new SpeciesListStage(in));  // 没有实例化\n}\n...\nthis.input.add(input); // this.input应该是个List类(毕竟目前只讲到这个),看看引入的工具包\n```\n那加个实例化就好了，这里卡了我好一会，不明白官方怎么做到只改一行代码的：\n```java\nimport java.util.ArrayList; // 加上\n...\npublic BeeCountingStage(In in) {  \n    this.in = in;  \n    this.responses = Map.of(\"go\", new SpeciesListStage(in));  \n    this.input = new ArrayList<>(); // 加上\n}\n```\n\n#### Expected lines modified: 1\n![Pasted image 20250615172020.png](/images/Pastedimage20250615172020.png)\n简单的超出索引异常，这里比较不同的是不能根据堆栈跟踪的第一行直接判断出错的位置，只能通过调试工具找，最终修改：\n```java\nprivate int sumInput() {  \n    int sum = 0;  \n    for (int i = 0; i < this.input.size(); i++) {  \n    // 这里的 i <= this.input.size() 就是导致异常的原因\n        sum += Integer.parseInt(this.input.get(i));  \n    }  \n    return sum;  \n}\n```\n修改之后就可以通过测试了：\n![Pasted image 20250615172423.png](/images/Pastedimage20250615172423.png)\n\n复盘时看到官方说：\n```jobs \n修正SpeciesListStage中的错误。如果你在发生异常的方法内部（堆栈跟踪的第一行）没有发现问题所在，通常查看第二行，了解该方法是从何处被调用以及使用了哪些参数，这是个不错的办法。 \n```\n回去看了看出错点，的确就在下面的第三行有提到。\n\n### Debug `PalindromeStage`\n#### Expected lines modified: 3\n![Pasted image 20250615173326.png](/images/Pastedimage20250615173326.png)\n查了下含义，是算术异常，表示程序尝试执行**除以零**的操作。\n直接跳转到`SpeciesListStage.java:102`，改一下就好：\n```java\n    public static int arraySimilarity(List<String> listOne, List<String> listTwo) {  \n        ...\n        for (String o : listTwo) {  \n\t\t...\n        }  \n        if (similarObjects > 0) {  \n            return 1;  \n        }else {  \n            return 0;  \n        }  \n        //return similarObjects / listOne.size();  \n    }  \n}\n```\n\n\n#### Expected lines modified: 2-5\n![Pasted image 20250615175444.png](/images/Pastedimage20250615175444.png)\n跳转到：\n![Pasted image 20250615175613.png](/images/Pastedimage20250615175613.png)\n先`Ctl+F`找一下`Preconditions`类，发现是引入的工具包，那直接一整个复制搜索的大操作，然后从这里开始调试，但是会发现很多次返回错误点，那就很难判断到底是哪次的错误了，于是点开被折叠的堆栈跟踪。\n![Pasted image 20250615211618.png](/images/Pastedimage20250615211618.png)\n从第一条蓝色标注的开始看(虽然不知道什么原理，但是从上面的经验来看，标蓝的最有可能)\n后来复盘时查了下，写在下面：\n* 在 IDE的报错堆栈信息里，标蓝的部分一般是**与你当前项目代码直接相关的类和方法** ，也就是你自己编写的代码文件里的内容，方便你快速定位到项目中出错的具体位置\n* 不标蓝的，是 **JDK 内部的类和方法** 。这些属于 Java 标准库的代码，不是你项目里自己写的代码。IDE 通常不会把它们标蓝突出显示，因为一般情况下，我们不会去修改 JDK 源码，主要是聚焦在自己项目代码里找问题，它们更多是辅助说明错误发生时的调用链路。\n然后点旁边的灯泡，会看到提示：\n![Pasted image 20250615184116.png](/images/Pastedimage20250615184116.png)\n这个比较好改，仔细点就行：\n```java\nprivate static IntList digitsToIntList(String s) { \n    int[] a = new int[s.length()];  \n    for (int i = s.length(); i >= 1; i--) {  \n        a[s.length() - i] = Character.getNumericValue(s.charAt(i-1));  \n    } \n    return IntList.of(a);  \n}\n```\n\n接下来先看官方提示：\n```\n如果你还没有，请通读上面的注释。查看调用`digitsToIntList`的方法。如果你在该方法中设置断点并通过调试器运行，我们是否曾经退出`while`循环？我们需要满足什么条件才能跳出`while`循环？这个条件是否得到满足？尝试结合使用Java可视化工具，这样你就可以借助可视化工具更仔细地检查这个错误。\n```\n直接`ctl+F`找到调用`digitsToIntList` 的方法`playStage`，大概看一遍就能找到第一个比较明显的错误：\n![Pasted image 20250615213033.png](/images/Pastedimage20250615213033.png)\n一看就是死循环的料，我的修改方案是引入一个`boolean`值：\n```java\n    boolean finish = false;  // 修改\n    while (!finish) {  // 修改\n        ...\n        while (!AdventureUtils.isInt(input)) {  \n            ...\n        }  \n        ...\n        if (numLst.equals(reversedLst)) {  \n            System.out.println(\"Wow, nice room number!\");  \n            finish = true;  // 修改\n            break;  \n        }\n        ...\n    }  \n}\n```\n\n之后在运行就会一直进入死循环：\n![Pasted image 20250615213603.png](/images/Pastedimage20250615213603.png)\n通过调试工具发现问题在45行，结果一直为`false`:\n```java\nif (numLst.equals(reversedLst)) {  \n    System.out.println(\"Wow, nice room number!\");  \n    finish = true;  \n    break;  \n}\n```\n就是这里卡了我好久，一个个说：\n首先是：\n```java\npublic void playStage() { \n        ...\n    while (!finish) {  \n        String input = in.readLine();\n        while (!AdventureUtils.isInt(input)) {  \n            ...\n            input = this.in.readLine();  \n        }  \n        ...\n    }\n}\n```\n我不理解`in.readLine()`到底是什么，找资料可以知道这是'读取输入流从当前位置到下一行结束符（\\n、\\r或\\r\\n）的所有字符，并返回为字符串'的作用，但是我没有找到什么`输入流`，调试工具里看它们也是突然冒出来的，后来我以为`输入流`指的是开始时输出的一大串，然后通过调试工具发现，`input`的值和我预期的不同：\n```\ninput值的变化：'404'->'va cafe'->'go'->'null'->一直为'null'\n```\n所以我的猜想是错的，后来我猜想这个程序是找到回文数的目的，那会不会准确的程序应该在`input = 404`时就结束，后来通过调试根据发现：\n```java\npublic boolean equals(Object other) {  \n    if (other instanceof IntList oL) {  \n        if (first != oL.first) {  \n            return false;  //本来改反悔true的值，却返回false\n        } else if (rest == null && oL.rest == null) {  \n            ...\n        } else if (rest != null && oL.rest != null) {  \n            ...  \n        } else {  \n            ... \n        }  \n    }  \n    return false;  \n}\n```\n最后只要把对应的`return false;`改成`return true;`就行了。\n\n复盘时，关于`输入流`,我想到个有意思的：\n```java\npublic class ReadLineExample {\n    public static void main(String[] args) {\n        // 1. 第1次打印提示（仅输出，不阻塞）\n        System.out.println(\"请输入一行文本：\");  \n\n        // 2. 创建Scanner（初始化扫描器，不触发输入）\n        Scanner scanner = new Scanner(System.in); \n\n        // 3. 第2次打印提示（仅输出，不阻塞）\n        System.out.println(\"请输入一行文本：\");  \n\n        // 4. 第3次打印提示（仅输出，不阻塞）\n        System.out.println(\"请输入一行文本：\");  // 第六行代码\n\n        // 5. 关键：仅读取1次用户输入！\n        // 程序会暂停，等待用户在控制台输入（无论前面打印多少次提示）\n        String line = scanner.nextLine();  // 第七行代码\n\n        // 6. 输出结果\n        System.out.println(\"你输入的内容是：\" + line);\n        scanner.close();\n    }\n}\n```\n如果在计算机刚刚读取完第六行代码(上面代码里标注的一行)，在读取第七行前输入，那是不是就会卡bug了，用户的输入信息丢失。\n查了下，遗憾地发现不会：\n即使 “计算机刚刚读完第 6 行还没执行第 7 行”，用户此时在控制台输入内容：\n- 输入的内容会被**暂存到系统的输入缓冲区**（属于 `System.in` 的一部分），不会丢失。\n- 当程序执行到 `scanner.nextLine()` 时，会直接从缓冲区读取用户输入的内容，程序继续执行。\n\n### Debug `MachineStage`\n#### Expected lines modified: 2-5\n\n这一块写的很顺利，逻辑也很流畅：\n先运行一遍，通过调试工具的查看差异功能，定位到`machineResult`参数，通过参数的定义锁定`sumOfElementwiseMax(arrOne, arrTwo)`方法，在这里打上断点，开始调试：\n\n![Pasted image 20250615223538.png](/images/Pastedimage20250615223538.png)\n发现`maxes`数组错误，定位到`arrayMax`方法，打上断点，发现`biggerValue`错了：\n![Pasted image 20250615223111.png](/images/Pastedimage20250615223111.png)\n定位到`mysteryMax`方法，重写方法：\n```java\npublic static int mysteryMax(int a, int b) {  \n    int max;  \n    if(a > b) {  \n        max = a;  \n    }else {  \n        max = b;  \n    }  \n    return max;  \n}\n```\n再运行程序，依然错，通过调试工具的查看差异功能，定位`machineResult`参数，再查看`sumOfElementwiseMax(arrOne, arrTwo)`方法，`maxes`数组没有问题，查看`arraySum`方法，通过调试工具发现`mysteryAdd`方法的错误，这里有个小坑，我一开始理所当然的以为`mysteryAdd`方法返回的应该时两数之和，但是运行错误，仔细看才发现不对：\n```java\npublic static int mysteryAdd(int a, int b) {  \n    return b;\n```\n\n最后运行程序成功：\n![Pasted image 20250615230527.png](/images/Pastedimage20250615230527.png)\n\n以上就是这次`Lab03`的内容。","updated":"2025-06-28T03:58:56.375Z","path":"CS61B/Leb03.html","comments":1,"layout":"page","_id":"cmd63a8cs0007k8v3hz0wfq4w","content":"<p><img src=\"/images/Pastedimage20250615154243.png\" alt=\"Pastedimage20250615154243\"></p>\n<h3 id=\"Debug-BeeCountingStage\"><a href=\"#Debug-BeeCountingStage\" class=\"headerlink\" title=\"Debug BeeCountingStage\"></a>Debug <code>BeeCountingStage</code></h3><h4 id=\"Expected-lines-modified-1\"><a href=\"#Expected-lines-modified-1\" class=\"headerlink\" title=\"Expected lines modified: 1\"></a>Expected lines modified: 1</h4><p><img src=\"/images/Pastedimage20250615170843.png\" alt=\"Pasted20image2020250615170843\"><br>跳转到<code>BeeCountingStage.java:54</code>,看到：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">this</span>.input.add(input);</span><br></pre></td></tr></table></figure>\n<p>也就是这个类有一个input变量和input局部变量，<code>because &quot;this.input&quot; is null</code>看起来应该是<code>this.input</code>的问题，向上看到：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.List; <span class=\"comment\">// this.input是个List类</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">private</span> List&lt;String&gt; input; <span class=\"comment\">// 猜对了，有声明</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">BeeCountingStage</span><span class=\"params\">(In in)</span> &#123;  </span><br><span class=\"line\">    <span class=\"built_in\">this</span>.in = in;  </span><br><span class=\"line\">    <span class=\"built_in\">this</span>.responses = Map.of(<span class=\"string\">&quot;go&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">SpeciesListStage</span>(in));  <span class=\"comment\">// 没有实例化</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"built_in\">this</span>.input.add(input); <span class=\"comment\">// this.input应该是个List类(毕竟目前只讲到这个),看看引入的工具包</span></span><br></pre></td></tr></table></figure>\n<p>那加个实例化就好了，这里卡了我好一会，不明白官方怎么做到只改一行代码的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList; <span class=\"comment\">// 加上</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">BeeCountingStage</span><span class=\"params\">(In in)</span> &#123;  </span><br><span class=\"line\">    <span class=\"built_in\">this</span>.in = in;  </span><br><span class=\"line\">    <span class=\"built_in\">this</span>.responses = Map.of(<span class=\"string\">&quot;go&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">SpeciesListStage</span>(in));  </span><br><span class=\"line\">    <span class=\"built_in\">this</span>.input = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(); <span class=\"comment\">// 加上</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Expected-lines-modified-1-1\"><a href=\"#Expected-lines-modified-1-1\" class=\"headerlink\" title=\"Expected lines modified: 1\"></a>Expected lines modified: 1</h4><p><img src=\"/images/Pastedimage20250615172020.png\" alt=\"Pasted image 20250615172020.png\"><br>简单的超出索引异常，这里比较不同的是不能根据堆栈跟踪的第一行直接判断出错的位置，只能通过调试工具找，最终修改：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"title function_\">sumInput</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">this</span>.input.size(); i++) &#123;  </span><br><span class=\"line\">    <span class=\"comment\">// 这里的 i &lt;= this.input.size() 就是导致异常的原因</span></span><br><span class=\"line\">        sum += Integer.parseInt(<span class=\"built_in\">this</span>.input.get(i));  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改之后就可以通过测试了：<br><img src=\"/images/Pastedimage20250615172423.png\" alt=\"Pasted image 20250615172423.png\"></p>\n<p>复盘时看到官方说：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">修正SpeciesListStage中的错误。如果你在发生异常的方法内部（堆栈跟踪的第一行）没有发现问题所在，通常查看第二行，了解该方法是从何处被调用以及使用了哪些参数，这是个不错的办法。 </span><br></pre></td></tr></table></figure>\n<p>回去看了看出错点，的确就在下面的第三行有提到。</p>\n<h3 id=\"Debug-PalindromeStage\"><a href=\"#Debug-PalindromeStage\" class=\"headerlink\" title=\"Debug PalindromeStage\"></a>Debug <code>PalindromeStage</code></h3><h4 id=\"Expected-lines-modified-3\"><a href=\"#Expected-lines-modified-3\" class=\"headerlink\" title=\"Expected lines modified: 3\"></a>Expected lines modified: 3</h4><p><img src=\"/images/Pastedimage20250615173326.png\" alt=\"Pasted image 20250615173326.png\"><br>查了下含义，是算术异常，表示程序尝试执行<strong>除以零</strong>的操作。<br>直接跳转到<code>SpeciesListStage.java:102</code>，改一下就好：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">arraySimilarity</span><span class=\"params\">(List&lt;String&gt; listOne, List&lt;String&gt; listTwo)</span> &#123;  </span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String o : listTwo) &#123;  </span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (similarObjects &gt; <span class=\"number\">0</span>) &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;  </span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"comment\">//return similarObjects / listOne.size();  </span></span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"Expected-lines-modified-2-5\"><a href=\"#Expected-lines-modified-2-5\" class=\"headerlink\" title=\"Expected lines modified: 2-5\"></a>Expected lines modified: 2-5</h4><p><img src=\"/images/Pastedimage20250615175444.png\" alt=\"Pasted image 20250615175444.png\"><br>跳转到：<br><img src=\"/images/Pastedimage20250615175613.png\" alt=\"Pasted image 20250615175613.png\"><br>先<code>Ctl+F</code>找一下<code>Preconditions</code>类，发现是引入的工具包，那直接一整个复制搜索的大操作，然后从这里开始调试，但是会发现很多次返回错误点，那就很难判断到底是哪次的错误了，于是点开被折叠的堆栈跟踪。<br><img src=\"/images/Pastedimage20250615211618.png\" alt=\"Pasted image 20250615211618.png\"><br>从第一条蓝色标注的开始看(虽然不知道什么原理，但是从上面的经验来看，标蓝的最有可能)<br>后来复盘时查了下，写在下面：</p>\n<ul>\n<li>在 IDE的报错堆栈信息里，标蓝的部分一般是<strong>与你当前项目代码直接相关的类和方法</strong> ，也就是你自己编写的代码文件里的内容，方便你快速定位到项目中出错的具体位置</li>\n<li>不标蓝的，是 <strong>JDK 内部的类和方法</strong> 。这些属于 Java 标准库的代码，不是你项目里自己写的代码。IDE 通常不会把它们标蓝突出显示，因为一般情况下，我们不会去修改 JDK 源码，主要是聚焦在自己项目代码里找问题，它们更多是辅助说明错误发生时的调用链路。<br>然后点旁边的灯泡，会看到提示：<br><img src=\"/images/Pastedimage20250615184116.png\" alt=\"Pasted image 20250615184116.png\"><br>这个比较好改，仔细点就行：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> IntList <span class=\"title function_\">digitsToIntList</span><span class=\"params\">(String s)</span> &#123; </span><br><span class=\"line\">    <span class=\"type\">int</span>[] a = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[s.length()];  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> s.length(); i &gt;= <span class=\"number\">1</span>; i--) &#123;  </span><br><span class=\"line\">        a[s.length() - i] = Character.getNumericValue(s.charAt(i-<span class=\"number\">1</span>));  </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> IntList.of(a);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>接下来先看官方提示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果你还没有，请通读上面的注释。查看调用`digitsToIntList`的方法。如果你在该方法中设置断点并通过调试器运行，我们是否曾经退出`while`循环？我们需要满足什么条件才能跳出`while`循环？这个条件是否得到满足？尝试结合使用Java可视化工具，这样你就可以借助可视化工具更仔细地检查这个错误。</span><br></pre></td></tr></table></figure>\n<p>直接<code>ctl+F</code>找到调用<code>digitsToIntList</code> 的方法<code>playStage</code>，大概看一遍就能找到第一个比较明显的错误：<br><img src=\"/images/Pastedimage20250615213033.png\" alt=\"Pasted image 20250615213033.png\"><br>一看就是死循环的料，我的修改方案是引入一个<code>boolean</code>值：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">finish</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;  <span class=\"comment\">// 修改</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!finish) &#123;  <span class=\"comment\">// 修改</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!AdventureUtils.isInt(input)) &#123;  </span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (numLst.equals(reversedLst)) &#123;  </span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Wow, nice room number!&quot;</span>);  </span><br><span class=\"line\">            finish = <span class=\"literal\">true</span>;  <span class=\"comment\">// 修改</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>之后在运行就会一直进入死循环：<br><img src=\"/images/Pastedimage20250615213603.png\" alt=\"Pasted image 20250615213603.png\"><br>通过调试工具发现问题在45行，结果一直为<code>false</code>:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (numLst.equals(reversedLst)) &#123;  </span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Wow, nice room number!&quot;</span>);  </span><br><span class=\"line\">    finish = <span class=\"literal\">true</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>就是这里卡了我好久，一个个说：<br>首先是：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">playStage</span><span class=\"params\">()</span> &#123; </span><br><span class=\"line\">        ...</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!finish) &#123;  </span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">input</span> <span class=\"operator\">=</span> in.readLine();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!AdventureUtils.isInt(input)) &#123;  </span><br><span class=\"line\">            ...</span><br><span class=\"line\">            input = <span class=\"built_in\">this</span>.in.readLine();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我不理解<code>in.readLine()</code>到底是什么，找资料可以知道这是’读取输入流从当前位置到下一行结束符（\\n、\\r或\\r\\n）的所有字符，并返回为字符串’的作用，但是我没有找到什么<code>输入流</code>，调试工具里看它们也是突然冒出来的，后来我以为<code>输入流</code>指的是开始时输出的一大串，然后通过调试工具发现，<code>input</code>的值和我预期的不同：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input值的变化：&#x27;404&#x27;-&gt;&#x27;va cafe&#x27;-&gt;&#x27;go&#x27;-&gt;&#x27;null&#x27;-&gt;一直为&#x27;null&#x27;</span><br></pre></td></tr></table></figure>\n<p>所以我的猜想是错的，后来我猜想这个程序是找到回文数的目的，那会不会准确的程序应该在<code>input = 404</code>时就结束，后来通过调试根据发现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">equals</span><span class=\"params\">(Object other)</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (other <span class=\"keyword\">instanceof</span> IntList oL) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (first != oL.first) &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;  <span class=\"comment\">//本来改反悔true的值，却返回false</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rest == <span class=\"literal\">null</span> &amp;&amp; oL.rest == <span class=\"literal\">null</span>) &#123;  </span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rest != <span class=\"literal\">null</span> &amp;&amp; oL.rest != <span class=\"literal\">null</span>) &#123;  </span><br><span class=\"line\">            ...  </span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">            ... </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后只要把对应的<code>return false;</code>改成<code>return true;</code>就行了。</p>\n<p>复盘时，关于<code>输入流</code>,我想到个有意思的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ReadLineExample</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1. 第1次打印提示（仅输出，不阻塞）</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;请输入一行文本：&quot;</span>);  </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 2. 创建Scanner（初始化扫描器，不触发输入）</span></span><br><span class=\"line\">        <span class=\"type\">Scanner</span> <span class=\"variable\">scanner</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in); </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 3. 第2次打印提示（仅输出，不阻塞）</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;请输入一行文本：&quot;</span>);  </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 4. 第3次打印提示（仅输出，不阻塞）</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;请输入一行文本：&quot;</span>);  <span class=\"comment\">// 第六行代码</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 5. 关键：仅读取1次用户输入！</span></span><br><span class=\"line\">        <span class=\"comment\">// 程序会暂停，等待用户在控制台输入（无论前面打印多少次提示）</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">line</span> <span class=\"operator\">=</span> scanner.nextLine();  <span class=\"comment\">// 第七行代码</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 6. 输出结果</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;你输入的内容是：&quot;</span> + line);</span><br><span class=\"line\">        scanner.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果在计算机刚刚读取完第六行代码(上面代码里标注的一行)，在读取第七行前输入，那是不是就会卡bug了，用户的输入信息丢失。<br>查了下，遗憾地发现不会：<br>即使 “计算机刚刚读完第 6 行还没执行第 7 行”，用户此时在控制台输入内容：</p>\n<ul>\n<li>输入的内容会被<strong>暂存到系统的输入缓冲区</strong>（属于 <code>System.in</code> 的一部分），不会丢失。</li>\n<li>当程序执行到 <code>scanner.nextLine()</code> 时，会直接从缓冲区读取用户输入的内容，程序继续执行。</li>\n</ul>\n<h3 id=\"Debug-MachineStage\"><a href=\"#Debug-MachineStage\" class=\"headerlink\" title=\"Debug MachineStage\"></a>Debug <code>MachineStage</code></h3><h4 id=\"Expected-lines-modified-2-5-1\"><a href=\"#Expected-lines-modified-2-5-1\" class=\"headerlink\" title=\"Expected lines modified: 2-5\"></a>Expected lines modified: 2-5</h4><p>这一块写的很顺利，逻辑也很流畅：<br>先运行一遍，通过调试工具的查看差异功能，定位到<code>machineResult</code>参数，通过参数的定义锁定<code>sumOfElementwiseMax(arrOne, arrTwo)</code>方法，在这里打上断点，开始调试：</p>\n<p><img src=\"/images/Pastedimage20250615223538.png\" alt=\"Pasted image 20250615223538.png\"><br>发现<code>maxes</code>数组错误，定位到<code>arrayMax</code>方法，打上断点，发现<code>biggerValue</code>错了：<br><img src=\"/images/Pastedimage20250615223111.png\" alt=\"Pasted image 20250615223111.png\"><br>定位到<code>mysteryMax</code>方法，重写方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">mysteryMax</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> &#123;  </span><br><span class=\"line\">    <span class=\"type\">int</span> max;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a &gt; b) &#123;  </span><br><span class=\"line\">        max = a;  </span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">        max = b;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> max;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>再运行程序，依然错，通过调试工具的查看差异功能，定位<code>machineResult</code>参数，再查看<code>sumOfElementwiseMax(arrOne, arrTwo)</code>方法，<code>maxes</code>数组没有问题，查看<code>arraySum</code>方法，通过调试工具发现<code>mysteryAdd</code>方法的错误，这里有个小坑，我一开始理所当然的以为<code>mysteryAdd</code>方法返回的应该时两数之和，但是运行错误，仔细看才发现不对：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">mysteryAdd</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> b;</span><br></pre></td></tr></table></figure>\n\n<p>最后运行程序成功：<br><img src=\"/images/Pastedimage20250615230527.png\" alt=\"Pasted image 20250615230527.png\"></p>\n<p>以上就是这次<code>Lab03</code>的内容。</p>\n","excerpt":"","more":"<p><img src=\"/images/Pastedimage20250615154243.png\" alt=\"Pastedimage20250615154243\"></p>\n<h3 id=\"Debug-BeeCountingStage\"><a href=\"#Debug-BeeCountingStage\" class=\"headerlink\" title=\"Debug BeeCountingStage\"></a>Debug <code>BeeCountingStage</code></h3><h4 id=\"Expected-lines-modified-1\"><a href=\"#Expected-lines-modified-1\" class=\"headerlink\" title=\"Expected lines modified: 1\"></a>Expected lines modified: 1</h4><p><img src=\"/images/Pastedimage20250615170843.png\" alt=\"Pasted20image2020250615170843\"><br>跳转到<code>BeeCountingStage.java:54</code>,看到：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">this</span>.input.add(input);</span><br></pre></td></tr></table></figure>\n<p>也就是这个类有一个input变量和input局部变量，<code>because &quot;this.input&quot; is null</code>看起来应该是<code>this.input</code>的问题，向上看到：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.List; <span class=\"comment\">// this.input是个List类</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">private</span> List&lt;String&gt; input; <span class=\"comment\">// 猜对了，有声明</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">BeeCountingStage</span><span class=\"params\">(In in)</span> &#123;  </span><br><span class=\"line\">    <span class=\"built_in\">this</span>.in = in;  </span><br><span class=\"line\">    <span class=\"built_in\">this</span>.responses = Map.of(<span class=\"string\">&quot;go&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">SpeciesListStage</span>(in));  <span class=\"comment\">// 没有实例化</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"built_in\">this</span>.input.add(input); <span class=\"comment\">// this.input应该是个List类(毕竟目前只讲到这个),看看引入的工具包</span></span><br></pre></td></tr></table></figure>\n<p>那加个实例化就好了，这里卡了我好一会，不明白官方怎么做到只改一行代码的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList; <span class=\"comment\">// 加上</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">BeeCountingStage</span><span class=\"params\">(In in)</span> &#123;  </span><br><span class=\"line\">    <span class=\"built_in\">this</span>.in = in;  </span><br><span class=\"line\">    <span class=\"built_in\">this</span>.responses = Map.of(<span class=\"string\">&quot;go&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">SpeciesListStage</span>(in));  </span><br><span class=\"line\">    <span class=\"built_in\">this</span>.input = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(); <span class=\"comment\">// 加上</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Expected-lines-modified-1-1\"><a href=\"#Expected-lines-modified-1-1\" class=\"headerlink\" title=\"Expected lines modified: 1\"></a>Expected lines modified: 1</h4><p><img src=\"/images/Pastedimage20250615172020.png\" alt=\"Pasted image 20250615172020.png\"><br>简单的超出索引异常，这里比较不同的是不能根据堆栈跟踪的第一行直接判断出错的位置，只能通过调试工具找，最终修改：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"title function_\">sumInput</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">this</span>.input.size(); i++) &#123;  </span><br><span class=\"line\">    <span class=\"comment\">// 这里的 i &lt;= this.input.size() 就是导致异常的原因</span></span><br><span class=\"line\">        sum += Integer.parseInt(<span class=\"built_in\">this</span>.input.get(i));  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改之后就可以通过测试了：<br><img src=\"/images/Pastedimage20250615172423.png\" alt=\"Pasted image 20250615172423.png\"></p>\n<p>复盘时看到官方说：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">修正SpeciesListStage中的错误。如果你在发生异常的方法内部（堆栈跟踪的第一行）没有发现问题所在，通常查看第二行，了解该方法是从何处被调用以及使用了哪些参数，这是个不错的办法。 </span><br></pre></td></tr></table></figure>\n<p>回去看了看出错点，的确就在下面的第三行有提到。</p>\n<h3 id=\"Debug-PalindromeStage\"><a href=\"#Debug-PalindromeStage\" class=\"headerlink\" title=\"Debug PalindromeStage\"></a>Debug <code>PalindromeStage</code></h3><h4 id=\"Expected-lines-modified-3\"><a href=\"#Expected-lines-modified-3\" class=\"headerlink\" title=\"Expected lines modified: 3\"></a>Expected lines modified: 3</h4><p><img src=\"/images/Pastedimage20250615173326.png\" alt=\"Pasted image 20250615173326.png\"><br>查了下含义，是算术异常，表示程序尝试执行<strong>除以零</strong>的操作。<br>直接跳转到<code>SpeciesListStage.java:102</code>，改一下就好：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">arraySimilarity</span><span class=\"params\">(List&lt;String&gt; listOne, List&lt;String&gt; listTwo)</span> &#123;  </span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String o : listTwo) &#123;  </span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (similarObjects &gt; <span class=\"number\">0</span>) &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;  </span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"comment\">//return similarObjects / listOne.size();  </span></span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"Expected-lines-modified-2-5\"><a href=\"#Expected-lines-modified-2-5\" class=\"headerlink\" title=\"Expected lines modified: 2-5\"></a>Expected lines modified: 2-5</h4><p><img src=\"/images/Pastedimage20250615175444.png\" alt=\"Pasted image 20250615175444.png\"><br>跳转到：<br><img src=\"/images/Pastedimage20250615175613.png\" alt=\"Pasted image 20250615175613.png\"><br>先<code>Ctl+F</code>找一下<code>Preconditions</code>类，发现是引入的工具包，那直接一整个复制搜索的大操作，然后从这里开始调试，但是会发现很多次返回错误点，那就很难判断到底是哪次的错误了，于是点开被折叠的堆栈跟踪。<br><img src=\"/images/Pastedimage20250615211618.png\" alt=\"Pasted image 20250615211618.png\"><br>从第一条蓝色标注的开始看(虽然不知道什么原理，但是从上面的经验来看，标蓝的最有可能)<br>后来复盘时查了下，写在下面：</p>\n<ul>\n<li>在 IDE的报错堆栈信息里，标蓝的部分一般是<strong>与你当前项目代码直接相关的类和方法</strong> ，也就是你自己编写的代码文件里的内容，方便你快速定位到项目中出错的具体位置</li>\n<li>不标蓝的，是 <strong>JDK 内部的类和方法</strong> 。这些属于 Java 标准库的代码，不是你项目里自己写的代码。IDE 通常不会把它们标蓝突出显示，因为一般情况下，我们不会去修改 JDK 源码，主要是聚焦在自己项目代码里找问题，它们更多是辅助说明错误发生时的调用链路。<br>然后点旁边的灯泡，会看到提示：<br><img src=\"/images/Pastedimage20250615184116.png\" alt=\"Pasted image 20250615184116.png\"><br>这个比较好改，仔细点就行：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> IntList <span class=\"title function_\">digitsToIntList</span><span class=\"params\">(String s)</span> &#123; </span><br><span class=\"line\">    <span class=\"type\">int</span>[] a = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[s.length()];  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> s.length(); i &gt;= <span class=\"number\">1</span>; i--) &#123;  </span><br><span class=\"line\">        a[s.length() - i] = Character.getNumericValue(s.charAt(i-<span class=\"number\">1</span>));  </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> IntList.of(a);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>接下来先看官方提示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果你还没有，请通读上面的注释。查看调用`digitsToIntList`的方法。如果你在该方法中设置断点并通过调试器运行，我们是否曾经退出`while`循环？我们需要满足什么条件才能跳出`while`循环？这个条件是否得到满足？尝试结合使用Java可视化工具，这样你就可以借助可视化工具更仔细地检查这个错误。</span><br></pre></td></tr></table></figure>\n<p>直接<code>ctl+F</code>找到调用<code>digitsToIntList</code> 的方法<code>playStage</code>，大概看一遍就能找到第一个比较明显的错误：<br><img src=\"/images/Pastedimage20250615213033.png\" alt=\"Pasted image 20250615213033.png\"><br>一看就是死循环的料，我的修改方案是引入一个<code>boolean</code>值：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">finish</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;  <span class=\"comment\">// 修改</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!finish) &#123;  <span class=\"comment\">// 修改</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!AdventureUtils.isInt(input)) &#123;  </span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (numLst.equals(reversedLst)) &#123;  </span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Wow, nice room number!&quot;</span>);  </span><br><span class=\"line\">            finish = <span class=\"literal\">true</span>;  <span class=\"comment\">// 修改</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>之后在运行就会一直进入死循环：<br><img src=\"/images/Pastedimage20250615213603.png\" alt=\"Pasted image 20250615213603.png\"><br>通过调试工具发现问题在45行，结果一直为<code>false</code>:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (numLst.equals(reversedLst)) &#123;  </span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Wow, nice room number!&quot;</span>);  </span><br><span class=\"line\">    finish = <span class=\"literal\">true</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>就是这里卡了我好久，一个个说：<br>首先是：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">playStage</span><span class=\"params\">()</span> &#123; </span><br><span class=\"line\">        ...</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!finish) &#123;  </span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">input</span> <span class=\"operator\">=</span> in.readLine();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!AdventureUtils.isInt(input)) &#123;  </span><br><span class=\"line\">            ...</span><br><span class=\"line\">            input = <span class=\"built_in\">this</span>.in.readLine();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我不理解<code>in.readLine()</code>到底是什么，找资料可以知道这是’读取输入流从当前位置到下一行结束符（\\n、\\r或\\r\\n）的所有字符，并返回为字符串’的作用，但是我没有找到什么<code>输入流</code>，调试工具里看它们也是突然冒出来的，后来我以为<code>输入流</code>指的是开始时输出的一大串，然后通过调试工具发现，<code>input</code>的值和我预期的不同：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input值的变化：&#x27;404&#x27;-&gt;&#x27;va cafe&#x27;-&gt;&#x27;go&#x27;-&gt;&#x27;null&#x27;-&gt;一直为&#x27;null&#x27;</span><br></pre></td></tr></table></figure>\n<p>所以我的猜想是错的，后来我猜想这个程序是找到回文数的目的，那会不会准确的程序应该在<code>input = 404</code>时就结束，后来通过调试根据发现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">equals</span><span class=\"params\">(Object other)</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (other <span class=\"keyword\">instanceof</span> IntList oL) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (first != oL.first) &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;  <span class=\"comment\">//本来改反悔true的值，却返回false</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rest == <span class=\"literal\">null</span> &amp;&amp; oL.rest == <span class=\"literal\">null</span>) &#123;  </span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rest != <span class=\"literal\">null</span> &amp;&amp; oL.rest != <span class=\"literal\">null</span>) &#123;  </span><br><span class=\"line\">            ...  </span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">            ... </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后只要把对应的<code>return false;</code>改成<code>return true;</code>就行了。</p>\n<p>复盘时，关于<code>输入流</code>,我想到个有意思的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ReadLineExample</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1. 第1次打印提示（仅输出，不阻塞）</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;请输入一行文本：&quot;</span>);  </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 2. 创建Scanner（初始化扫描器，不触发输入）</span></span><br><span class=\"line\">        <span class=\"type\">Scanner</span> <span class=\"variable\">scanner</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in); </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 3. 第2次打印提示（仅输出，不阻塞）</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;请输入一行文本：&quot;</span>);  </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 4. 第3次打印提示（仅输出，不阻塞）</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;请输入一行文本：&quot;</span>);  <span class=\"comment\">// 第六行代码</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 5. 关键：仅读取1次用户输入！</span></span><br><span class=\"line\">        <span class=\"comment\">// 程序会暂停，等待用户在控制台输入（无论前面打印多少次提示）</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">line</span> <span class=\"operator\">=</span> scanner.nextLine();  <span class=\"comment\">// 第七行代码</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 6. 输出结果</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;你输入的内容是：&quot;</span> + line);</span><br><span class=\"line\">        scanner.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果在计算机刚刚读取完第六行代码(上面代码里标注的一行)，在读取第七行前输入，那是不是就会卡bug了，用户的输入信息丢失。<br>查了下，遗憾地发现不会：<br>即使 “计算机刚刚读完第 6 行还没执行第 7 行”，用户此时在控制台输入内容：</p>\n<ul>\n<li>输入的内容会被<strong>暂存到系统的输入缓冲区</strong>（属于 <code>System.in</code> 的一部分），不会丢失。</li>\n<li>当程序执行到 <code>scanner.nextLine()</code> 时，会直接从缓冲区读取用户输入的内容，程序继续执行。</li>\n</ul>\n<h3 id=\"Debug-MachineStage\"><a href=\"#Debug-MachineStage\" class=\"headerlink\" title=\"Debug MachineStage\"></a>Debug <code>MachineStage</code></h3><h4 id=\"Expected-lines-modified-2-5-1\"><a href=\"#Expected-lines-modified-2-5-1\" class=\"headerlink\" title=\"Expected lines modified: 2-5\"></a>Expected lines modified: 2-5</h4><p>这一块写的很顺利，逻辑也很流畅：<br>先运行一遍，通过调试工具的查看差异功能，定位到<code>machineResult</code>参数，通过参数的定义锁定<code>sumOfElementwiseMax(arrOne, arrTwo)</code>方法，在这里打上断点，开始调试：</p>\n<p><img src=\"/images/Pastedimage20250615223538.png\" alt=\"Pasted image 20250615223538.png\"><br>发现<code>maxes</code>数组错误，定位到<code>arrayMax</code>方法，打上断点，发现<code>biggerValue</code>错了：<br><img src=\"/images/Pastedimage20250615223111.png\" alt=\"Pasted image 20250615223111.png\"><br>定位到<code>mysteryMax</code>方法，重写方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">mysteryMax</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> &#123;  </span><br><span class=\"line\">    <span class=\"type\">int</span> max;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a &gt; b) &#123;  </span><br><span class=\"line\">        max = a;  </span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">        max = b;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> max;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>再运行程序，依然错，通过调试工具的查看差异功能，定位<code>machineResult</code>参数，再查看<code>sumOfElementwiseMax(arrOne, arrTwo)</code>方法，<code>maxes</code>数组没有问题，查看<code>arraySum</code>方法，通过调试工具发现<code>mysteryAdd</code>方法的错误，这里有个小坑，我一开始理所当然的以为<code>mysteryAdd</code>方法返回的应该时两数之和，但是运行错误，仔细看才发现不对：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">mysteryAdd</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> b;</span><br></pre></td></tr></table></figure>\n\n<p>最后运行程序成功：<br><img src=\"/images/Pastedimage20250615230527.png\" alt=\"Pasted image 20250615230527.png\"></p>\n<p>以上就是这次<code>Lab03</code>的内容。</p>\n"},{"title":"proj1a","date":"2025-06-15T16:00:00.000Z","cssclasses":["CS61B"],"_content":"**目标：** \n* 理解数据结构中辅助链表的使用。\n* 有使用测试和测试驱动开发来评估自己数据结构正确性的经验。\n\n我参考的结构：\n![Pastedimage20250617210149.png](/images/Pastedimage20250617210149.png)\n\n这个`proj1a` 整体不难，这个结构挺有意思的，我在写`python` 的时候用的结构都是头尾两个`sentinel`节点，第一次实现这个结构，发现这个结构更加优雅简单。\n\n---\n\n### JUnit Tests\n you’ll need to create a `Node` class and introduce one or more instance variables.\n\n刚开始我希望实现一个基于数组的链表：\n![Pastedimage20250616212809.png](/images/Pastedimage20250616212809.png)\n提示运行错误：\n![[Pastedimage20250616212818.png]](/images/Pastedimage20250616212818.png)\n我发现应该是要实现一个双链表结构(认真读题真的很重要)：\n![[Pastedimage20250616213051.png]](/images/Pastedimage20250616213051.png)\n提示：\n![[Pastedimage20250616213103.png]](/images/Pastedimage20250616213103.png)\n就是内部类`Node`不该自己搞泛型，用外部类的泛型，把内部类的泛型声明去掉 ：\n![[Pastedimage20250616213139.png]](/images/Pastedimage20250616213139.png)\n\n[707. 设计链表 - 力扣](https://leetcode.cn/problems/design-linked-list/submissions/603212018/)参考了下这个。\n\n### Writing and Verifying \n下面都是先编写测试，然后实现它，就是“测试驱动开发”。我不详细写了，写一些有意思的：\n### The Remaining Methods\n[Truth测试库](https://truth.dev/api/latest/index.html?overview-summary.html)\n这里要求用递归实现`get()`方法：\n```java\n    @Override  \n    public T getRecursive(int index) {  \n        if (index >= this.length || index < 0) {  \n            return null;  \n        } else {  \n            List<T> lst = toList();  \n            return getRecindex(lst,index);  \n            }  \n        }  \n  \n    public T getRecindex(List<T> lst,int idx) {  \n        if (idx == 0) {  \n            return lst.get(idx);  \n        }else {  \n            List<T> newLst = lst.subList(1,lst.size());  \n            getRecindex(newLst,idx-1);  \n        }  \n        return null;  \n    }  \n}\n```\n然后测试一直返回`null`:\n![[Pastedimage20250619132929.png]](/images/Pastedimage20250619132929.png)\n其实是老毛病了，写`python`的时候也经常犯，递归调用的返回值被直接丢弃了，方法最终会执行 return null;。因此，无论递归过程中是否正确找到了目标元素，最终都会返回 null。  \n```java\n@Override  \npublic T getRecursive(int index) {  \n    if (index >= this.length || index < 0) {  \n        return null;  \n    } else {  \n        List<T> lst = toList();  \n        return getRecindex(lst,index);  \n        }  \n    }  \n  \npublic T getRecindex(List<T> lst,int idx) {  \n    if (idx == 0) {  \n        return lst.get(idx);  \n    }else {  \n        List<T> newLst = lst.subList(1,lst.size());  \n        // getRecindex(newLst,idx-1); \n        return getRecindex(newLst,idx-1);  \n    }  \n}\n```\n最后放个胜利结算画面\n![[Pastedimage20250619142148.png]](/images/Pastedimage20250619142148.png)","source":"CS61B/proj1a.md","raw":"---\ntitle: proj1a\ndate: 2025-06-16\ncssclasses:\n  - CS61B\n---\n**目标：** \n* 理解数据结构中辅助链表的使用。\n* 有使用测试和测试驱动开发来评估自己数据结构正确性的经验。\n\n我参考的结构：\n![Pastedimage20250617210149.png](/images/Pastedimage20250617210149.png)\n\n这个`proj1a` 整体不难，这个结构挺有意思的，我在写`python` 的时候用的结构都是头尾两个`sentinel`节点，第一次实现这个结构，发现这个结构更加优雅简单。\n\n---\n\n### JUnit Tests\n you’ll need to create a `Node` class and introduce one or more instance variables.\n\n刚开始我希望实现一个基于数组的链表：\n![Pastedimage20250616212809.png](/images/Pastedimage20250616212809.png)\n提示运行错误：\n![[Pastedimage20250616212818.png]](/images/Pastedimage20250616212818.png)\n我发现应该是要实现一个双链表结构(认真读题真的很重要)：\n![[Pastedimage20250616213051.png]](/images/Pastedimage20250616213051.png)\n提示：\n![[Pastedimage20250616213103.png]](/images/Pastedimage20250616213103.png)\n就是内部类`Node`不该自己搞泛型，用外部类的泛型，把内部类的泛型声明去掉 ：\n![[Pastedimage20250616213139.png]](/images/Pastedimage20250616213139.png)\n\n[707. 设计链表 - 力扣](https://leetcode.cn/problems/design-linked-list/submissions/603212018/)参考了下这个。\n\n### Writing and Verifying \n下面都是先编写测试，然后实现它，就是“测试驱动开发”。我不详细写了，写一些有意思的：\n### The Remaining Methods\n[Truth测试库](https://truth.dev/api/latest/index.html?overview-summary.html)\n这里要求用递归实现`get()`方法：\n```java\n    @Override  \n    public T getRecursive(int index) {  \n        if (index >= this.length || index < 0) {  \n            return null;  \n        } else {  \n            List<T> lst = toList();  \n            return getRecindex(lst,index);  \n            }  \n        }  \n  \n    public T getRecindex(List<T> lst,int idx) {  \n        if (idx == 0) {  \n            return lst.get(idx);  \n        }else {  \n            List<T> newLst = lst.subList(1,lst.size());  \n            getRecindex(newLst,idx-1);  \n        }  \n        return null;  \n    }  \n}\n```\n然后测试一直返回`null`:\n![[Pastedimage20250619132929.png]](/images/Pastedimage20250619132929.png)\n其实是老毛病了，写`python`的时候也经常犯，递归调用的返回值被直接丢弃了，方法最终会执行 return null;。因此，无论递归过程中是否正确找到了目标元素，最终都会返回 null。  \n```java\n@Override  \npublic T getRecursive(int index) {  \n    if (index >= this.length || index < 0) {  \n        return null;  \n    } else {  \n        List<T> lst = toList();  \n        return getRecindex(lst,index);  \n        }  \n    }  \n  \npublic T getRecindex(List<T> lst,int idx) {  \n    if (idx == 0) {  \n        return lst.get(idx);  \n    }else {  \n        List<T> newLst = lst.subList(1,lst.size());  \n        // getRecindex(newLst,idx-1); \n        return getRecindex(newLst,idx-1);  \n    }  \n}\n```\n最后放个胜利结算画面\n![[Pastedimage20250619142148.png]](/images/Pastedimage20250619142148.png)","updated":"2025-06-27T13:31:57.306Z","path":"CS61B/proj1a.html","comments":1,"layout":"page","_id":"cmd63a8ct000ak8v3g7io1woo","content":"<p><strong>目标：</strong> </p>\n<ul>\n<li>理解数据结构中辅助链表的使用。</li>\n<li>有使用测试和测试驱动开发来评估自己数据结构正确性的经验。</li>\n</ul>\n<p>我参考的结构：<br><img src=\"/images/Pastedimage20250617210149.png\" alt=\"Pastedimage20250617210149.png\"></p>\n<p>这个<code>proj1a</code> 整体不难，这个结构挺有意思的，我在写<code>python</code> 的时候用的结构都是头尾两个<code>sentinel</code>节点，第一次实现这个结构，发现这个结构更加优雅简单。</p>\n<hr>\n<h3 id=\"JUnit-Tests\"><a href=\"#JUnit-Tests\" class=\"headerlink\" title=\"JUnit Tests\"></a>JUnit Tests</h3><p> you’ll need to create a <code>Node</code> class and introduce one or more instance variables.</p>\n<p>刚开始我希望实现一个基于数组的链表：<br><img src=\"/images/Pastedimage20250616212809.png\" alt=\"Pastedimage20250616212809.png\"><br>提示运行错误：<br><img src=\"/images/Pastedimage20250616212818.png\" alt=\"[Pastedimage20250616212818.png]\"><br>我发现应该是要实现一个双链表结构(认真读题真的很重要)：<br><img src=\"/images/Pastedimage20250616213051.png\" alt=\"[Pastedimage20250616213051.png]\"><br>提示：<br><img src=\"/images/Pastedimage20250616213103.png\" alt=\"[Pastedimage20250616213103.png]\"><br>就是内部类<code>Node</code>不该自己搞泛型，用外部类的泛型，把内部类的泛型声明去掉 ：<br><img src=\"/images/Pastedimage20250616213139.png\" alt=\"[Pastedimage20250616213139.png]\"></p>\n<p><a href=\"https://leetcode.cn/problems/design-linked-list/submissions/603212018/\">707. 设计链表 - 力扣</a>参考了下这个。</p>\n<h3 id=\"Writing-and-Verifying\"><a href=\"#Writing-and-Verifying\" class=\"headerlink\" title=\"Writing and Verifying\"></a>Writing and Verifying</h3><p>下面都是先编写测试，然后实现它，就是“测试驱动开发”。我不详细写了，写一些有意思的：</p>\n<h3 id=\"The-Remaining-Methods\"><a href=\"#The-Remaining-Methods\" class=\"headerlink\" title=\"The Remaining Methods\"></a>The Remaining Methods</h3><p><a href=\"https://truth.dev/api/latest/index.html?overview-summary.html\">Truth测试库</a><br>这里要求用递归实现<code>get()</code>方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> T <span class=\"title function_\">getRecursive</span><span class=\"params\">(<span class=\"type\">int</span> index)</span> &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &gt;= <span class=\"built_in\">this</span>.length || index &lt; <span class=\"number\">0</span>) &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;  </span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">            List&lt;T&gt; lst = toList();  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> getRecindex(lst,index);  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> T <span class=\"title function_\">getRecindex</span><span class=\"params\">(List&lt;T&gt; lst,<span class=\"type\">int</span> idx)</span> &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (idx == <span class=\"number\">0</span>) &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> lst.get(idx);  </span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">            List&lt;T&gt; newLst = lst.subList(<span class=\"number\">1</span>,lst.size());  </span><br><span class=\"line\">            getRecindex(newLst,idx-<span class=\"number\">1</span>);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后测试一直返回<code>null</code>:<br><img src=\"/images/Pastedimage20250619132929.png\" alt=\"[Pastedimage20250619132929.png]\"><br>其实是老毛病了，写<code>python</code>的时候也经常犯，递归调用的返回值被直接丢弃了，方法最终会执行 return null;。因此，无论递归过程中是否正确找到了目标元素，最终都会返回 null。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> T <span class=\"title function_\">getRecursive</span><span class=\"params\">(<span class=\"type\">int</span> index)</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index &gt;= <span class=\"built_in\">this</span>.length || index &lt; <span class=\"number\">0</span>) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;  </span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">        List&lt;T&gt; lst = toList();  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> getRecindex(lst,index);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">public</span> T <span class=\"title function_\">getRecindex</span><span class=\"params\">(List&lt;T&gt; lst,<span class=\"type\">int</span> idx)</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (idx == <span class=\"number\">0</span>) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> lst.get(idx);  </span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">        List&lt;T&gt; newLst = lst.subList(<span class=\"number\">1</span>,lst.size());  </span><br><span class=\"line\">        <span class=\"comment\">// getRecindex(newLst,idx-1); </span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> getRecindex(newLst,idx-<span class=\"number\">1</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后放个胜利结算画面<br><img src=\"/images/Pastedimage20250619142148.png\" alt=\"[Pastedimage20250619142148.png]\"></p>\n","excerpt":"","more":"<p><strong>目标：</strong> </p>\n<ul>\n<li>理解数据结构中辅助链表的使用。</li>\n<li>有使用测试和测试驱动开发来评估自己数据结构正确性的经验。</li>\n</ul>\n<p>我参考的结构：<br><img src=\"/images/Pastedimage20250617210149.png\" alt=\"Pastedimage20250617210149.png\"></p>\n<p>这个<code>proj1a</code> 整体不难，这个结构挺有意思的，我在写<code>python</code> 的时候用的结构都是头尾两个<code>sentinel</code>节点，第一次实现这个结构，发现这个结构更加优雅简单。</p>\n<hr>\n<h3 id=\"JUnit-Tests\"><a href=\"#JUnit-Tests\" class=\"headerlink\" title=\"JUnit Tests\"></a>JUnit Tests</h3><p> you’ll need to create a <code>Node</code> class and introduce one or more instance variables.</p>\n<p>刚开始我希望实现一个基于数组的链表：<br><img src=\"/images/Pastedimage20250616212809.png\" alt=\"Pastedimage20250616212809.png\"><br>提示运行错误：<br><img src=\"/images/Pastedimage20250616212818.png\" alt=\"[Pastedimage20250616212818.png]\"><br>我发现应该是要实现一个双链表结构(认真读题真的很重要)：<br><img src=\"/images/Pastedimage20250616213051.png\" alt=\"[Pastedimage20250616213051.png]\"><br>提示：<br><img src=\"/images/Pastedimage20250616213103.png\" alt=\"[Pastedimage20250616213103.png]\"><br>就是内部类<code>Node</code>不该自己搞泛型，用外部类的泛型，把内部类的泛型声明去掉 ：<br><img src=\"/images/Pastedimage20250616213139.png\" alt=\"[Pastedimage20250616213139.png]\"></p>\n<p><a href=\"https://leetcode.cn/problems/design-linked-list/submissions/603212018/\">707. 设计链表 - 力扣</a>参考了下这个。</p>\n<h3 id=\"Writing-and-Verifying\"><a href=\"#Writing-and-Verifying\" class=\"headerlink\" title=\"Writing and Verifying\"></a>Writing and Verifying</h3><p>下面都是先编写测试，然后实现它，就是“测试驱动开发”。我不详细写了，写一些有意思的：</p>\n<h3 id=\"The-Remaining-Methods\"><a href=\"#The-Remaining-Methods\" class=\"headerlink\" title=\"The Remaining Methods\"></a>The Remaining Methods</h3><p><a href=\"https://truth.dev/api/latest/index.html?overview-summary.html\">Truth测试库</a><br>这里要求用递归实现<code>get()</code>方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> T <span class=\"title function_\">getRecursive</span><span class=\"params\">(<span class=\"type\">int</span> index)</span> &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &gt;= <span class=\"built_in\">this</span>.length || index &lt; <span class=\"number\">0</span>) &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;  </span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">            List&lt;T&gt; lst = toList();  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> getRecindex(lst,index);  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> T <span class=\"title function_\">getRecindex</span><span class=\"params\">(List&lt;T&gt; lst,<span class=\"type\">int</span> idx)</span> &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (idx == <span class=\"number\">0</span>) &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> lst.get(idx);  </span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">            List&lt;T&gt; newLst = lst.subList(<span class=\"number\">1</span>,lst.size());  </span><br><span class=\"line\">            getRecindex(newLst,idx-<span class=\"number\">1</span>);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后测试一直返回<code>null</code>:<br><img src=\"/images/Pastedimage20250619132929.png\" alt=\"[Pastedimage20250619132929.png]\"><br>其实是老毛病了，写<code>python</code>的时候也经常犯，递归调用的返回值被直接丢弃了，方法最终会执行 return null;。因此，无论递归过程中是否正确找到了目标元素，最终都会返回 null。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> T <span class=\"title function_\">getRecursive</span><span class=\"params\">(<span class=\"type\">int</span> index)</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index &gt;= <span class=\"built_in\">this</span>.length || index &lt; <span class=\"number\">0</span>) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;  </span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">        List&lt;T&gt; lst = toList();  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> getRecindex(lst,index);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">public</span> T <span class=\"title function_\">getRecindex</span><span class=\"params\">(List&lt;T&gt; lst,<span class=\"type\">int</span> idx)</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (idx == <span class=\"number\">0</span>) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> lst.get(idx);  </span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">        List&lt;T&gt; newLst = lst.subList(<span class=\"number\">1</span>,lst.size());  </span><br><span class=\"line\">        <span class=\"comment\">// getRecindex(newLst,idx-1); </span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> getRecindex(newLst,idx-<span class=\"number\">1</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后放个胜利结算画面<br><img src=\"/images/Pastedimage20250619142148.png\" alt=\"[Pastedimage20250619142148.png]\"></p>\n"},{"title":"proj1b","date":"2025-06-26T16:00:00.000Z","cssclasses":["CS61B"],"_content":"---\n本来没打算写这篇博客的，但是这里的扩/缩容挺有意思的，于是就简单写写\n\n---\n\n**目标：** \n* 理解数据结构中后备数组的实现。\n* 通过测试和测试驱动开发来验证这些数据结构的正确性，获得更多经验。  \n\n这次的`proj`就是实现一个循环数组，这里不放图了\n\n---\n#### Resizing Up \n\n扩/缩容的底层逻辑就是新建一个数组，把旧数组的数据迁移过去就好了。\n不过我写的不太优雅，这里不多解释，只是浅浅提一下要注意的地方\n\n```java\npublic class ArrayDeque61B<T> implements Deque61B<T> {  \n    int size;  \n    int nextFirst;  \n    int nextLast;  \n    T[] lst;  \n  \n    public ArrayDeque61B() {  \n        this.size = 0;  \n        this.nextFirst = 0;  \n        this.nextLast = 1;  \n        this.lst = (T[]) new Object[8];  \n    }\n```\n\n```java \n// 扩容\nif (((double) this.lst.length / this.size) < 1.7) {  \n    T[] lst1 = (T[]) new Object[2 * this.lst.length];  \n    for (int i = 1; i < this.lst.length; i++ ) {  \n        lst1[i] = this.lst[ Math.floorMod((this.nextFirst + i), this.lst.length)]; \n    }  \n    this.lst = lst1;  \n    lst1 = null;  \n    this.nextLast = this.size + 1; // 插入从索引1开始  \n    this.nextFirst = 0;  \n}\n```\n\n* `if ((this.lst.length / this.size) > 0.6)`: \n\t* `/ 运算符`:当两个操作数均为整数类型（如 `int`、`long`）时，会自动截断小数部分，返回整数商。\n\t* `((double) ...)`: 将数组容量转换为 double 类型，避免整数除法截断小数部分。\n* ` for (int i = 1; i < this.lst.length; i++ )`: 理论上应该不会发生当`i`遍历到`this.nextLast`后，添加入本不应该包含的元素(删除时没有更改元素值位`null`,只是移动了`this.nestLast`),但是保险起见还是像下面缩容的写法最好\n* `lst1 = null;`: 释放内存  \n* `this.nextLast = ... ; this.nextFirst = ... ;`： 注意要改,最好和声明时保持一致，不然测试很麻烦\n\n\n```java \n// 缩容\nif (((double)this.lst.length / this.size) > 3) {\n    int num = Math.max(this.lst.length / 2 ,3);\n    T[] lst2 = (T[]) new Object[num];\n    for (int i = 1; i <= this.size + 1; i++) {\n        lst2[i] = this.lst[Math.floorMod((this.nextFirst + i),this.lst.length)];\n    }\n    this.lst = lst2;\n    lst2 = null;\n    this.nextLast = this.size + 1;\n    this.nextFirst = 0;\n}\n```\n\n* 这里上面扩容差不多，就不多写了","source":"CS61B/proj1b.md","raw":"---\ntitle: proj1b\ndate: 2025-06-27\ncssclasses:\n  - CS61B\n---\n---\n本来没打算写这篇博客的，但是这里的扩/缩容挺有意思的，于是就简单写写\n\n---\n\n**目标：** \n* 理解数据结构中后备数组的实现。\n* 通过测试和测试驱动开发来验证这些数据结构的正确性，获得更多经验。  \n\n这次的`proj`就是实现一个循环数组，这里不放图了\n\n---\n#### Resizing Up \n\n扩/缩容的底层逻辑就是新建一个数组，把旧数组的数据迁移过去就好了。\n不过我写的不太优雅，这里不多解释，只是浅浅提一下要注意的地方\n\n```java\npublic class ArrayDeque61B<T> implements Deque61B<T> {  \n    int size;  \n    int nextFirst;  \n    int nextLast;  \n    T[] lst;  \n  \n    public ArrayDeque61B() {  \n        this.size = 0;  \n        this.nextFirst = 0;  \n        this.nextLast = 1;  \n        this.lst = (T[]) new Object[8];  \n    }\n```\n\n```java \n// 扩容\nif (((double) this.lst.length / this.size) < 1.7) {  \n    T[] lst1 = (T[]) new Object[2 * this.lst.length];  \n    for (int i = 1; i < this.lst.length; i++ ) {  \n        lst1[i] = this.lst[ Math.floorMod((this.nextFirst + i), this.lst.length)]; \n    }  \n    this.lst = lst1;  \n    lst1 = null;  \n    this.nextLast = this.size + 1; // 插入从索引1开始  \n    this.nextFirst = 0;  \n}\n```\n\n* `if ((this.lst.length / this.size) > 0.6)`: \n\t* `/ 运算符`:当两个操作数均为整数类型（如 `int`、`long`）时，会自动截断小数部分，返回整数商。\n\t* `((double) ...)`: 将数组容量转换为 double 类型，避免整数除法截断小数部分。\n* ` for (int i = 1; i < this.lst.length; i++ )`: 理论上应该不会发生当`i`遍历到`this.nextLast`后，添加入本不应该包含的元素(删除时没有更改元素值位`null`,只是移动了`this.nestLast`),但是保险起见还是像下面缩容的写法最好\n* `lst1 = null;`: 释放内存  \n* `this.nextLast = ... ; this.nextFirst = ... ;`： 注意要改,最好和声明时保持一致，不然测试很麻烦\n\n\n```java \n// 缩容\nif (((double)this.lst.length / this.size) > 3) {\n    int num = Math.max(this.lst.length / 2 ,3);\n    T[] lst2 = (T[]) new Object[num];\n    for (int i = 1; i <= this.size + 1; i++) {\n        lst2[i] = this.lst[Math.floorMod((this.nextFirst + i),this.lst.length)];\n    }\n    this.lst = lst2;\n    lst2 = null;\n    this.nextLast = this.size + 1;\n    this.nextFirst = 0;\n}\n```\n\n* 这里上面扩容差不多，就不多写了","updated":"2025-06-28T03:55:50.039Z","path":"CS61B/proj1b.html","comments":1,"layout":"page","_id":"cmd63a8ct000ck8v3b8bt9q08","content":"<hr>\n<p>本来没打算写这篇博客的，但是这里的扩&#x2F;缩容挺有意思的，于是就简单写写</p>\n<hr>\n<p><strong>目标：</strong> </p>\n<ul>\n<li>理解数据结构中后备数组的实现。</li>\n<li>通过测试和测试驱动开发来验证这些数据结构的正确性，获得更多经验。</li>\n</ul>\n<p>这次的<code>proj</code>就是实现一个循环数组，这里不放图了</p>\n<hr>\n<h4 id=\"Resizing-Up\"><a href=\"#Resizing-Up\" class=\"headerlink\" title=\"Resizing Up\"></a>Resizing Up</h4><p>扩&#x2F;缩容的底层逻辑就是新建一个数组，把旧数组的数据迁移过去就好了。<br>不过我写的不太优雅，这里不多解释，只是浅浅提一下要注意的地方</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ArrayDeque61B</span>&lt;T&gt; <span class=\"keyword\">implements</span> <span class=\"title class_\">Deque61B</span>&lt;T&gt; &#123;  </span><br><span class=\"line\">    <span class=\"type\">int</span> size;  </span><br><span class=\"line\">    <span class=\"type\">int</span> nextFirst;  </span><br><span class=\"line\">    <span class=\"type\">int</span> nextLast;  </span><br><span class=\"line\">    T[] lst;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ArrayDeque61B</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">        <span class=\"built_in\">this</span>.size = <span class=\"number\">0</span>;  </span><br><span class=\"line\">        <span class=\"built_in\">this</span>.nextFirst = <span class=\"number\">0</span>;  </span><br><span class=\"line\">        <span class=\"built_in\">this</span>.nextLast = <span class=\"number\">1</span>;  </span><br><span class=\"line\">        <span class=\"built_in\">this</span>.lst = (T[]) <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[<span class=\"number\">8</span>];  </span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 扩容</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (((<span class=\"type\">double</span>) <span class=\"built_in\">this</span>.lst.length / <span class=\"built_in\">this</span>.size) &lt; <span class=\"number\">1.7</span>) &#123;  </span><br><span class=\"line\">    T[] lst1 = (T[]) <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[<span class=\"number\">2</span> * <span class=\"built_in\">this</span>.lst.length];  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; <span class=\"built_in\">this</span>.lst.length; i++ ) &#123;  </span><br><span class=\"line\">        lst1[i] = <span class=\"built_in\">this</span>.lst[ Math.floorMod((<span class=\"built_in\">this</span>.nextFirst + i), <span class=\"built_in\">this</span>.lst.length)]; </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"built_in\">this</span>.lst = lst1;  </span><br><span class=\"line\">    lst1 = <span class=\"literal\">null</span>;  </span><br><span class=\"line\">    <span class=\"built_in\">this</span>.nextLast = <span class=\"built_in\">this</span>.size + <span class=\"number\">1</span>; <span class=\"comment\">// 插入从索引1开始  </span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.nextFirst = <span class=\"number\">0</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>if ((this.lst.length / this.size) &gt; 0.6)</code>: <ul>\n<li><code>/ 运算符</code>:当两个操作数均为整数类型（如 <code>int</code>、<code>long</code>）时，会自动截断小数部分，返回整数商。</li>\n<li><code>((double) ...)</code>: 将数组容量转换为 double 类型，避免整数除法截断小数部分。</li>\n</ul>\n</li>\n<li><code> for (int i = 1; i &lt; this.lst.length; i++ )</code>: 理论上应该不会发生当<code>i</code>遍历到<code>this.nextLast</code>后，添加入本不应该包含的元素(删除时没有更改元素值位<code>null</code>,只是移动了<code>this.nestLast</code>),但是保险起见还是像下面缩容的写法最好</li>\n<li><code>lst1 = null;</code>: 释放内存  </li>\n<li><code>this.nextLast = ... ; this.nextFirst = ... ;</code>： 注意要改,最好和声明时保持一致，不然测试很麻烦</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 缩容</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (((<span class=\"type\">double</span>)<span class=\"built_in\">this</span>.lst.length / <span class=\"built_in\">this</span>.size) &gt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> Math.max(<span class=\"built_in\">this</span>.lst.length / <span class=\"number\">2</span> ,<span class=\"number\">3</span>);</span><br><span class=\"line\">    T[] lst2 = (T[]) <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[num];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt;= <span class=\"built_in\">this</span>.size + <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        lst2[i] = <span class=\"built_in\">this</span>.lst[Math.floorMod((<span class=\"built_in\">this</span>.nextFirst + i),<span class=\"built_in\">this</span>.lst.length)];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.lst = lst2;</span><br><span class=\"line\">    lst2 = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.nextLast = <span class=\"built_in\">this</span>.size + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.nextFirst = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>这里上面扩容差不多，就不多写了</li>\n</ul>\n","excerpt":"","more":"<hr>\n<p>本来没打算写这篇博客的，但是这里的扩&#x2F;缩容挺有意思的，于是就简单写写</p>\n<hr>\n<p><strong>目标：</strong> </p>\n<ul>\n<li>理解数据结构中后备数组的实现。</li>\n<li>通过测试和测试驱动开发来验证这些数据结构的正确性，获得更多经验。</li>\n</ul>\n<p>这次的<code>proj</code>就是实现一个循环数组，这里不放图了</p>\n<hr>\n<h4 id=\"Resizing-Up\"><a href=\"#Resizing-Up\" class=\"headerlink\" title=\"Resizing Up\"></a>Resizing Up</h4><p>扩&#x2F;缩容的底层逻辑就是新建一个数组，把旧数组的数据迁移过去就好了。<br>不过我写的不太优雅，这里不多解释，只是浅浅提一下要注意的地方</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ArrayDeque61B</span>&lt;T&gt; <span class=\"keyword\">implements</span> <span class=\"title class_\">Deque61B</span>&lt;T&gt; &#123;  </span><br><span class=\"line\">    <span class=\"type\">int</span> size;  </span><br><span class=\"line\">    <span class=\"type\">int</span> nextFirst;  </span><br><span class=\"line\">    <span class=\"type\">int</span> nextLast;  </span><br><span class=\"line\">    T[] lst;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ArrayDeque61B</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">        <span class=\"built_in\">this</span>.size = <span class=\"number\">0</span>;  </span><br><span class=\"line\">        <span class=\"built_in\">this</span>.nextFirst = <span class=\"number\">0</span>;  </span><br><span class=\"line\">        <span class=\"built_in\">this</span>.nextLast = <span class=\"number\">1</span>;  </span><br><span class=\"line\">        <span class=\"built_in\">this</span>.lst = (T[]) <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[<span class=\"number\">8</span>];  </span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 扩容</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (((<span class=\"type\">double</span>) <span class=\"built_in\">this</span>.lst.length / <span class=\"built_in\">this</span>.size) &lt; <span class=\"number\">1.7</span>) &#123;  </span><br><span class=\"line\">    T[] lst1 = (T[]) <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[<span class=\"number\">2</span> * <span class=\"built_in\">this</span>.lst.length];  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; <span class=\"built_in\">this</span>.lst.length; i++ ) &#123;  </span><br><span class=\"line\">        lst1[i] = <span class=\"built_in\">this</span>.lst[ Math.floorMod((<span class=\"built_in\">this</span>.nextFirst + i), <span class=\"built_in\">this</span>.lst.length)]; </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"built_in\">this</span>.lst = lst1;  </span><br><span class=\"line\">    lst1 = <span class=\"literal\">null</span>;  </span><br><span class=\"line\">    <span class=\"built_in\">this</span>.nextLast = <span class=\"built_in\">this</span>.size + <span class=\"number\">1</span>; <span class=\"comment\">// 插入从索引1开始  </span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.nextFirst = <span class=\"number\">0</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>if ((this.lst.length / this.size) &gt; 0.6)</code>: <ul>\n<li><code>/ 运算符</code>:当两个操作数均为整数类型（如 <code>int</code>、<code>long</code>）时，会自动截断小数部分，返回整数商。</li>\n<li><code>((double) ...)</code>: 将数组容量转换为 double 类型，避免整数除法截断小数部分。</li>\n</ul>\n</li>\n<li><code> for (int i = 1; i &lt; this.lst.length; i++ )</code>: 理论上应该不会发生当<code>i</code>遍历到<code>this.nextLast</code>后，添加入本不应该包含的元素(删除时没有更改元素值位<code>null</code>,只是移动了<code>this.nestLast</code>),但是保险起见还是像下面缩容的写法最好</li>\n<li><code>lst1 = null;</code>: 释放内存  </li>\n<li><code>this.nextLast = ... ; this.nextFirst = ... ;</code>： 注意要改,最好和声明时保持一致，不然测试很麻烦</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 缩容</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (((<span class=\"type\">double</span>)<span class=\"built_in\">this</span>.lst.length / <span class=\"built_in\">this</span>.size) &gt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> Math.max(<span class=\"built_in\">this</span>.lst.length / <span class=\"number\">2</span> ,<span class=\"number\">3</span>);</span><br><span class=\"line\">    T[] lst2 = (T[]) <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[num];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt;= <span class=\"built_in\">this</span>.size + <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        lst2[i] = <span class=\"built_in\">this</span>.lst[Math.floorMod((<span class=\"built_in\">this</span>.nextFirst + i),<span class=\"built_in\">this</span>.lst.length)];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.lst = lst2;</span><br><span class=\"line\">    lst2 = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.nextLast = <span class=\"built_in\">this</span>.size + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.nextFirst = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>这里上面扩容差不多，就不多写了</li>\n</ul>\n"},{"title":"proj0","date":"2025-06-13T16:00:00.000Z","cssclasses":"CS61B","_content":"这次的`proj` 整体挺简单的，让我惊讶的是相比CS61A，它会提示要用到的辅助方法，不需要像之前非得看完整个框架才能开始做，而且还有风格检查和`git` ,`GitHub` 相关，刚好弥补了我不知道该怎么练习的苦恼。 \n\n---\n\n这次的项目是一个叫[2048](https://play2048.co/) 的游戏。\n\n## Task 1: Empty Space Exists\n\n如果棋盘上有空格就返回true，否则放回false 。\n遍历就解决了：\n\n```java\npublic boolean emptySpaceExists() {  \n    for (int x = 0; x < board.size(); x++) {  \n        for (int y = 0; y < board.size(); y++) {  \n            if (board.tile(x, y) == null) { //空方块则返回null  \n                return true;  \n            }  \n        }  \n    }  \n    return false;  \n}\n```\n\n## Task 2: Max Tile Exists\n\n如果棋盘上的任何瓦片值为获胜值（MAX_PIECE = 2048），此方法应返回 true。\n同样是遍历，但是要注意获取瓦片值前要确保瓦片存在：\n\n```java\npublic boolean maxTileExists() {  \n    for (int x = 0; x < board.size(); x++) {  \n        for (int y = 0; y < board.size(); y++) {  \n            if ((board.tile(x, y) != null) && (board.tile(x, y).value() == MAX_PIECE)) {  \n                return true;  \n            }  \n        }  \n    }  \n    return false;  \n}\n```\n\n## Task 3: At Least One Move Exists\n\n如果存在任何有效的移动，这个方法应该返回 true。\n存在有效移动的两种方式：\n*  棋盘上至少有一个空格。\n* 棋盘上有两个相邻（它们之间可以有空格）且值相同的方块。\n\n第一种很好判断，直接丢给刚刚完成的`emptySpaceExists()` 就行，第二个条件我写的很丑...QAQ也是基于遍历，分成横向遍历和纵向遍历，它们接下来的步骤差不多：创建一个‘先行者’(`x1`,`y1`),比较基础瓦片和先行者的值。\n感觉这题有点像力扣的一道棋盘题，不过那个是判断达到最终结果的最少步数，用的多叉树解决的。\n\n```java\npublic boolean atLeastOneMoveExists() {  \n    if (emptySpaceExists()) {  \n        return true;  \n    }  \n    for (int x = 0; x < board.size(); x++) {  \n        for (int y = 0; y < board.size() - 1; y++) {  \n            for (int x1 = x + 1; x1 < board.size(); x1++) {  \n                if (board.tile(x, y) != null && board.tile(x1, y) != null) {  \n                    if (board.tile(x, y).value() == board.tile(x1, y).value()) {  \n                        return true;  \n                    } else {  \n                        break;  \n                    }  \n                }  \n            }  \n            for (int y1 = y + 1; y1 < board.size(); y1++) {  \n                if (board.tile(x, y) != null && board.tile(x, y1) != null) {  \n                    if (board.tile(x, y).value() == board.tile(x, y1).value()) {  \n                        return true;  \n                    } else {  \n                        break;  \n                    }  \n                }  \n  \n            }  \n        }  \n    }  \n    return false;  \n}\n```\n\n## Task 5: Move Tile Up (No Merging)\n\n将位置 `(x, y)` 的方块尽可能向上移动到其所在列的最上方。\n这里提示要用 `Board` 类的方法 `move(int x, int y, Tile tile)`，这个方法将给定的 `tile` 移动到棋盘上的 `(x, y)` 位置。而且要求`moveTileUpAsFarAsPossible` 解决方案应该恰好调用一次 `move` 方法。那就是先确定步数再用`move` 。\n这里有一个小坑，如果你查看`Board` 类方法 `move` ，会发现：\n```java\nif (tile1 == null) {  \n\t...\n} else {  \n    if (tile.value() != tile1.value()) {  \n    ...  \n    }  \n    next = Tile.create(2 * tile.value(), px, py);  \n    tile1.setNext(next);  \n}\n```\n也就是如果传入`move` 的瓦片如果值存在，就一定会更新值，无论它是否移动过。于是就要注意不能把顶层瓦片传入`move` :\n```java\npublic void moveTileUpAsFarAsPossible(int x, int y) {  \n    Tile currTile = board.tile(x, y);  \n    int myValue = currTile.value();  \n    int targetY = y;  \n    int step = 0;  \n    for (int i = targetY + 1; i < board.size(); i++) { //i = targetY + 1 从下一个方块开始比较  \n        if (board.tile(x, i) == null) {  \n            step += 1;  \n        } else {  \n            if (board.tile(x, i).value() == myValue && i != y) { //i != y 防止方块在顶层时加上自己的值  \n                if (!board.tile(x, i).wasMerged()) {  \n                    step += 1;  \n                }  \n            }  \n            break;  \n        }  \n    }  \n    if (step != 0) {  \n        board.move(x, targetY + step, currTile); // 顶层方块不移动但会检测合并，防止重复加上自己的值  \n    }  \n}\n```\n\n## Task 6: Merging Tiles\n\n瓦片可以通过空格向上移动。当瓦片遇到非空格时，如果那个格子里有另一个相同值的瓦片，并且那个瓦片还没有因为这个倾斜操作被合并过，那么这两个瓦片应该合并。\n我发现我在上面的题里已经解决这个问题了，于是跳过。\n\n## Task 7: Tilt Column\n\n这个方法应该将给定坐标的列向上倾斜，将列中的所有方块移动到正确的位置，并合并需要合并的方块。\n其实就是对`moveTileUpAsFarAsPossible`方法的抽象包装，把`moveTileUpAsFarAsPossible`方法用到给定`x`坐标的一列，注意要自上而下的调用：\n\n```java\npublic void tiltColumn(int x) {  \n    for (int y = board.size() - 1; y >= 0; y--) {  \n        if (board.tile(x, y) != null) {  \n            moveTileUpAsFarAsPossible(x, y);  \n        }  \n    }  \n}\n```\n\n## Task 8: Tilt Up\n\n这个方法应该将整个棋盘向上倾斜，将所有列中的所有方块移动到它们应有的位置，并合并需要合并的方块。\n其实就是对`tiltColumn`方法的抽象包装，在棋盘的每一列调用`tiltColumn`方法：\n```java\npublic void tilt(Side side) {  \n    for (int x = 0; x < board.size(); x++) {  \n        tiltColumn(x);  \n    }  \n}\n```\n\n## Task 9: Tilt in Four Directions\n\n既然我们已经实现了向上方向的倾斜功能，现在我们必须对其他三个方向做同样的事情。\n这里我的方法应该和官方期望的解法不同，我看官方的提示好像还要用到`dubug`，这里我看它给出\n1. \"`Side` 类是一种特殊的类，称为 `Enum` \"\n2. \"枚举可以用类似 `Side s = Side.NORTH` 的语法赋值。请注意，我们不是使用 `new` 关键字，而是直接将 `Side` 值设置为四个值中的一个\"\n3. \"如果你对Java枚举感兴趣请查看https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html\"\n这几个提示，结合起来就是：\n```java\npublic void tiltWrapper(Side side) {  \n    board.resetMerged();  \n    switch (side) {  \n        case NORTH:  \n            board.setViewingPerspective(Side.NORTH);  \n            tilt(side);  \n            break;  \n        case WEST:  \n            board.setViewingPerspective(Side.WEST);  \n            tilt(side);  \n            board.setViewingPerspective(Side.NORTH);  \n            break;  \n        case SOUTH:  \n            board.setViewingPerspective(Side.SOUTH);  \n            tilt(side);  \n            board.setViewingPerspective(Side.NORTH);  \n            break;  \n        case EAST:  \n            board.setViewingPerspective(Side.EAST);  \n            tilt(side);  \n            board.setViewingPerspective(Side.NORTH);  \n            break;  \n        default:  \n            break;  \n    }  \n}\n```\n\n## Task 10: Updating Score\n\n实现的分数更新。\n这个直接在`moveTileUpAsFarAsPossible`方法里插入一行就行了：\n\n```java\npublic void moveTileUpAsFarAsPossible(int x, int y) {  \n    Tile currTile = board.tile(x, y);  \n    int myValue = currTile.value();  \n    int targetY = y;  \n    int step = 0;  \n    for (int i = targetY + 1; i < board.size(); i++) { \n        if (board.tile(x, i) == null) {  \n            step += 1;  \n        } else {  \n            if (board.tile(x, i).value() == myValue && i != y) { \n                if (!board.tile(x, i).wasMerged()) {  \n                    this.score += board.tile(x, y).value() * 2;  // 插入这里\n                    step += 1; \n                }  \n            }  \n            break;  \n        }  \n    }  \n    if (step != 0) {  \n        board.move(x, targetY + step, currTile); \n}\n```","source":"CS61B/proj0.md","raw":"---\ntitle: proj0\ndate: 2025-06-14\ncssclasses: CS61B\n---\n这次的`proj` 整体挺简单的，让我惊讶的是相比CS61A，它会提示要用到的辅助方法，不需要像之前非得看完整个框架才能开始做，而且还有风格检查和`git` ,`GitHub` 相关，刚好弥补了我不知道该怎么练习的苦恼。 \n\n---\n\n这次的项目是一个叫[2048](https://play2048.co/) 的游戏。\n\n## Task 1: Empty Space Exists\n\n如果棋盘上有空格就返回true，否则放回false 。\n遍历就解决了：\n\n```java\npublic boolean emptySpaceExists() {  \n    for (int x = 0; x < board.size(); x++) {  \n        for (int y = 0; y < board.size(); y++) {  \n            if (board.tile(x, y) == null) { //空方块则返回null  \n                return true;  \n            }  \n        }  \n    }  \n    return false;  \n}\n```\n\n## Task 2: Max Tile Exists\n\n如果棋盘上的任何瓦片值为获胜值（MAX_PIECE = 2048），此方法应返回 true。\n同样是遍历，但是要注意获取瓦片值前要确保瓦片存在：\n\n```java\npublic boolean maxTileExists() {  \n    for (int x = 0; x < board.size(); x++) {  \n        for (int y = 0; y < board.size(); y++) {  \n            if ((board.tile(x, y) != null) && (board.tile(x, y).value() == MAX_PIECE)) {  \n                return true;  \n            }  \n        }  \n    }  \n    return false;  \n}\n```\n\n## Task 3: At Least One Move Exists\n\n如果存在任何有效的移动，这个方法应该返回 true。\n存在有效移动的两种方式：\n*  棋盘上至少有一个空格。\n* 棋盘上有两个相邻（它们之间可以有空格）且值相同的方块。\n\n第一种很好判断，直接丢给刚刚完成的`emptySpaceExists()` 就行，第二个条件我写的很丑...QAQ也是基于遍历，分成横向遍历和纵向遍历，它们接下来的步骤差不多：创建一个‘先行者’(`x1`,`y1`),比较基础瓦片和先行者的值。\n感觉这题有点像力扣的一道棋盘题，不过那个是判断达到最终结果的最少步数，用的多叉树解决的。\n\n```java\npublic boolean atLeastOneMoveExists() {  \n    if (emptySpaceExists()) {  \n        return true;  \n    }  \n    for (int x = 0; x < board.size(); x++) {  \n        for (int y = 0; y < board.size() - 1; y++) {  \n            for (int x1 = x + 1; x1 < board.size(); x1++) {  \n                if (board.tile(x, y) != null && board.tile(x1, y) != null) {  \n                    if (board.tile(x, y).value() == board.tile(x1, y).value()) {  \n                        return true;  \n                    } else {  \n                        break;  \n                    }  \n                }  \n            }  \n            for (int y1 = y + 1; y1 < board.size(); y1++) {  \n                if (board.tile(x, y) != null && board.tile(x, y1) != null) {  \n                    if (board.tile(x, y).value() == board.tile(x, y1).value()) {  \n                        return true;  \n                    } else {  \n                        break;  \n                    }  \n                }  \n  \n            }  \n        }  \n    }  \n    return false;  \n}\n```\n\n## Task 5: Move Tile Up (No Merging)\n\n将位置 `(x, y)` 的方块尽可能向上移动到其所在列的最上方。\n这里提示要用 `Board` 类的方法 `move(int x, int y, Tile tile)`，这个方法将给定的 `tile` 移动到棋盘上的 `(x, y)` 位置。而且要求`moveTileUpAsFarAsPossible` 解决方案应该恰好调用一次 `move` 方法。那就是先确定步数再用`move` 。\n这里有一个小坑，如果你查看`Board` 类方法 `move` ，会发现：\n```java\nif (tile1 == null) {  \n\t...\n} else {  \n    if (tile.value() != tile1.value()) {  \n    ...  \n    }  \n    next = Tile.create(2 * tile.value(), px, py);  \n    tile1.setNext(next);  \n}\n```\n也就是如果传入`move` 的瓦片如果值存在，就一定会更新值，无论它是否移动过。于是就要注意不能把顶层瓦片传入`move` :\n```java\npublic void moveTileUpAsFarAsPossible(int x, int y) {  \n    Tile currTile = board.tile(x, y);  \n    int myValue = currTile.value();  \n    int targetY = y;  \n    int step = 0;  \n    for (int i = targetY + 1; i < board.size(); i++) { //i = targetY + 1 从下一个方块开始比较  \n        if (board.tile(x, i) == null) {  \n            step += 1;  \n        } else {  \n            if (board.tile(x, i).value() == myValue && i != y) { //i != y 防止方块在顶层时加上自己的值  \n                if (!board.tile(x, i).wasMerged()) {  \n                    step += 1;  \n                }  \n            }  \n            break;  \n        }  \n    }  \n    if (step != 0) {  \n        board.move(x, targetY + step, currTile); // 顶层方块不移动但会检测合并，防止重复加上自己的值  \n    }  \n}\n```\n\n## Task 6: Merging Tiles\n\n瓦片可以通过空格向上移动。当瓦片遇到非空格时，如果那个格子里有另一个相同值的瓦片，并且那个瓦片还没有因为这个倾斜操作被合并过，那么这两个瓦片应该合并。\n我发现我在上面的题里已经解决这个问题了，于是跳过。\n\n## Task 7: Tilt Column\n\n这个方法应该将给定坐标的列向上倾斜，将列中的所有方块移动到正确的位置，并合并需要合并的方块。\n其实就是对`moveTileUpAsFarAsPossible`方法的抽象包装，把`moveTileUpAsFarAsPossible`方法用到给定`x`坐标的一列，注意要自上而下的调用：\n\n```java\npublic void tiltColumn(int x) {  \n    for (int y = board.size() - 1; y >= 0; y--) {  \n        if (board.tile(x, y) != null) {  \n            moveTileUpAsFarAsPossible(x, y);  \n        }  \n    }  \n}\n```\n\n## Task 8: Tilt Up\n\n这个方法应该将整个棋盘向上倾斜，将所有列中的所有方块移动到它们应有的位置，并合并需要合并的方块。\n其实就是对`tiltColumn`方法的抽象包装，在棋盘的每一列调用`tiltColumn`方法：\n```java\npublic void tilt(Side side) {  \n    for (int x = 0; x < board.size(); x++) {  \n        tiltColumn(x);  \n    }  \n}\n```\n\n## Task 9: Tilt in Four Directions\n\n既然我们已经实现了向上方向的倾斜功能，现在我们必须对其他三个方向做同样的事情。\n这里我的方法应该和官方期望的解法不同，我看官方的提示好像还要用到`dubug`，这里我看它给出\n1. \"`Side` 类是一种特殊的类，称为 `Enum` \"\n2. \"枚举可以用类似 `Side s = Side.NORTH` 的语法赋值。请注意，我们不是使用 `new` 关键字，而是直接将 `Side` 值设置为四个值中的一个\"\n3. \"如果你对Java枚举感兴趣请查看https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html\"\n这几个提示，结合起来就是：\n```java\npublic void tiltWrapper(Side side) {  \n    board.resetMerged();  \n    switch (side) {  \n        case NORTH:  \n            board.setViewingPerspective(Side.NORTH);  \n            tilt(side);  \n            break;  \n        case WEST:  \n            board.setViewingPerspective(Side.WEST);  \n            tilt(side);  \n            board.setViewingPerspective(Side.NORTH);  \n            break;  \n        case SOUTH:  \n            board.setViewingPerspective(Side.SOUTH);  \n            tilt(side);  \n            board.setViewingPerspective(Side.NORTH);  \n            break;  \n        case EAST:  \n            board.setViewingPerspective(Side.EAST);  \n            tilt(side);  \n            board.setViewingPerspective(Side.NORTH);  \n            break;  \n        default:  \n            break;  \n    }  \n}\n```\n\n## Task 10: Updating Score\n\n实现的分数更新。\n这个直接在`moveTileUpAsFarAsPossible`方法里插入一行就行了：\n\n```java\npublic void moveTileUpAsFarAsPossible(int x, int y) {  \n    Tile currTile = board.tile(x, y);  \n    int myValue = currTile.value();  \n    int targetY = y;  \n    int step = 0;  \n    for (int i = targetY + 1; i < board.size(); i++) { \n        if (board.tile(x, i) == null) {  \n            step += 1;  \n        } else {  \n            if (board.tile(x, i).value() == myValue && i != y) { \n                if (!board.tile(x, i).wasMerged()) {  \n                    this.score += board.tile(x, y).value() * 2;  // 插入这里\n                    step += 1; \n                }  \n            }  \n            break;  \n        }  \n    }  \n    if (step != 0) {  \n        board.move(x, targetY + step, currTile); \n}\n```","updated":"2025-06-16T11:10:04.451Z","path":"CS61B/proj0.html","comments":1,"layout":"page","_id":"cmd63a8cu000dk8v3ed7r5din","content":"<p>这次的<code>proj</code> 整体挺简单的，让我惊讶的是相比CS61A，它会提示要用到的辅助方法，不需要像之前非得看完整个框架才能开始做，而且还有风格检查和<code>git</code> ,<code>GitHub</code> 相关，刚好弥补了我不知道该怎么练习的苦恼。 </p>\n<hr>\n<p>这次的项目是一个叫<a href=\"https://play2048.co/\">2048</a> 的游戏。</p>\n<h2 id=\"Task-1-Empty-Space-Exists\"><a href=\"#Task-1-Empty-Space-Exists\" class=\"headerlink\" title=\"Task 1: Empty Space Exists\"></a>Task 1: Empty Space Exists</h2><p>如果棋盘上有空格就返回true，否则放回false 。<br>遍历就解决了：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">emptySpaceExists</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; x &lt; board.size(); x++) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; y &lt; board.size(); y++) &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (board.tile(x, y) == <span class=\"literal\">null</span>) &#123; <span class=\"comment\">//空方块则返回null  </span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Task-2-Max-Tile-Exists\"><a href=\"#Task-2-Max-Tile-Exists\" class=\"headerlink\" title=\"Task 2: Max Tile Exists\"></a>Task 2: Max Tile Exists</h2><p>如果棋盘上的任何瓦片值为获胜值（MAX_PIECE &#x3D; 2048），此方法应返回 true。<br>同样是遍历，但是要注意获取瓦片值前要确保瓦片存在：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">maxTileExists</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; x &lt; board.size(); x++) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; y &lt; board.size(); y++) &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((board.tile(x, y) != <span class=\"literal\">null</span>) &amp;&amp; (board.tile(x, y).value() == MAX_PIECE)) &#123;  </span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Task-3-At-Least-One-Move-Exists\"><a href=\"#Task-3-At-Least-One-Move-Exists\" class=\"headerlink\" title=\"Task 3: At Least One Move Exists\"></a>Task 3: At Least One Move Exists</h2><p>如果存在任何有效的移动，这个方法应该返回 true。<br>存在有效移动的两种方式：</p>\n<ul>\n<li>棋盘上至少有一个空格。</li>\n<li>棋盘上有两个相邻（它们之间可以有空格）且值相同的方块。</li>\n</ul>\n<p>第一种很好判断，直接丢给刚刚完成的<code>emptySpaceExists()</code> 就行，第二个条件我写的很丑…QAQ也是基于遍历，分成横向遍历和纵向遍历，它们接下来的步骤差不多：创建一个‘先行者’(<code>x1</code>,<code>y1</code>),比较基础瓦片和先行者的值。<br>感觉这题有点像力扣的一道棋盘题，不过那个是判断达到最终结果的最少步数，用的多叉树解决的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">atLeastOneMoveExists</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (emptySpaceExists()) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; x &lt; board.size(); x++) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; y &lt; board.size() - <span class=\"number\">1</span>; y++) &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">x1</span> <span class=\"operator\">=</span> x + <span class=\"number\">1</span>; x1 &lt; board.size(); x1++) &#123;  </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (board.tile(x, y) != <span class=\"literal\">null</span> &amp;&amp; board.tile(x1, y) != <span class=\"literal\">null</span>) &#123;  </span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (board.tile(x, y).value() == board.tile(x1, y).value()) &#123;  </span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  </span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">                    &#125;  </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">y1</span> <span class=\"operator\">=</span> y + <span class=\"number\">1</span>; y1 &lt; board.size(); y1++) &#123;  </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (board.tile(x, y) != <span class=\"literal\">null</span> &amp;&amp; board.tile(x, y1) != <span class=\"literal\">null</span>) &#123;  </span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (board.tile(x, y).value() == board.tile(x, y1).value()) &#123;  </span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  </span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">                    &#125;  </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Task-5-Move-Tile-Up-No-Merging\"><a href=\"#Task-5-Move-Tile-Up-No-Merging\" class=\"headerlink\" title=\"Task 5: Move Tile Up (No Merging)\"></a>Task 5: Move Tile Up (No Merging)</h2><p>将位置 <code>(x, y)</code> 的方块尽可能向上移动到其所在列的最上方。<br>这里提示要用 <code>Board</code> 类的方法 <code>move(int x, int y, Tile tile)</code>，这个方法将给定的 <code>tile</code> 移动到棋盘上的 <code>(x, y)</code> 位置。而且要求<code>moveTileUpAsFarAsPossible</code> 解决方案应该恰好调用一次 <code>move</code> 方法。那就是先确定步数再用<code>move</code> 。<br>这里有一个小坑，如果你查看<code>Board</code> 类方法 <code>move</code> ，会发现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (tile1 == <span class=\"literal\">null</span>) &#123;  </span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tile.value() != tile1.value()) &#123;  </span><br><span class=\"line\">    ...  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    next = Tile.create(<span class=\"number\">2</span> * tile.value(), px, py);  </span><br><span class=\"line\">    tile1.setNext(next);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>也就是如果传入<code>move</code> 的瓦片如果值存在，就一定会更新值，无论它是否移动过。于是就要注意不能把顶层瓦片传入<code>move</code> :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">moveTileUpAsFarAsPossible</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> &#123;  </span><br><span class=\"line\">    <span class=\"type\">Tile</span> <span class=\"variable\">currTile</span> <span class=\"operator\">=</span> board.tile(x, y);  </span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">myValue</span> <span class=\"operator\">=</span> currTile.value();  </span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">targetY</span> <span class=\"operator\">=</span> y;  </span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">step</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> targetY + <span class=\"number\">1</span>; i &lt; board.size(); i++) &#123; <span class=\"comment\">//i = targetY + 1 从下一个方块开始比较  </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (board.tile(x, i) == <span class=\"literal\">null</span>) &#123;  </span><br><span class=\"line\">            step += <span class=\"number\">1</span>;  </span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (board.tile(x, i).value() == myValue &amp;&amp; i != y) &#123; <span class=\"comment\">//i != y 防止方块在顶层时加上自己的值  </span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!board.tile(x, i).wasMerged()) &#123;  </span><br><span class=\"line\">                    step += <span class=\"number\">1</span>;  </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">            <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (step != <span class=\"number\">0</span>) &#123;  </span><br><span class=\"line\">        board.move(x, targetY + step, currTile); <span class=\"comment\">// 顶层方块不移动但会检测合并，防止重复加上自己的值  </span></span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Task-6-Merging-Tiles\"><a href=\"#Task-6-Merging-Tiles\" class=\"headerlink\" title=\"Task 6: Merging Tiles\"></a>Task 6: Merging Tiles</h2><p>瓦片可以通过空格向上移动。当瓦片遇到非空格时，如果那个格子里有另一个相同值的瓦片，并且那个瓦片还没有因为这个倾斜操作被合并过，那么这两个瓦片应该合并。<br>我发现我在上面的题里已经解决这个问题了，于是跳过。</p>\n<h2 id=\"Task-7-Tilt-Column\"><a href=\"#Task-7-Tilt-Column\" class=\"headerlink\" title=\"Task 7: Tilt Column\"></a>Task 7: Tilt Column</h2><p>这个方法应该将给定坐标的列向上倾斜，将列中的所有方块移动到正确的位置，并合并需要合并的方块。<br>其实就是对<code>moveTileUpAsFarAsPossible</code>方法的抽象包装，把<code>moveTileUpAsFarAsPossible</code>方法用到给定<code>x</code>坐标的一列，注意要自上而下的调用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">tiltColumn</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> board.size() - <span class=\"number\">1</span>; y &gt;= <span class=\"number\">0</span>; y--) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (board.tile(x, y) != <span class=\"literal\">null</span>) &#123;  </span><br><span class=\"line\">            moveTileUpAsFarAsPossible(x, y);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Task-8-Tilt-Up\"><a href=\"#Task-8-Tilt-Up\" class=\"headerlink\" title=\"Task 8: Tilt Up\"></a>Task 8: Tilt Up</h2><p>这个方法应该将整个棋盘向上倾斜，将所有列中的所有方块移动到它们应有的位置，并合并需要合并的方块。<br>其实就是对<code>tiltColumn</code>方法的抽象包装，在棋盘的每一列调用<code>tiltColumn</code>方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">tilt</span><span class=\"params\">(Side side)</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; x &lt; board.size(); x++) &#123;  </span><br><span class=\"line\">        tiltColumn(x);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Task-9-Tilt-in-Four-Directions\"><a href=\"#Task-9-Tilt-in-Four-Directions\" class=\"headerlink\" title=\"Task 9: Tilt in Four Directions\"></a>Task 9: Tilt in Four Directions</h2><p>既然我们已经实现了向上方向的倾斜功能，现在我们必须对其他三个方向做同样的事情。<br>这里我的方法应该和官方期望的解法不同，我看官方的提示好像还要用到<code>dubug</code>，这里我看它给出</p>\n<ol>\n<li>“<code>Side</code> 类是一种特殊的类，称为 <code>Enum</code> “</li>\n<li>“枚举可以用类似 <code>Side s = Side.NORTH</code> 的语法赋值。请注意，我们不是使用 <code>new</code> 关键字，而是直接将 <code>Side</code> 值设置为四个值中的一个”</li>\n<li>“如果你对Java枚举感兴趣请查看<a href=\"https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html\">https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html</a>“<br>这几个提示，结合起来就是：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">tiltWrapper</span><span class=\"params\">(Side side)</span> &#123;  </span><br><span class=\"line\">    board.resetMerged();  </span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (side) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">case</span> NORTH:  </span><br><span class=\"line\">            board.setViewingPerspective(Side.NORTH);  </span><br><span class=\"line\">            tilt(side);  </span><br><span class=\"line\">            <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">case</span> WEST:  </span><br><span class=\"line\">            board.setViewingPerspective(Side.WEST);  </span><br><span class=\"line\">            tilt(side);  </span><br><span class=\"line\">            board.setViewingPerspective(Side.NORTH);  </span><br><span class=\"line\">            <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">case</span> SOUTH:  </span><br><span class=\"line\">            board.setViewingPerspective(Side.SOUTH);  </span><br><span class=\"line\">            tilt(side);  </span><br><span class=\"line\">            board.setViewingPerspective(Side.NORTH);  </span><br><span class=\"line\">            <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">case</span> EAST:  </span><br><span class=\"line\">            board.setViewingPerspective(Side.EAST);  </span><br><span class=\"line\">            tilt(side);  </span><br><span class=\"line\">            board.setViewingPerspective(Side.NORTH);  </span><br><span class=\"line\">            <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">default</span>:  </span><br><span class=\"line\">            <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"Task-10-Updating-Score\"><a href=\"#Task-10-Updating-Score\" class=\"headerlink\" title=\"Task 10: Updating Score\"></a>Task 10: Updating Score</h2><p>实现的分数更新。<br>这个直接在<code>moveTileUpAsFarAsPossible</code>方法里插入一行就行了：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">moveTileUpAsFarAsPossible</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> &#123;  </span><br><span class=\"line\">    <span class=\"type\">Tile</span> <span class=\"variable\">currTile</span> <span class=\"operator\">=</span> board.tile(x, y);  </span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">myValue</span> <span class=\"operator\">=</span> currTile.value();  </span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">targetY</span> <span class=\"operator\">=</span> y;  </span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">step</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> targetY + <span class=\"number\">1</span>; i &lt; board.size(); i++) &#123; </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (board.tile(x, i) == <span class=\"literal\">null</span>) &#123;  </span><br><span class=\"line\">            step += <span class=\"number\">1</span>;  </span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (board.tile(x, i).value() == myValue &amp;&amp; i != y) &#123; </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!board.tile(x, i).wasMerged()) &#123;  </span><br><span class=\"line\">                    <span class=\"built_in\">this</span>.score += board.tile(x, y).value() * <span class=\"number\">2</span>;  <span class=\"comment\">// 插入这里</span></span><br><span class=\"line\">                    step += <span class=\"number\">1</span>; </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">            <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (step != <span class=\"number\">0</span>) &#123;  </span><br><span class=\"line\">        board.move(x, targetY + step, currTile); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<p>这次的<code>proj</code> 整体挺简单的，让我惊讶的是相比CS61A，它会提示要用到的辅助方法，不需要像之前非得看完整个框架才能开始做，而且还有风格检查和<code>git</code> ,<code>GitHub</code> 相关，刚好弥补了我不知道该怎么练习的苦恼。 </p>\n<hr>\n<p>这次的项目是一个叫<a href=\"https://play2048.co/\">2048</a> 的游戏。</p>\n<h2 id=\"Task-1-Empty-Space-Exists\"><a href=\"#Task-1-Empty-Space-Exists\" class=\"headerlink\" title=\"Task 1: Empty Space Exists\"></a>Task 1: Empty Space Exists</h2><p>如果棋盘上有空格就返回true，否则放回false 。<br>遍历就解决了：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">emptySpaceExists</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; x &lt; board.size(); x++) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; y &lt; board.size(); y++) &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (board.tile(x, y) == <span class=\"literal\">null</span>) &#123; <span class=\"comment\">//空方块则返回null  </span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Task-2-Max-Tile-Exists\"><a href=\"#Task-2-Max-Tile-Exists\" class=\"headerlink\" title=\"Task 2: Max Tile Exists\"></a>Task 2: Max Tile Exists</h2><p>如果棋盘上的任何瓦片值为获胜值（MAX_PIECE &#x3D; 2048），此方法应返回 true。<br>同样是遍历，但是要注意获取瓦片值前要确保瓦片存在：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">maxTileExists</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; x &lt; board.size(); x++) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; y &lt; board.size(); y++) &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((board.tile(x, y) != <span class=\"literal\">null</span>) &amp;&amp; (board.tile(x, y).value() == MAX_PIECE)) &#123;  </span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Task-3-At-Least-One-Move-Exists\"><a href=\"#Task-3-At-Least-One-Move-Exists\" class=\"headerlink\" title=\"Task 3: At Least One Move Exists\"></a>Task 3: At Least One Move Exists</h2><p>如果存在任何有效的移动，这个方法应该返回 true。<br>存在有效移动的两种方式：</p>\n<ul>\n<li>棋盘上至少有一个空格。</li>\n<li>棋盘上有两个相邻（它们之间可以有空格）且值相同的方块。</li>\n</ul>\n<p>第一种很好判断，直接丢给刚刚完成的<code>emptySpaceExists()</code> 就行，第二个条件我写的很丑…QAQ也是基于遍历，分成横向遍历和纵向遍历，它们接下来的步骤差不多：创建一个‘先行者’(<code>x1</code>,<code>y1</code>),比较基础瓦片和先行者的值。<br>感觉这题有点像力扣的一道棋盘题，不过那个是判断达到最终结果的最少步数，用的多叉树解决的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">atLeastOneMoveExists</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (emptySpaceExists()) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; x &lt; board.size(); x++) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; y &lt; board.size() - <span class=\"number\">1</span>; y++) &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">x1</span> <span class=\"operator\">=</span> x + <span class=\"number\">1</span>; x1 &lt; board.size(); x1++) &#123;  </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (board.tile(x, y) != <span class=\"literal\">null</span> &amp;&amp; board.tile(x1, y) != <span class=\"literal\">null</span>) &#123;  </span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (board.tile(x, y).value() == board.tile(x1, y).value()) &#123;  </span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  </span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">                    &#125;  </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">y1</span> <span class=\"operator\">=</span> y + <span class=\"number\">1</span>; y1 &lt; board.size(); y1++) &#123;  </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (board.tile(x, y) != <span class=\"literal\">null</span> &amp;&amp; board.tile(x, y1) != <span class=\"literal\">null</span>) &#123;  </span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (board.tile(x, y).value() == board.tile(x, y1).value()) &#123;  </span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  </span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">                    &#125;  </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Task-5-Move-Tile-Up-No-Merging\"><a href=\"#Task-5-Move-Tile-Up-No-Merging\" class=\"headerlink\" title=\"Task 5: Move Tile Up (No Merging)\"></a>Task 5: Move Tile Up (No Merging)</h2><p>将位置 <code>(x, y)</code> 的方块尽可能向上移动到其所在列的最上方。<br>这里提示要用 <code>Board</code> 类的方法 <code>move(int x, int y, Tile tile)</code>，这个方法将给定的 <code>tile</code> 移动到棋盘上的 <code>(x, y)</code> 位置。而且要求<code>moveTileUpAsFarAsPossible</code> 解决方案应该恰好调用一次 <code>move</code> 方法。那就是先确定步数再用<code>move</code> 。<br>这里有一个小坑，如果你查看<code>Board</code> 类方法 <code>move</code> ，会发现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (tile1 == <span class=\"literal\">null</span>) &#123;  </span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tile.value() != tile1.value()) &#123;  </span><br><span class=\"line\">    ...  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    next = Tile.create(<span class=\"number\">2</span> * tile.value(), px, py);  </span><br><span class=\"line\">    tile1.setNext(next);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>也就是如果传入<code>move</code> 的瓦片如果值存在，就一定会更新值，无论它是否移动过。于是就要注意不能把顶层瓦片传入<code>move</code> :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">moveTileUpAsFarAsPossible</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> &#123;  </span><br><span class=\"line\">    <span class=\"type\">Tile</span> <span class=\"variable\">currTile</span> <span class=\"operator\">=</span> board.tile(x, y);  </span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">myValue</span> <span class=\"operator\">=</span> currTile.value();  </span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">targetY</span> <span class=\"operator\">=</span> y;  </span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">step</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> targetY + <span class=\"number\">1</span>; i &lt; board.size(); i++) &#123; <span class=\"comment\">//i = targetY + 1 从下一个方块开始比较  </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (board.tile(x, i) == <span class=\"literal\">null</span>) &#123;  </span><br><span class=\"line\">            step += <span class=\"number\">1</span>;  </span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (board.tile(x, i).value() == myValue &amp;&amp; i != y) &#123; <span class=\"comment\">//i != y 防止方块在顶层时加上自己的值  </span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!board.tile(x, i).wasMerged()) &#123;  </span><br><span class=\"line\">                    step += <span class=\"number\">1</span>;  </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">            <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (step != <span class=\"number\">0</span>) &#123;  </span><br><span class=\"line\">        board.move(x, targetY + step, currTile); <span class=\"comment\">// 顶层方块不移动但会检测合并，防止重复加上自己的值  </span></span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Task-6-Merging-Tiles\"><a href=\"#Task-6-Merging-Tiles\" class=\"headerlink\" title=\"Task 6: Merging Tiles\"></a>Task 6: Merging Tiles</h2><p>瓦片可以通过空格向上移动。当瓦片遇到非空格时，如果那个格子里有另一个相同值的瓦片，并且那个瓦片还没有因为这个倾斜操作被合并过，那么这两个瓦片应该合并。<br>我发现我在上面的题里已经解决这个问题了，于是跳过。</p>\n<h2 id=\"Task-7-Tilt-Column\"><a href=\"#Task-7-Tilt-Column\" class=\"headerlink\" title=\"Task 7: Tilt Column\"></a>Task 7: Tilt Column</h2><p>这个方法应该将给定坐标的列向上倾斜，将列中的所有方块移动到正确的位置，并合并需要合并的方块。<br>其实就是对<code>moveTileUpAsFarAsPossible</code>方法的抽象包装，把<code>moveTileUpAsFarAsPossible</code>方法用到给定<code>x</code>坐标的一列，注意要自上而下的调用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">tiltColumn</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> board.size() - <span class=\"number\">1</span>; y &gt;= <span class=\"number\">0</span>; y--) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (board.tile(x, y) != <span class=\"literal\">null</span>) &#123;  </span><br><span class=\"line\">            moveTileUpAsFarAsPossible(x, y);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Task-8-Tilt-Up\"><a href=\"#Task-8-Tilt-Up\" class=\"headerlink\" title=\"Task 8: Tilt Up\"></a>Task 8: Tilt Up</h2><p>这个方法应该将整个棋盘向上倾斜，将所有列中的所有方块移动到它们应有的位置，并合并需要合并的方块。<br>其实就是对<code>tiltColumn</code>方法的抽象包装，在棋盘的每一列调用<code>tiltColumn</code>方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">tilt</span><span class=\"params\">(Side side)</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; x &lt; board.size(); x++) &#123;  </span><br><span class=\"line\">        tiltColumn(x);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Task-9-Tilt-in-Four-Directions\"><a href=\"#Task-9-Tilt-in-Four-Directions\" class=\"headerlink\" title=\"Task 9: Tilt in Four Directions\"></a>Task 9: Tilt in Four Directions</h2><p>既然我们已经实现了向上方向的倾斜功能，现在我们必须对其他三个方向做同样的事情。<br>这里我的方法应该和官方期望的解法不同，我看官方的提示好像还要用到<code>dubug</code>，这里我看它给出</p>\n<ol>\n<li>“<code>Side</code> 类是一种特殊的类，称为 <code>Enum</code> “</li>\n<li>“枚举可以用类似 <code>Side s = Side.NORTH</code> 的语法赋值。请注意，我们不是使用 <code>new</code> 关键字，而是直接将 <code>Side</code> 值设置为四个值中的一个”</li>\n<li>“如果你对Java枚举感兴趣请查看<a href=\"https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html\">https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html</a>“<br>这几个提示，结合起来就是：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">tiltWrapper</span><span class=\"params\">(Side side)</span> &#123;  </span><br><span class=\"line\">    board.resetMerged();  </span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (side) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">case</span> NORTH:  </span><br><span class=\"line\">            board.setViewingPerspective(Side.NORTH);  </span><br><span class=\"line\">            tilt(side);  </span><br><span class=\"line\">            <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">case</span> WEST:  </span><br><span class=\"line\">            board.setViewingPerspective(Side.WEST);  </span><br><span class=\"line\">            tilt(side);  </span><br><span class=\"line\">            board.setViewingPerspective(Side.NORTH);  </span><br><span class=\"line\">            <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">case</span> SOUTH:  </span><br><span class=\"line\">            board.setViewingPerspective(Side.SOUTH);  </span><br><span class=\"line\">            tilt(side);  </span><br><span class=\"line\">            board.setViewingPerspective(Side.NORTH);  </span><br><span class=\"line\">            <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">case</span> EAST:  </span><br><span class=\"line\">            board.setViewingPerspective(Side.EAST);  </span><br><span class=\"line\">            tilt(side);  </span><br><span class=\"line\">            board.setViewingPerspective(Side.NORTH);  </span><br><span class=\"line\">            <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">default</span>:  </span><br><span class=\"line\">            <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"Task-10-Updating-Score\"><a href=\"#Task-10-Updating-Score\" class=\"headerlink\" title=\"Task 10: Updating Score\"></a>Task 10: Updating Score</h2><p>实现的分数更新。<br>这个直接在<code>moveTileUpAsFarAsPossible</code>方法里插入一行就行了：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">moveTileUpAsFarAsPossible</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> &#123;  </span><br><span class=\"line\">    <span class=\"type\">Tile</span> <span class=\"variable\">currTile</span> <span class=\"operator\">=</span> board.tile(x, y);  </span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">myValue</span> <span class=\"operator\">=</span> currTile.value();  </span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">targetY</span> <span class=\"operator\">=</span> y;  </span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">step</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> targetY + <span class=\"number\">1</span>; i &lt; board.size(); i++) &#123; </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (board.tile(x, i) == <span class=\"literal\">null</span>) &#123;  </span><br><span class=\"line\">            step += <span class=\"number\">1</span>;  </span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (board.tile(x, i).value() == myValue &amp;&amp; i != y) &#123; </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!board.tile(x, i).wasMerged()) &#123;  </span><br><span class=\"line\">                    <span class=\"built_in\">this</span>.score += board.tile(x, y).value() * <span class=\"number\">2</span>;  <span class=\"comment\">// 插入这里</span></span><br><span class=\"line\">                    step += <span class=\"number\">1</span>; </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">            <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (step != <span class=\"number\">0</span>) &#123;  </span><br><span class=\"line\">        board.move(x, targetY + step, currTile); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"SSH概念","date":"2025-07-14T16:00:00.000Z","cssclasses":["Serve","SSH"],"_content":"### **一、SSH 的正常通信流程**\n\n1. **密钥交换**：客户端发起连接后，服务器向客户端发送**公钥**（用于加密后续通信）。\n2. **身份验证**：客户端验证服务器公钥的合法性（首次连接时会弹窗提示用户确认公钥指纹，后续连接则比对本地缓存）。\n3. **加密通信**：验证通过后，双方**基于公钥协商对称加密密钥，后续数据通过该密钥加密传输**[[SSH概念#关于加密]]，确保私密性和完整性。\n#### 关于加密 \n\n**一. 公钥与私钥 —— “公钥相当于一个锁，私钥就是解开这个锁的钥匙”** \n\n1. **公钥（锁）与私钥（钥匙）的角色**\n\t- **公钥（锁）**：可以公开传递，任何人都能获取。就像一把挂在门外的锁，别人可以用它锁东西，但只有钥匙的持有者才能打开。\n\t- **私钥（钥匙）**：必须严格保密，仅持有者拥有。用公钥加密的数据，只有对应的私钥才能解密（就像用锁锁上的盒子，只有钥匙能打开）。\n\n**二. 非对称加密和对称加密 —— “结合了非对称加密和对称加密”**\n\n 1. SSH 的加密机制包含**非对称加密（用于安全协商）** 和**对称加密（用于数据传输）** 两个核心环节,两者配合完成整个加密流程:\n\n\t- **非对称加密**：主要用于**身份验证和建立安全连接的初始阶段**。  \n\t    比如常见的 “公钥登录” 方式，就是通过一对非对称密钥（公钥存于服务器，私钥由客户端持有）验证客户端身份，确保连接发起方是合法用户。此外，SSH 握手时会用非对称加密协商后续对称加密的密钥（避免密钥在网络中明文传输）。\n    \n\t- **对称加密**：用于**连接建立后的实际数据传输**。  \n\t    因为非对称加密计算量大，不适合大量数据传输，所以 SSH 会在握手阶段通过非对称加密协商出一个临时的对称密钥，后续所有数据都用这个对称密钥加密，兼顾安全性和效率。\n\n2. **对称加密与非对称加密的核心区别**\n\n| **对比维度**    | **对称加密**                   | **非对称加密**                          |\n| ----------- | -------------------------- | ---------------------------------- |\n| **密钥数量与使用** | 只有**1 个密钥**（对称密钥），加密和解密都用它 | 有**2 个密钥**（公钥 + 私钥），公钥加密、私钥解密（或反之） |\n| **密钥特性**    | 密钥必须**严格保密**，且双方需提前共享      | 公钥可**公开传播**，私钥必须保密                 |\n| **加密解密效率**  | 速度极快（适合大量数据）               | 速度较慢（适合小数据）                        |\n| **典型算法**    | AES、DES、RC4                | RSA、ECDH、DSA                       |\n| **核心场景**    | 实际数据传输（如文件、会话内容）           | 密钥交换、身份认证（如 SSH 公钥验证）              |\n\n3. **混淆 “公钥” 和 “对称加密”？—— 对称加密中没有 “公钥” 概念，公钥是 “非对称加密” 的核心要素**\n\t- **公钥**属于非对称加密体系，用于**安全传递对称密钥**；\n\t- 对称加密用的是单独的**对称密钥**，用于**高效传输实际数据**。\n\n#### 公钥私钥谁持有？\n\n- 服务器有自己的公钥（给客户端用）和私钥（自己留着）；\n- 客户端（若用密钥登录）也有自己的公钥（给服务器用）和私钥（自己留着）。  \n双方通过交换公钥，用对方的公钥加密信息，再用自己的私钥解密，完成安全交互。\n\n### **二、中间人攻击**\n\nSSH（Secure Shell）的中间人攻击（Man-in-the-Middle Attack，简称 MITM）是一种针对 SSH 加密通信的网络攻击手段，攻击者通过秘密介入客户端与服务器之间的通信，伪装成 “中间人” 窃取或篡改数据，同时让双方误以为正在直接通信。以下是详细解释：\n\n1. **原理**\n\t1. **拦截连接**：攻击者通过网络劫持（如 ARP 欺骗、DNS 劫持等），让客户端的连接请求发送        到自己的设备，而非目标服务器。\n\t2. **双重伪装**：\n\t    - 攻击者向客户端发送**自己的公钥**（伪装成服务器的公钥）。\n\t    - 同时，攻击者以客户端的身份连接目标服务器，获取服务器的真实公钥。\n\t1. **数据转发与窃听**：\n\t    - 客户端用攻击者的公钥加密数据后发送，攻击者解密并获取原始数据。\n\t    - 攻击者再用服务器的真实公钥加密数据，转发给服务器；反之亦然。\n\t2. **隐藏痕迹**：客户端和服务器均无法察觉中间人的存在，误以为在直接通信。\n\n2. **攻击成功的关键条件**\n\n\t中间人攻击能得逞，核心在于**绕过 SSH 的公钥验证机制，采用密码认证**：\n\t\t- **首次连接**：用户对服务器公钥的指纹（如`SHA256:xxxx`）缺乏认知，可能直接点击 “确认”（忽略安全提示），导致接受攻击者伪造的公钥。\n\t\t- **非首次连接**：攻击者通过技术手段（如修改客户端本地缓存的公钥记录），让客户端误以为服务器公钥未发生变化，从而跳过验证。\n\n3. **如何防范中间人攻击 —— 严格验证服务器公钥的合法性，并采用更安全的认证方式（如密钥认证）** \n  \n\t 1. **严格验证公钥指纹**：\n\t    - 首次连接服务器时，务必通过**可信渠道**（如线下、加密邮件）获取服务器公钥的指纹，与客户端显示的指纹比对，确认一致后再确认。\n\t    - 非首次连接时，若客户端提示 “公钥已更改”（可能是攻击或服务器真的更换了公钥），需暂停连接并排查原因。\n\t    \n\t2. **使用密钥认证替代密码认证**：\n\t    - SSH 密钥认证（公钥 - 私钥对）比密码认证更安全，即使中间人截获数据，也无法获取私钥（私钥仅存储在客户端）。\n\t    \n\t3. **限制 SSH 访问范围**：\n\t    - 通过防火墙或 SSH 配置（如`sshd_config`）限制允许连接的 IP 地址，减少被攻击的暴露面。\n\t    \n\t4. **使用额外安全机制**：\n\t    - 启用 SSH 的**主机密钥验证**（`StrictHostKeyChecking yes`），拒绝连接未知或公钥变化的服务器。\n\t    - 结合 VPN 或专用网络，减少中间人劫持的可能性。\n","source":"Serve/SSH概念.md","raw":"---\ntitle: SSH概念\ndate: 2025-07-15\ncssclasses:\n  - Serve\n  - SSH\n---\n### **一、SSH 的正常通信流程**\n\n1. **密钥交换**：客户端发起连接后，服务器向客户端发送**公钥**（用于加密后续通信）。\n2. **身份验证**：客户端验证服务器公钥的合法性（首次连接时会弹窗提示用户确认公钥指纹，后续连接则比对本地缓存）。\n3. **加密通信**：验证通过后，双方**基于公钥协商对称加密密钥，后续数据通过该密钥加密传输**[[SSH概念#关于加密]]，确保私密性和完整性。\n#### 关于加密 \n\n**一. 公钥与私钥 —— “公钥相当于一个锁，私钥就是解开这个锁的钥匙”** \n\n1. **公钥（锁）与私钥（钥匙）的角色**\n\t- **公钥（锁）**：可以公开传递，任何人都能获取。就像一把挂在门外的锁，别人可以用它锁东西，但只有钥匙的持有者才能打开。\n\t- **私钥（钥匙）**：必须严格保密，仅持有者拥有。用公钥加密的数据，只有对应的私钥才能解密（就像用锁锁上的盒子，只有钥匙能打开）。\n\n**二. 非对称加密和对称加密 —— “结合了非对称加密和对称加密”**\n\n 1. SSH 的加密机制包含**非对称加密（用于安全协商）** 和**对称加密（用于数据传输）** 两个核心环节,两者配合完成整个加密流程:\n\n\t- **非对称加密**：主要用于**身份验证和建立安全连接的初始阶段**。  \n\t    比如常见的 “公钥登录” 方式，就是通过一对非对称密钥（公钥存于服务器，私钥由客户端持有）验证客户端身份，确保连接发起方是合法用户。此外，SSH 握手时会用非对称加密协商后续对称加密的密钥（避免密钥在网络中明文传输）。\n    \n\t- **对称加密**：用于**连接建立后的实际数据传输**。  \n\t    因为非对称加密计算量大，不适合大量数据传输，所以 SSH 会在握手阶段通过非对称加密协商出一个临时的对称密钥，后续所有数据都用这个对称密钥加密，兼顾安全性和效率。\n\n2. **对称加密与非对称加密的核心区别**\n\n| **对比维度**    | **对称加密**                   | **非对称加密**                          |\n| ----------- | -------------------------- | ---------------------------------- |\n| **密钥数量与使用** | 只有**1 个密钥**（对称密钥），加密和解密都用它 | 有**2 个密钥**（公钥 + 私钥），公钥加密、私钥解密（或反之） |\n| **密钥特性**    | 密钥必须**严格保密**，且双方需提前共享      | 公钥可**公开传播**，私钥必须保密                 |\n| **加密解密效率**  | 速度极快（适合大量数据）               | 速度较慢（适合小数据）                        |\n| **典型算法**    | AES、DES、RC4                | RSA、ECDH、DSA                       |\n| **核心场景**    | 实际数据传输（如文件、会话内容）           | 密钥交换、身份认证（如 SSH 公钥验证）              |\n\n3. **混淆 “公钥” 和 “对称加密”？—— 对称加密中没有 “公钥” 概念，公钥是 “非对称加密” 的核心要素**\n\t- **公钥**属于非对称加密体系，用于**安全传递对称密钥**；\n\t- 对称加密用的是单独的**对称密钥**，用于**高效传输实际数据**。\n\n#### 公钥私钥谁持有？\n\n- 服务器有自己的公钥（给客户端用）和私钥（自己留着）；\n- 客户端（若用密钥登录）也有自己的公钥（给服务器用）和私钥（自己留着）。  \n双方通过交换公钥，用对方的公钥加密信息，再用自己的私钥解密，完成安全交互。\n\n### **二、中间人攻击**\n\nSSH（Secure Shell）的中间人攻击（Man-in-the-Middle Attack，简称 MITM）是一种针对 SSH 加密通信的网络攻击手段，攻击者通过秘密介入客户端与服务器之间的通信，伪装成 “中间人” 窃取或篡改数据，同时让双方误以为正在直接通信。以下是详细解释：\n\n1. **原理**\n\t1. **拦截连接**：攻击者通过网络劫持（如 ARP 欺骗、DNS 劫持等），让客户端的连接请求发送        到自己的设备，而非目标服务器。\n\t2. **双重伪装**：\n\t    - 攻击者向客户端发送**自己的公钥**（伪装成服务器的公钥）。\n\t    - 同时，攻击者以客户端的身份连接目标服务器，获取服务器的真实公钥。\n\t1. **数据转发与窃听**：\n\t    - 客户端用攻击者的公钥加密数据后发送，攻击者解密并获取原始数据。\n\t    - 攻击者再用服务器的真实公钥加密数据，转发给服务器；反之亦然。\n\t2. **隐藏痕迹**：客户端和服务器均无法察觉中间人的存在，误以为在直接通信。\n\n2. **攻击成功的关键条件**\n\n\t中间人攻击能得逞，核心在于**绕过 SSH 的公钥验证机制，采用密码认证**：\n\t\t- **首次连接**：用户对服务器公钥的指纹（如`SHA256:xxxx`）缺乏认知，可能直接点击 “确认”（忽略安全提示），导致接受攻击者伪造的公钥。\n\t\t- **非首次连接**：攻击者通过技术手段（如修改客户端本地缓存的公钥记录），让客户端误以为服务器公钥未发生变化，从而跳过验证。\n\n3. **如何防范中间人攻击 —— 严格验证服务器公钥的合法性，并采用更安全的认证方式（如密钥认证）** \n  \n\t 1. **严格验证公钥指纹**：\n\t    - 首次连接服务器时，务必通过**可信渠道**（如线下、加密邮件）获取服务器公钥的指纹，与客户端显示的指纹比对，确认一致后再确认。\n\t    - 非首次连接时，若客户端提示 “公钥已更改”（可能是攻击或服务器真的更换了公钥），需暂停连接并排查原因。\n\t    \n\t2. **使用密钥认证替代密码认证**：\n\t    - SSH 密钥认证（公钥 - 私钥对）比密码认证更安全，即使中间人截获数据，也无法获取私钥（私钥仅存储在客户端）。\n\t    \n\t3. **限制 SSH 访问范围**：\n\t    - 通过防火墙或 SSH 配置（如`sshd_config`）限制允许连接的 IP 地址，减少被攻击的暴露面。\n\t    \n\t4. **使用额外安全机制**：\n\t    - 启用 SSH 的**主机密钥验证**（`StrictHostKeyChecking yes`），拒绝连接未知或公钥变化的服务器。\n\t    - 结合 VPN 或专用网络，减少中间人劫持的可能性。\n","updated":"2025-07-16T07:08:34.167Z","path":"Serve/SSH概念.html","comments":1,"layout":"page","_id":"cmd63a8cu000hk8v3d2t542e3","content":"<h3 id=\"一、SSH-的正常通信流程\"><a href=\"#一、SSH-的正常通信流程\" class=\"headerlink\" title=\"一、SSH 的正常通信流程\"></a><strong>一、SSH 的正常通信流程</strong></h3><ol>\n<li><strong>密钥交换</strong>：客户端发起连接后，服务器向客户端发送<strong>公钥</strong>（用于加密后续通信）。</li>\n<li><strong>身份验证</strong>：客户端验证服务器公钥的合法性（首次连接时会弹窗提示用户确认公钥指纹，后续连接则比对本地缓存）。</li>\n<li><strong>加密通信</strong>：验证通过后，双方<strong>基于公钥协商对称加密密钥，后续数据通过该密钥加密传输</strong>[[SSH概念#关于加密]]，确保私密性和完整性。</li>\n</ol>\n<h4 id=\"关于加密\"><a href=\"#关于加密\" class=\"headerlink\" title=\"关于加密\"></a>关于加密</h4><p><strong>一. 公钥与私钥 —— “公钥相当于一个锁，私钥就是解开这个锁的钥匙”</strong> </p>\n<ol>\n<li><strong>公钥（锁）与私钥（钥匙）的角色</strong><ul>\n<li><strong>公钥（锁）</strong>：可以公开传递，任何人都能获取。就像一把挂在门外的锁，别人可以用它锁东西，但只有钥匙的持有者才能打开。</li>\n<li><strong>私钥（钥匙）</strong>：必须严格保密，仅持有者拥有。用公钥加密的数据，只有对应的私钥才能解密（就像用锁锁上的盒子，只有钥匙能打开）。</li>\n</ul>\n</li>\n</ol>\n<p><strong>二. 非对称加密和对称加密 —— “结合了非对称加密和对称加密”</strong></p>\n<ol>\n<li><p>SSH 的加密机制包含<strong>非对称加密（用于安全协商）</strong> 和<strong>对称加密（用于数据传输）</strong> 两个核心环节,两者配合完成整个加密流程:</p>\n<ul>\n<li><p><strong>非对称加密</strong>：主要用于<strong>身份验证和建立安全连接的初始阶段</strong>。<br>  比如常见的 “公钥登录” 方式，就是通过一对非对称密钥（公钥存于服务器，私钥由客户端持有）验证客户端身份，确保连接发起方是合法用户。此外，SSH 握手时会用非对称加密协商后续对称加密的密钥（避免密钥在网络中明文传输）。</p>\n</li>\n<li><p><strong>对称加密</strong>：用于<strong>连接建立后的实际数据传输</strong>。<br>  因为非对称加密计算量大，不适合大量数据传输，所以 SSH 会在握手阶段通过非对称加密协商出一个临时的对称密钥，后续所有数据都用这个对称密钥加密，兼顾安全性和效率。</p>\n</li>\n</ul>\n</li>\n<li><p><strong>对称加密与非对称加密的核心区别</strong></p>\n</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th><strong>对比维度</strong></th>\n<th><strong>对称加密</strong></th>\n<th><strong>非对称加密</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>密钥数量与使用</strong></td>\n<td>只有<strong>1 个密钥</strong>（对称密钥），加密和解密都用它</td>\n<td>有<strong>2 个密钥</strong>（公钥 + 私钥），公钥加密、私钥解密（或反之）</td>\n</tr>\n<tr>\n<td><strong>密钥特性</strong></td>\n<td>密钥必须<strong>严格保密</strong>，且双方需提前共享</td>\n<td>公钥可<strong>公开传播</strong>，私钥必须保密</td>\n</tr>\n<tr>\n<td><strong>加密解密效率</strong></td>\n<td>速度极快（适合大量数据）</td>\n<td>速度较慢（适合小数据）</td>\n</tr>\n<tr>\n<td><strong>典型算法</strong></td>\n<td>AES、DES、RC4</td>\n<td>RSA、ECDH、DSA</td>\n</tr>\n<tr>\n<td><strong>核心场景</strong></td>\n<td>实际数据传输（如文件、会话内容）</td>\n<td>密钥交换、身份认证（如 SSH 公钥验证）</td>\n</tr>\n</tbody></table>\n<ol start=\"3\">\n<li><strong>混淆 “公钥” 和 “对称加密”？—— 对称加密中没有 “公钥” 概念，公钥是 “非对称加密” 的核心要素</strong><ul>\n<li><strong>公钥</strong>属于非对称加密体系，用于<strong>安全传递对称密钥</strong>；</li>\n<li>对称加密用的是单独的<strong>对称密钥</strong>，用于<strong>高效传输实际数据</strong>。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"公钥私钥谁持有？\"><a href=\"#公钥私钥谁持有？\" class=\"headerlink\" title=\"公钥私钥谁持有？\"></a>公钥私钥谁持有？</h4><ul>\n<li>服务器有自己的公钥（给客户端用）和私钥（自己留着）；</li>\n<li>客户端（若用密钥登录）也有自己的公钥（给服务器用）和私钥（自己留着）。<br>双方通过交换公钥，用对方的公钥加密信息，再用自己的私钥解密，完成安全交互。</li>\n</ul>\n<h3 id=\"二、中间人攻击\"><a href=\"#二、中间人攻击\" class=\"headerlink\" title=\"二、中间人攻击\"></a><strong>二、中间人攻击</strong></h3><p>SSH（Secure Shell）的中间人攻击（Man-in-the-Middle Attack，简称 MITM）是一种针对 SSH 加密通信的网络攻击手段，攻击者通过秘密介入客户端与服务器之间的通信，伪装成 “中间人” 窃取或篡改数据，同时让双方误以为正在直接通信。以下是详细解释：</p>\n<ol>\n<li><p><strong>原理</strong></p>\n<ol>\n<li><strong>拦截连接</strong>：攻击者通过网络劫持（如 ARP 欺骗、DNS 劫持等），让客户端的连接请求发送        到自己的设备，而非目标服务器。</li>\n<li><strong>双重伪装</strong>：<ul>\n<li>攻击者向客户端发送<strong>自己的公钥</strong>（伪装成服务器的公钥）。</li>\n<li>同时，攻击者以客户端的身份连接目标服务器，获取服务器的真实公钥。</li>\n</ul>\n</li>\n<li><strong>数据转发与窃听</strong>：<ul>\n<li>客户端用攻击者的公钥加密数据后发送，攻击者解密并获取原始数据。</li>\n<li>攻击者再用服务器的真实公钥加密数据，转发给服务器；反之亦然。</li>\n</ul>\n</li>\n<li><strong>隐藏痕迹</strong>：客户端和服务器均无法察觉中间人的存在，误以为在直接通信。</li>\n</ol>\n</li>\n<li><p><strong>攻击成功的关键条件</strong></p>\n<p> 中间人攻击能得逞，核心在于<strong>绕过 SSH 的公钥验证机制，采用密码认证</strong>：<br> - <strong>首次连接</strong>：用户对服务器公钥的指纹（如<code>SHA256:xxxx</code>）缺乏认知，可能直接点击 “确认”（忽略安全提示），导致接受攻击者伪造的公钥。<br> - <strong>非首次连接</strong>：攻击者通过技术手段（如修改客户端本地缓存的公钥记录），让客户端误以为服务器公钥未发生变化，从而跳过验证。</p>\n</li>\n<li><p><strong>如何防范中间人攻击 —— 严格验证服务器公钥的合法性，并采用更安全的认证方式（如密钥认证）</strong> </p>\n<ol>\n<li><p><strong>严格验证公钥指纹</strong>：</p>\n<ul>\n<li>首次连接服务器时，务必通过<strong>可信渠道</strong>（如线下、加密邮件）获取服务器公钥的指纹，与客户端显示的指纹比对，确认一致后再确认。</li>\n<li>非首次连接时，若客户端提示 “公钥已更改”（可能是攻击或服务器真的更换了公钥），需暂停连接并排查原因。</li>\n</ul>\n</li>\n<li><p><strong>使用密钥认证替代密码认证</strong>：</p>\n<ul>\n<li>SSH 密钥认证（公钥 - 私钥对）比密码认证更安全，即使中间人截获数据，也无法获取私钥（私钥仅存储在客户端）。</li>\n</ul>\n</li>\n<li><p><strong>限制 SSH 访问范围</strong>：</p>\n<ul>\n<li>通过防火墙或 SSH 配置（如<code>sshd_config</code>）限制允许连接的 IP 地址，减少被攻击的暴露面。</li>\n</ul>\n</li>\n<li><p><strong>使用额外安全机制</strong>：</p>\n<ul>\n<li>启用 SSH 的<strong>主机密钥验证</strong>（<code>StrictHostKeyChecking yes</code>），拒绝连接未知或公钥变化的服务器。</li>\n<li>结合 VPN 或专用网络，减少中间人劫持的可能性。</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n","excerpt":"","more":"<h3 id=\"一、SSH-的正常通信流程\"><a href=\"#一、SSH-的正常通信流程\" class=\"headerlink\" title=\"一、SSH 的正常通信流程\"></a><strong>一、SSH 的正常通信流程</strong></h3><ol>\n<li><strong>密钥交换</strong>：客户端发起连接后，服务器向客户端发送<strong>公钥</strong>（用于加密后续通信）。</li>\n<li><strong>身份验证</strong>：客户端验证服务器公钥的合法性（首次连接时会弹窗提示用户确认公钥指纹，后续连接则比对本地缓存）。</li>\n<li><strong>加密通信</strong>：验证通过后，双方<strong>基于公钥协商对称加密密钥，后续数据通过该密钥加密传输</strong>[[SSH概念#关于加密]]，确保私密性和完整性。</li>\n</ol>\n<h4 id=\"关于加密\"><a href=\"#关于加密\" class=\"headerlink\" title=\"关于加密\"></a>关于加密</h4><p><strong>一. 公钥与私钥 —— “公钥相当于一个锁，私钥就是解开这个锁的钥匙”</strong> </p>\n<ol>\n<li><strong>公钥（锁）与私钥（钥匙）的角色</strong><ul>\n<li><strong>公钥（锁）</strong>：可以公开传递，任何人都能获取。就像一把挂在门外的锁，别人可以用它锁东西，但只有钥匙的持有者才能打开。</li>\n<li><strong>私钥（钥匙）</strong>：必须严格保密，仅持有者拥有。用公钥加密的数据，只有对应的私钥才能解密（就像用锁锁上的盒子，只有钥匙能打开）。</li>\n</ul>\n</li>\n</ol>\n<p><strong>二. 非对称加密和对称加密 —— “结合了非对称加密和对称加密”</strong></p>\n<ol>\n<li><p>SSH 的加密机制包含<strong>非对称加密（用于安全协商）</strong> 和<strong>对称加密（用于数据传输）</strong> 两个核心环节,两者配合完成整个加密流程:</p>\n<ul>\n<li><p><strong>非对称加密</strong>：主要用于<strong>身份验证和建立安全连接的初始阶段</strong>。<br>  比如常见的 “公钥登录” 方式，就是通过一对非对称密钥（公钥存于服务器，私钥由客户端持有）验证客户端身份，确保连接发起方是合法用户。此外，SSH 握手时会用非对称加密协商后续对称加密的密钥（避免密钥在网络中明文传输）。</p>\n</li>\n<li><p><strong>对称加密</strong>：用于<strong>连接建立后的实际数据传输</strong>。<br>  因为非对称加密计算量大，不适合大量数据传输，所以 SSH 会在握手阶段通过非对称加密协商出一个临时的对称密钥，后续所有数据都用这个对称密钥加密，兼顾安全性和效率。</p>\n</li>\n</ul>\n</li>\n<li><p><strong>对称加密与非对称加密的核心区别</strong></p>\n</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th><strong>对比维度</strong></th>\n<th><strong>对称加密</strong></th>\n<th><strong>非对称加密</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>密钥数量与使用</strong></td>\n<td>只有<strong>1 个密钥</strong>（对称密钥），加密和解密都用它</td>\n<td>有<strong>2 个密钥</strong>（公钥 + 私钥），公钥加密、私钥解密（或反之）</td>\n</tr>\n<tr>\n<td><strong>密钥特性</strong></td>\n<td>密钥必须<strong>严格保密</strong>，且双方需提前共享</td>\n<td>公钥可<strong>公开传播</strong>，私钥必须保密</td>\n</tr>\n<tr>\n<td><strong>加密解密效率</strong></td>\n<td>速度极快（适合大量数据）</td>\n<td>速度较慢（适合小数据）</td>\n</tr>\n<tr>\n<td><strong>典型算法</strong></td>\n<td>AES、DES、RC4</td>\n<td>RSA、ECDH、DSA</td>\n</tr>\n<tr>\n<td><strong>核心场景</strong></td>\n<td>实际数据传输（如文件、会话内容）</td>\n<td>密钥交换、身份认证（如 SSH 公钥验证）</td>\n</tr>\n</tbody></table>\n<ol start=\"3\">\n<li><strong>混淆 “公钥” 和 “对称加密”？—— 对称加密中没有 “公钥” 概念，公钥是 “非对称加密” 的核心要素</strong><ul>\n<li><strong>公钥</strong>属于非对称加密体系，用于<strong>安全传递对称密钥</strong>；</li>\n<li>对称加密用的是单独的<strong>对称密钥</strong>，用于<strong>高效传输实际数据</strong>。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"公钥私钥谁持有？\"><a href=\"#公钥私钥谁持有？\" class=\"headerlink\" title=\"公钥私钥谁持有？\"></a>公钥私钥谁持有？</h4><ul>\n<li>服务器有自己的公钥（给客户端用）和私钥（自己留着）；</li>\n<li>客户端（若用密钥登录）也有自己的公钥（给服务器用）和私钥（自己留着）。<br>双方通过交换公钥，用对方的公钥加密信息，再用自己的私钥解密，完成安全交互。</li>\n</ul>\n<h3 id=\"二、中间人攻击\"><a href=\"#二、中间人攻击\" class=\"headerlink\" title=\"二、中间人攻击\"></a><strong>二、中间人攻击</strong></h3><p>SSH（Secure Shell）的中间人攻击（Man-in-the-Middle Attack，简称 MITM）是一种针对 SSH 加密通信的网络攻击手段，攻击者通过秘密介入客户端与服务器之间的通信，伪装成 “中间人” 窃取或篡改数据，同时让双方误以为正在直接通信。以下是详细解释：</p>\n<ol>\n<li><p><strong>原理</strong></p>\n<ol>\n<li><strong>拦截连接</strong>：攻击者通过网络劫持（如 ARP 欺骗、DNS 劫持等），让客户端的连接请求发送        到自己的设备，而非目标服务器。</li>\n<li><strong>双重伪装</strong>：<ul>\n<li>攻击者向客户端发送<strong>自己的公钥</strong>（伪装成服务器的公钥）。</li>\n<li>同时，攻击者以客户端的身份连接目标服务器，获取服务器的真实公钥。</li>\n</ul>\n</li>\n<li><strong>数据转发与窃听</strong>：<ul>\n<li>客户端用攻击者的公钥加密数据后发送，攻击者解密并获取原始数据。</li>\n<li>攻击者再用服务器的真实公钥加密数据，转发给服务器；反之亦然。</li>\n</ul>\n</li>\n<li><strong>隐藏痕迹</strong>：客户端和服务器均无法察觉中间人的存在，误以为在直接通信。</li>\n</ol>\n</li>\n<li><p><strong>攻击成功的关键条件</strong></p>\n<p> 中间人攻击能得逞，核心在于<strong>绕过 SSH 的公钥验证机制，采用密码认证</strong>：<br> - <strong>首次连接</strong>：用户对服务器公钥的指纹（如<code>SHA256:xxxx</code>）缺乏认知，可能直接点击 “确认”（忽略安全提示），导致接受攻击者伪造的公钥。<br> - <strong>非首次连接</strong>：攻击者通过技术手段（如修改客户端本地缓存的公钥记录），让客户端误以为服务器公钥未发生变化，从而跳过验证。</p>\n</li>\n<li><p><strong>如何防范中间人攻击 —— 严格验证服务器公钥的合法性，并采用更安全的认证方式（如密钥认证）</strong> </p>\n<ol>\n<li><p><strong>严格验证公钥指纹</strong>：</p>\n<ul>\n<li>首次连接服务器时，务必通过<strong>可信渠道</strong>（如线下、加密邮件）获取服务器公钥的指纹，与客户端显示的指纹比对，确认一致后再确认。</li>\n<li>非首次连接时，若客户端提示 “公钥已更改”（可能是攻击或服务器真的更换了公钥），需暂停连接并排查原因。</li>\n</ul>\n</li>\n<li><p><strong>使用密钥认证替代密码认证</strong>：</p>\n<ul>\n<li>SSH 密钥认证（公钥 - 私钥对）比密码认证更安全，即使中间人截获数据，也无法获取私钥（私钥仅存储在客户端）。</li>\n</ul>\n</li>\n<li><p><strong>限制 SSH 访问范围</strong>：</p>\n<ul>\n<li>通过防火墙或 SSH 配置（如<code>sshd_config</code>）限制允许连接的 IP 地址，减少被攻击的暴露面。</li>\n</ul>\n</li>\n<li><p><strong>使用额外安全机制</strong>：</p>\n<ul>\n<li>启用 SSH 的<strong>主机密钥验证</strong>（<code>StrictHostKeyChecking yes</code>），拒绝连接未知或公钥变化的服务器。</li>\n<li>结合 VPN 或专用网络，减少中间人劫持的可能性。</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n"},{"title":"为什么称Tomcat为服务器？","date":"2025-07-15T16:00:00.000Z","cssclasses":["Serve","Tomcat"],"_content":"服务器应该是冷冰冰的大铁柜，在恒温恒湿的机房里待着，所以Tomcat是什么呢，为什么也叫服务器呢？\n\n## **我们为什么需要服务器？**\n\n在我看来，服务器最本质的作用有两个：\n\n- 将资源对外暴露\n- 配合各种传输协议进行响应输出\n\n假设现在有个问题：\n\n> 给你两台电脑，不通过蓝牙/QQ/微信，也不通过网盘或USB等可移动设备做中介，你要如何把一张图片从一台电脑传到另一台？\n\n![](https://picx.zhimg.com/50/v2-aac37732401f6a92d61e7e7887a3ace5_720w.jpg?source=2c26e567)\n\n听到这个问题，我估计大部分非科班的朋友都要懵。因为如果后期没有刻意去学习计算机网络，我们对于网络的了解基本仅限于基础班4小时的“网络编程”讲解。而大家平时又太习惯地址栏键入\"[www.baidu.com](https://link.zhihu.com/?target=http%3A//www.baidu.com/)\"，无脑一回车就上网冲浪了。现在突然让你去访问隔壁的电脑，确实有点束手无策。\n\n解决这个问题的方法可能有多种，这里介绍其中一种：通过服务器访问。\n\n请先了解以下三个概念：\n\n- IP：电子设备（计算机）在网络中的唯一标识，一个IP对应一台**实体**电脑\n- 端口：应用程序在计算机中的唯一标识，一个端口只能被唯一程序占用\n- 传输协议：数据传输的规则\n\n中国有14亿人口，每个人都有唯一的身份标识：身份证，用以精确定位某个个体。同样的，网络上有几十亿台电脑，每台电脑都有自己的一串特有IP（不同局域网内可以相同），也就是说一个IP代表一台特定的**实体**电脑。比如《唐伯虎点秋香》中华安的编号是9527，而华府的管家从不叫他名字，而是直接喊“9527”。因为“9527”就是华安。\n\n![](https://pica.zhimg.com/50/v2-9426b26e3fc6b83d059219f332709e7b_720w.jpg?source=2c26e567)\n\n虽然根据IP可以精准定位一台电脑，但是还不足以让我们访问这台电脑。就好比你知道了我的门牌号，但是我没给你开门。所谓的门，就是一个端口，而端口的背后是应用程序。\n\n一般来说，一个端口可以定位一个软件，但一个软件可以占用多个端口（你家的门，只属于你家，但可以有前后门）。在现实生活中，你家的门如果被别人占用了或者堵了，客人（请求）就进不去了。而在程序中，如果有两个程序的端口相同，就会发生端口冲突，也就是所谓的“端口占用”。端口占用的后果往往是程序无法启动，更遑论运行。\n\n关于端口，再举个例子：\n\n微信和QQ都是腾讯公司的，你的电脑上同时装了这两个软件。为什么我用QQ给你发消息，你的微信收不到？正常人看起来很傻的问题，实际上并不是那么简单。\n\n![](https://pic1.zhimg.com/50/v2-9e08ae4c572d55eb4c6e652f14902496_720w.jpg?source=2c26e567)\n\n每个应用程序都有自己的端口号（可能有多个），它们一旦运行，就要去监听这些端口。每个程序都是电脑的囚犯，看不到外面的世界，而端口就是给这些囚犯送饭的窗口。应用程序们整天躲在电脑里盯着自己的端口们，祈求着别的计算机来访时能送个大鸡腿(Request请求)。\n\n其实QQ这些软件属于C/S架构，已经为我们屏蔽了太多底层，什么IP、端口全部都是自动封装的。相比来说，B/S架构更直观一些。比如用浏览器访问百度：\n\n![](https://picx.zhimg.com/50/v2-1ebb772d4f718d6a2fefac68bb1a15d4_720w.jpg?source=2c26e567)\n\n不知道有没有细心的朋友注意到了下面的细节：\n\n![](https://pica.zhimg.com/50/v2-8aa4aa66f571b33062fd1274f2043fa8_720w.jpg?source=2c26e567)\n\n即使DNS解析域名得到对应的IP后，Request请求里还是会带上host。为什么？\n\n**因为：域名!=IP。**\n\n实际上一个IP可以对应多个域名。也就是说**一台实体服务器（大铁柜）**，理论上可以有**多个域名（虚拟主机）。**实体服务器和网站是两个概念。**IP只是对应实体服务器，而域名对应具体的网站。**\n\n比如上面百度服务器，虽然看起来115.239.210.27这个IP完全等同于[http://www.baidu.com](https://link.zhihu.com/?target=http%3A//www.baidu.com)，但也有可能这个IP对应的服务器上配置了两个虚拟主机：[www.baidu.com](https://link.zhihu.com/?target=http%3A//www.baidu.com/)和[tieba.baidu.com](https://link.zhihu.com/?target=http%3A//tieba.baidu.com/)。所以即使找到了IP对应的服务器实体，Request请求还是要带上host主机名，以确定是哪个虚拟主机。\n\n![](https://picx.zhimg.com/50/v2-47a7ba9165e0081e5c6dea7a0bf0423a_720w.jpg?source=2c26e567)\n\n另外，如果两个域名对应同一个IP，那么必须设置其中一个域名为默认的，不然同一台服务器有两个虚拟主机，我该访问谁？\n\n![](https://pic1.zhimg.com/50/v2-5af11c448cb3de2311ad91df8578ed3c_720w.jpg?source=2c26e567)\n\n最后，再用Tomcat举个例子。比如，现在我有一台笔记本电脑（一个实体服务器），它的本机IP是192.168.112.1，我在上面装了Tomcat。如果Tomcat不改动配置，则默认只有一个虚拟主机localhost（默认主机）。接着我开发了一个JavaWeb程序demo1部署到Tomcat，然后我同事在浏览器输入下方地址\n\n```text\n192.168.112.1:8080/demo1/index.html\n```\n\n访问我的电脑。虽然没有带host，但是localhost是默认的，于是访问它。\n\n![](https://pic1.zhimg.com/50/v2-453c49379a5816d1f19c7f965d721151_720w.jpg?source=2c26e567)\n\n最后必须解释的是，上面的百度服务器只是举个例子，实际上百度搜索和百度贴吧的IP是不同的，也就是说它们不在同一台服务器上。通常来说，一个IP对应一台服务器，服务器上只有一个主机。拿到IP基本就可以确定要访问哪个网站。\n\n![](https://pic1.zhimg.com/50/v2-79d343e2d5d3d5d9574d075aba1e6cd6_720w.jpg?source=2c26e567)\n\n![](https://picx.zhimg.com/50/v2-79ab58d3761d889a07efbaa99e081d19_720w.jpg?source=2c26e567)\n\n---\n\n## **3个容易混淆的小概念**\n\n我们经常开口闭口“服务器”、“服务器”的，其实“服务器”是个很容易引发歧义的概念，我能想到的就有3点：\n\n### 软件概念的服务器和硬件概念的服务器\n\n软件概念上，只要是一台硬件配置正常、装有操作系统、插着电能上网，并且安装特定软件的电脑，都可以称为服务器。比如你要学习数据库了，于是你装了MySQL服务端，那么此时你的电脑就是一个MySQL服务器。然后你又装了SVN服务端，那么此时你的电脑既是MySQL服务器，又是SVN服务器。Tomcat服务器同理。\n\n硬件概念上，服务器本质上也是一台电脑，只不过配置高的同时长相丑了点，基本就是一个冰冷的大铁柜。我们的笔记本电脑既能看片又能玩游戏，而它们基本上专机专用。\n\n### Web服务器？Web容器？\n\n其实，Tomcat服务器 = Web服务器 + Servlet/JSP容器（Web容器）。\n\nWeb服务器的作用是接收客户端的请求，给客户端作出响应。但是很明显，服务器不止静态资源呀，所以客户端发起请求后，如果是动态资源，Web服务器不可能直接把它响应回去（比如JSP），因为浏览器只认识静态资源。所以对于JavaWeb程序而言，还需要JSP/Servlet容器，**JSP/Servlet容器的基本功能是把动态资源转换成静态资源。**我们JavaWeb工程师需要使用Web服务器和JSP/Servlet容器，而通常这两者会集于一身，比如Tomcat。\n\n![](https://pic1.zhimg.com/50/v2-c1761ba4e406196374fb7734966e8f97_720w.jpg?source=2c26e567)\n\n所以刚才我们画的百度服务器，其实细节还可以更丰满些：\n\n![](https://pica.zhimg.com/50/v2-3a892ca4b13c7c22d395d4e7f7b5468f_720w.jpg?source=2c26e567)\n\n![](https://pic1.zhimg.com/50/v2-2f0979f08ceb7f64d169676069720bd6_720w.jpg?source=2c26e567)\n\n### 我们开发的Web应用都是半成品！\n\n我们写代码的时候，都知道相同代码最好抽取成公共方法以复用。现在我们来想一想，上百上千的Web应用有什么共性吗？首先，资源肯定不同，无法抽取。比如优酷主打视频，知乎基本都是文字。其次，业务也肯定不同，比如百度主要是搜索，淘宝是电商。但是有一点是一样的，这些网站都需要“接收用户请求”+“响应用户请求”。\n\n嗯？桥多麻袋！！这两个概念，好像哪里见过！不错，就是上面的Web服务器。仔细回想一下，我们开发JavaWeb时，你操心过如何接收HTTP请求和响应HTTP请求吗？显然没有嘛！因为你一直忙着debug。\n\n**所以，我们用Java开发的Web应用只是一个半成品，类似于一个插件**，而服务器则像一个收发器：\n\n![](https://picx.zhimg.com/50/v2-3a0b16ad4fbe56db177c72f674988896_720w.jpg?source=2c26e567)\n\n  \n\n---\n\n## **什么是动态资源？**\n\n其实对于何谓动态资源，我也没有很精准的概念。要讲清楚一个东西是什么，有时是比较难的事。不如先说它不是什么。\n\n首先，**动态资源不等同于动态页面。**所谓动态页面，就是页面会动，而会动的页面不一定是动态资源。比如我可以用JQuery执行一段代码，让一个Div不断放大缩小，但是很显然它还是一个HTML页面。\n\n**所谓动态资源，其实最显著的特征就是它能动态地生成HTML！**比如JSP。动态资源有个“特色”：它的数据是“可拼装”的、而且“可以随时间变化”。下面用号称可以抗住8个明星同时出轨的新浪服务器举个例子：\n\n![](https://pic1.zhimg.com/50/v2-38f7da8e2645d23d7b89bfe5e6579b93_720w.jpg?source=2c26e567)\n\n突然，新浪《花花世界》专栏的小编发现，原来和bravo1988有绯闻的不是刘亦菲，而是佟丽娅，于是打开专栏做了修改：\n\n![](https://picx.zhimg.com/50/v2-7163a0b73be6115eab0d91098e53204a_720w.jpg?source=2c26e567)\n\n此时，粉丝们再次打开《花花世界》专栏，看到的就是：佟丽娅深夜买醉bravo。\n\n上面这个例子很好地说明了动态资源（JSP）的两个特性：\n\n- 可拼装：${name}\"深夜买醉bravo\"\n- 随时间变化：刘亦菲→佟丽娅\n\n那么为什么说HTML就是静态资源呢？我也可以修改HTML页面使它发生改变啊！很好，很有想法。那么请小编先学会Linux，然后远程连接服务器进入到Tomcat目录下修改吧。\n\n![](https://pica.zhimg.com/50/v2-d29651cfbd959e8d4cad551feabc1046_720w.jpg?source=2c26e567)\n\n动态资源和静态资源虽然都在服务器里，但是动态资源包含变量（“可拼装”特性），而变量维系着数据库和程序之间的联系。\n\n如果把JSP比作电子广告牌，变量比作一根电线，而电线连接着一台电脑（数据库服务器）。那么只要电脑上重新编辑文本，广告牌的内容也会变，此谓动态。而静态资源就像一张布告，当初写什么就是什么，任他风吹雨打，都不会再改变了。\n\n![](https://pica.zhimg.com/50/v2-07d5a0b4c4aea91562adfe8970a6983b_720w.jpg?source=2c26e567)\n\n  \n\n## **动手实现\"Tomcat\"**\n\n最后，还有个很无聊的问题留给大家思考：JavaSE阶段，我们无论做什么，都是上来先敲main()。学了JavaWeb后，我想问问，你有多久没敲main()了？她去哪了呢？\n\n动手实现Tomcat（黑马公开课）：\n\n链接：[https://pan.baidu.com/s/1gCWs7Jsr2qtABXQN7HHegw](https://link.zhihu.com/?target=https%3A//pan.baidu.com/s/1gCWs7Jsr2qtABXQN7HHegw) 密码：35se\n\n![](https://picx.zhimg.com/50/v2-b58fff7721b59b7f784193041339c499_720w.jpg?source=2c26e567)\n\n---\n作者：bravo1988  \n链接：https://www.zhihu.com/question/391134143/answer/1777384319  \n来源：知乎  ","source":"Serve/为什么称Tomcat为服务器？.md","raw":"---\ntitle: 为什么称Tomcat为服务器？\ndate: 2025-07-16\ncssclasses:\n  - Serve\n  - Tomcat\n---\n服务器应该是冷冰冰的大铁柜，在恒温恒湿的机房里待着，所以Tomcat是什么呢，为什么也叫服务器呢？\n\n## **我们为什么需要服务器？**\n\n在我看来，服务器最本质的作用有两个：\n\n- 将资源对外暴露\n- 配合各种传输协议进行响应输出\n\n假设现在有个问题：\n\n> 给你两台电脑，不通过蓝牙/QQ/微信，也不通过网盘或USB等可移动设备做中介，你要如何把一张图片从一台电脑传到另一台？\n\n![](https://picx.zhimg.com/50/v2-aac37732401f6a92d61e7e7887a3ace5_720w.jpg?source=2c26e567)\n\n听到这个问题，我估计大部分非科班的朋友都要懵。因为如果后期没有刻意去学习计算机网络，我们对于网络的了解基本仅限于基础班4小时的“网络编程”讲解。而大家平时又太习惯地址栏键入\"[www.baidu.com](https://link.zhihu.com/?target=http%3A//www.baidu.com/)\"，无脑一回车就上网冲浪了。现在突然让你去访问隔壁的电脑，确实有点束手无策。\n\n解决这个问题的方法可能有多种，这里介绍其中一种：通过服务器访问。\n\n请先了解以下三个概念：\n\n- IP：电子设备（计算机）在网络中的唯一标识，一个IP对应一台**实体**电脑\n- 端口：应用程序在计算机中的唯一标识，一个端口只能被唯一程序占用\n- 传输协议：数据传输的规则\n\n中国有14亿人口，每个人都有唯一的身份标识：身份证，用以精确定位某个个体。同样的，网络上有几十亿台电脑，每台电脑都有自己的一串特有IP（不同局域网内可以相同），也就是说一个IP代表一台特定的**实体**电脑。比如《唐伯虎点秋香》中华安的编号是9527，而华府的管家从不叫他名字，而是直接喊“9527”。因为“9527”就是华安。\n\n![](https://pica.zhimg.com/50/v2-9426b26e3fc6b83d059219f332709e7b_720w.jpg?source=2c26e567)\n\n虽然根据IP可以精准定位一台电脑，但是还不足以让我们访问这台电脑。就好比你知道了我的门牌号，但是我没给你开门。所谓的门，就是一个端口，而端口的背后是应用程序。\n\n一般来说，一个端口可以定位一个软件，但一个软件可以占用多个端口（你家的门，只属于你家，但可以有前后门）。在现实生活中，你家的门如果被别人占用了或者堵了，客人（请求）就进不去了。而在程序中，如果有两个程序的端口相同，就会发生端口冲突，也就是所谓的“端口占用”。端口占用的后果往往是程序无法启动，更遑论运行。\n\n关于端口，再举个例子：\n\n微信和QQ都是腾讯公司的，你的电脑上同时装了这两个软件。为什么我用QQ给你发消息，你的微信收不到？正常人看起来很傻的问题，实际上并不是那么简单。\n\n![](https://pic1.zhimg.com/50/v2-9e08ae4c572d55eb4c6e652f14902496_720w.jpg?source=2c26e567)\n\n每个应用程序都有自己的端口号（可能有多个），它们一旦运行，就要去监听这些端口。每个程序都是电脑的囚犯，看不到外面的世界，而端口就是给这些囚犯送饭的窗口。应用程序们整天躲在电脑里盯着自己的端口们，祈求着别的计算机来访时能送个大鸡腿(Request请求)。\n\n其实QQ这些软件属于C/S架构，已经为我们屏蔽了太多底层，什么IP、端口全部都是自动封装的。相比来说，B/S架构更直观一些。比如用浏览器访问百度：\n\n![](https://picx.zhimg.com/50/v2-1ebb772d4f718d6a2fefac68bb1a15d4_720w.jpg?source=2c26e567)\n\n不知道有没有细心的朋友注意到了下面的细节：\n\n![](https://pica.zhimg.com/50/v2-8aa4aa66f571b33062fd1274f2043fa8_720w.jpg?source=2c26e567)\n\n即使DNS解析域名得到对应的IP后，Request请求里还是会带上host。为什么？\n\n**因为：域名!=IP。**\n\n实际上一个IP可以对应多个域名。也就是说**一台实体服务器（大铁柜）**，理论上可以有**多个域名（虚拟主机）。**实体服务器和网站是两个概念。**IP只是对应实体服务器，而域名对应具体的网站。**\n\n比如上面百度服务器，虽然看起来115.239.210.27这个IP完全等同于[http://www.baidu.com](https://link.zhihu.com/?target=http%3A//www.baidu.com)，但也有可能这个IP对应的服务器上配置了两个虚拟主机：[www.baidu.com](https://link.zhihu.com/?target=http%3A//www.baidu.com/)和[tieba.baidu.com](https://link.zhihu.com/?target=http%3A//tieba.baidu.com/)。所以即使找到了IP对应的服务器实体，Request请求还是要带上host主机名，以确定是哪个虚拟主机。\n\n![](https://picx.zhimg.com/50/v2-47a7ba9165e0081e5c6dea7a0bf0423a_720w.jpg?source=2c26e567)\n\n另外，如果两个域名对应同一个IP，那么必须设置其中一个域名为默认的，不然同一台服务器有两个虚拟主机，我该访问谁？\n\n![](https://pic1.zhimg.com/50/v2-5af11c448cb3de2311ad91df8578ed3c_720w.jpg?source=2c26e567)\n\n最后，再用Tomcat举个例子。比如，现在我有一台笔记本电脑（一个实体服务器），它的本机IP是192.168.112.1，我在上面装了Tomcat。如果Tomcat不改动配置，则默认只有一个虚拟主机localhost（默认主机）。接着我开发了一个JavaWeb程序demo1部署到Tomcat，然后我同事在浏览器输入下方地址\n\n```text\n192.168.112.1:8080/demo1/index.html\n```\n\n访问我的电脑。虽然没有带host，但是localhost是默认的，于是访问它。\n\n![](https://pic1.zhimg.com/50/v2-453c49379a5816d1f19c7f965d721151_720w.jpg?source=2c26e567)\n\n最后必须解释的是，上面的百度服务器只是举个例子，实际上百度搜索和百度贴吧的IP是不同的，也就是说它们不在同一台服务器上。通常来说，一个IP对应一台服务器，服务器上只有一个主机。拿到IP基本就可以确定要访问哪个网站。\n\n![](https://pic1.zhimg.com/50/v2-79d343e2d5d3d5d9574d075aba1e6cd6_720w.jpg?source=2c26e567)\n\n![](https://picx.zhimg.com/50/v2-79ab58d3761d889a07efbaa99e081d19_720w.jpg?source=2c26e567)\n\n---\n\n## **3个容易混淆的小概念**\n\n我们经常开口闭口“服务器”、“服务器”的，其实“服务器”是个很容易引发歧义的概念，我能想到的就有3点：\n\n### 软件概念的服务器和硬件概念的服务器\n\n软件概念上，只要是一台硬件配置正常、装有操作系统、插着电能上网，并且安装特定软件的电脑，都可以称为服务器。比如你要学习数据库了，于是你装了MySQL服务端，那么此时你的电脑就是一个MySQL服务器。然后你又装了SVN服务端，那么此时你的电脑既是MySQL服务器，又是SVN服务器。Tomcat服务器同理。\n\n硬件概念上，服务器本质上也是一台电脑，只不过配置高的同时长相丑了点，基本就是一个冰冷的大铁柜。我们的笔记本电脑既能看片又能玩游戏，而它们基本上专机专用。\n\n### Web服务器？Web容器？\n\n其实，Tomcat服务器 = Web服务器 + Servlet/JSP容器（Web容器）。\n\nWeb服务器的作用是接收客户端的请求，给客户端作出响应。但是很明显，服务器不止静态资源呀，所以客户端发起请求后，如果是动态资源，Web服务器不可能直接把它响应回去（比如JSP），因为浏览器只认识静态资源。所以对于JavaWeb程序而言，还需要JSP/Servlet容器，**JSP/Servlet容器的基本功能是把动态资源转换成静态资源。**我们JavaWeb工程师需要使用Web服务器和JSP/Servlet容器，而通常这两者会集于一身，比如Tomcat。\n\n![](https://pic1.zhimg.com/50/v2-c1761ba4e406196374fb7734966e8f97_720w.jpg?source=2c26e567)\n\n所以刚才我们画的百度服务器，其实细节还可以更丰满些：\n\n![](https://pica.zhimg.com/50/v2-3a892ca4b13c7c22d395d4e7f7b5468f_720w.jpg?source=2c26e567)\n\n![](https://pic1.zhimg.com/50/v2-2f0979f08ceb7f64d169676069720bd6_720w.jpg?source=2c26e567)\n\n### 我们开发的Web应用都是半成品！\n\n我们写代码的时候，都知道相同代码最好抽取成公共方法以复用。现在我们来想一想，上百上千的Web应用有什么共性吗？首先，资源肯定不同，无法抽取。比如优酷主打视频，知乎基本都是文字。其次，业务也肯定不同，比如百度主要是搜索，淘宝是电商。但是有一点是一样的，这些网站都需要“接收用户请求”+“响应用户请求”。\n\n嗯？桥多麻袋！！这两个概念，好像哪里见过！不错，就是上面的Web服务器。仔细回想一下，我们开发JavaWeb时，你操心过如何接收HTTP请求和响应HTTP请求吗？显然没有嘛！因为你一直忙着debug。\n\n**所以，我们用Java开发的Web应用只是一个半成品，类似于一个插件**，而服务器则像一个收发器：\n\n![](https://picx.zhimg.com/50/v2-3a0b16ad4fbe56db177c72f674988896_720w.jpg?source=2c26e567)\n\n  \n\n---\n\n## **什么是动态资源？**\n\n其实对于何谓动态资源，我也没有很精准的概念。要讲清楚一个东西是什么，有时是比较难的事。不如先说它不是什么。\n\n首先，**动态资源不等同于动态页面。**所谓动态页面，就是页面会动，而会动的页面不一定是动态资源。比如我可以用JQuery执行一段代码，让一个Div不断放大缩小，但是很显然它还是一个HTML页面。\n\n**所谓动态资源，其实最显著的特征就是它能动态地生成HTML！**比如JSP。动态资源有个“特色”：它的数据是“可拼装”的、而且“可以随时间变化”。下面用号称可以抗住8个明星同时出轨的新浪服务器举个例子：\n\n![](https://pic1.zhimg.com/50/v2-38f7da8e2645d23d7b89bfe5e6579b93_720w.jpg?source=2c26e567)\n\n突然，新浪《花花世界》专栏的小编发现，原来和bravo1988有绯闻的不是刘亦菲，而是佟丽娅，于是打开专栏做了修改：\n\n![](https://picx.zhimg.com/50/v2-7163a0b73be6115eab0d91098e53204a_720w.jpg?source=2c26e567)\n\n此时，粉丝们再次打开《花花世界》专栏，看到的就是：佟丽娅深夜买醉bravo。\n\n上面这个例子很好地说明了动态资源（JSP）的两个特性：\n\n- 可拼装：${name}\"深夜买醉bravo\"\n- 随时间变化：刘亦菲→佟丽娅\n\n那么为什么说HTML就是静态资源呢？我也可以修改HTML页面使它发生改变啊！很好，很有想法。那么请小编先学会Linux，然后远程连接服务器进入到Tomcat目录下修改吧。\n\n![](https://pica.zhimg.com/50/v2-d29651cfbd959e8d4cad551feabc1046_720w.jpg?source=2c26e567)\n\n动态资源和静态资源虽然都在服务器里，但是动态资源包含变量（“可拼装”特性），而变量维系着数据库和程序之间的联系。\n\n如果把JSP比作电子广告牌，变量比作一根电线，而电线连接着一台电脑（数据库服务器）。那么只要电脑上重新编辑文本，广告牌的内容也会变，此谓动态。而静态资源就像一张布告，当初写什么就是什么，任他风吹雨打，都不会再改变了。\n\n![](https://pica.zhimg.com/50/v2-07d5a0b4c4aea91562adfe8970a6983b_720w.jpg?source=2c26e567)\n\n  \n\n## **动手实现\"Tomcat\"**\n\n最后，还有个很无聊的问题留给大家思考：JavaSE阶段，我们无论做什么，都是上来先敲main()。学了JavaWeb后，我想问问，你有多久没敲main()了？她去哪了呢？\n\n动手实现Tomcat（黑马公开课）：\n\n链接：[https://pan.baidu.com/s/1gCWs7Jsr2qtABXQN7HHegw](https://link.zhihu.com/?target=https%3A//pan.baidu.com/s/1gCWs7Jsr2qtABXQN7HHegw) 密码：35se\n\n![](https://picx.zhimg.com/50/v2-b58fff7721b59b7f784193041339c499_720w.jpg?source=2c26e567)\n\n---\n作者：bravo1988  \n链接：https://www.zhihu.com/question/391134143/answer/1777384319  \n来源：知乎  ","updated":"2025-07-16T10:39:58.988Z","path":"Serve/为什么称Tomcat为服务器？.html","comments":1,"layout":"page","_id":"cmd63a8cu000ik8v320o0gohe","content":"<p>服务器应该是冷冰冰的大铁柜，在恒温恒湿的机房里待着，所以Tomcat是什么呢，为什么也叫服务器呢？</p>\n<h2 id=\"我们为什么需要服务器？\"><a href=\"#我们为什么需要服务器？\" class=\"headerlink\" title=\"我们为什么需要服务器？\"></a><strong>我们为什么需要服务器？</strong></h2><p>在我看来，服务器最本质的作用有两个：</p>\n<ul>\n<li>将资源对外暴露</li>\n<li>配合各种传输协议进行响应输出</li>\n</ul>\n<p>假设现在有个问题：</p>\n<blockquote>\n<p>给你两台电脑，不通过蓝牙&#x2F;QQ&#x2F;微信，也不通过网盘或USB等可移动设备做中介，你要如何把一张图片从一台电脑传到另一台？</p>\n</blockquote>\n<p><img src=\"https://picx.zhimg.com/50/v2-aac37732401f6a92d61e7e7887a3ace5_720w.jpg?source=2c26e567\"></p>\n<p>听到这个问题，我估计大部分非科班的朋友都要懵。因为如果后期没有刻意去学习计算机网络，我们对于网络的了解基本仅限于基础班4小时的“网络编程”讲解。而大家平时又太习惯地址栏键入”<a href=\"https://link.zhihu.com/?target=http://www.baidu.com/\">www.baidu.com</a>“，无脑一回车就上网冲浪了。现在突然让你去访问隔壁的电脑，确实有点束手无策。</p>\n<p>解决这个问题的方法可能有多种，这里介绍其中一种：通过服务器访问。</p>\n<p>请先了解以下三个概念：</p>\n<ul>\n<li>IP：电子设备（计算机）在网络中的唯一标识，一个IP对应一台<strong>实体</strong>电脑</li>\n<li>端口：应用程序在计算机中的唯一标识，一个端口只能被唯一程序占用</li>\n<li>传输协议：数据传输的规则</li>\n</ul>\n<p>中国有14亿人口，每个人都有唯一的身份标识：身份证，用以精确定位某个个体。同样的，网络上有几十亿台电脑，每台电脑都有自己的一串特有IP（不同局域网内可以相同），也就是说一个IP代表一台特定的<strong>实体</strong>电脑。比如《唐伯虎点秋香》中华安的编号是9527，而华府的管家从不叫他名字，而是直接喊“9527”。因为“9527”就是华安。</p>\n<p><img src=\"https://pica.zhimg.com/50/v2-9426b26e3fc6b83d059219f332709e7b_720w.jpg?source=2c26e567\"></p>\n<p>虽然根据IP可以精准定位一台电脑，但是还不足以让我们访问这台电脑。就好比你知道了我的门牌号，但是我没给你开门。所谓的门，就是一个端口，而端口的背后是应用程序。</p>\n<p>一般来说，一个端口可以定位一个软件，但一个软件可以占用多个端口（你家的门，只属于你家，但可以有前后门）。在现实生活中，你家的门如果被别人占用了或者堵了，客人（请求）就进不去了。而在程序中，如果有两个程序的端口相同，就会发生端口冲突，也就是所谓的“端口占用”。端口占用的后果往往是程序无法启动，更遑论运行。</p>\n<p>关于端口，再举个例子：</p>\n<p>微信和QQ都是腾讯公司的，你的电脑上同时装了这两个软件。为什么我用QQ给你发消息，你的微信收不到？正常人看起来很傻的问题，实际上并不是那么简单。</p>\n<p><img src=\"https://pic1.zhimg.com/50/v2-9e08ae4c572d55eb4c6e652f14902496_720w.jpg?source=2c26e567\"></p>\n<p>每个应用程序都有自己的端口号（可能有多个），它们一旦运行，就要去监听这些端口。每个程序都是电脑的囚犯，看不到外面的世界，而端口就是给这些囚犯送饭的窗口。应用程序们整天躲在电脑里盯着自己的端口们，祈求着别的计算机来访时能送个大鸡腿(Request请求)。</p>\n<p>其实QQ这些软件属于C&#x2F;S架构，已经为我们屏蔽了太多底层，什么IP、端口全部都是自动封装的。相比来说，B&#x2F;S架构更直观一些。比如用浏览器访问百度：</p>\n<p><img src=\"https://picx.zhimg.com/50/v2-1ebb772d4f718d6a2fefac68bb1a15d4_720w.jpg?source=2c26e567\"></p>\n<p>不知道有没有细心的朋友注意到了下面的细节：</p>\n<p><img src=\"https://pica.zhimg.com/50/v2-8aa4aa66f571b33062fd1274f2043fa8_720w.jpg?source=2c26e567\"></p>\n<p>即使DNS解析域名得到对应的IP后，Request请求里还是会带上host。为什么？</p>\n<p><strong>因为：域名!&#x3D;IP。</strong></p>\n<p>实际上一个IP可以对应多个域名。也就是说<strong>一台实体服务器（大铁柜）</strong>，理论上可以有<strong>多个域名（虚拟主机）。</strong>实体服务器和网站是两个概念。<strong>IP只是对应实体服务器，而域名对应具体的网站。</strong></p>\n<p>比如上面百度服务器，虽然看起来115.239.210.27这个IP完全等同于<a href=\"https://link.zhihu.com/?target=http://www.baidu.com\">http://www.baidu.com</a>，但也有可能这个IP对应的服务器上配置了两个虚拟主机：<a href=\"https://link.zhihu.com/?target=http://www.baidu.com/\">www.baidu.com</a>和<a href=\"https://link.zhihu.com/?target=http://tieba.baidu.com/\">tieba.baidu.com</a>。所以即使找到了IP对应的服务器实体，Request请求还是要带上host主机名，以确定是哪个虚拟主机。</p>\n<p><img src=\"https://picx.zhimg.com/50/v2-47a7ba9165e0081e5c6dea7a0bf0423a_720w.jpg?source=2c26e567\"></p>\n<p>另外，如果两个域名对应同一个IP，那么必须设置其中一个域名为默认的，不然同一台服务器有两个虚拟主机，我该访问谁？</p>\n<p><img src=\"https://pic1.zhimg.com/50/v2-5af11c448cb3de2311ad91df8578ed3c_720w.jpg?source=2c26e567\"></p>\n<p>最后，再用Tomcat举个例子。比如，现在我有一台笔记本电脑（一个实体服务器），它的本机IP是192.168.112.1，我在上面装了Tomcat。如果Tomcat不改动配置，则默认只有一个虚拟主机localhost（默认主机）。接着我开发了一个JavaWeb程序demo1部署到Tomcat，然后我同事在浏览器输入下方地址</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">192.168.112.1:8080/demo1/index.html</span><br></pre></td></tr></table></figure>\n\n<p>访问我的电脑。虽然没有带host，但是localhost是默认的，于是访问它。</p>\n<p><img src=\"https://pic1.zhimg.com/50/v2-453c49379a5816d1f19c7f965d721151_720w.jpg?source=2c26e567\"></p>\n<p>最后必须解释的是，上面的百度服务器只是举个例子，实际上百度搜索和百度贴吧的IP是不同的，也就是说它们不在同一台服务器上。通常来说，一个IP对应一台服务器，服务器上只有一个主机。拿到IP基本就可以确定要访问哪个网站。</p>\n<p><img src=\"https://pic1.zhimg.com/50/v2-79d343e2d5d3d5d9574d075aba1e6cd6_720w.jpg?source=2c26e567\"></p>\n<p><img src=\"https://picx.zhimg.com/50/v2-79ab58d3761d889a07efbaa99e081d19_720w.jpg?source=2c26e567\"></p>\n<hr>\n<h2 id=\"3个容易混淆的小概念\"><a href=\"#3个容易混淆的小概念\" class=\"headerlink\" title=\"3个容易混淆的小概念\"></a><strong>3个容易混淆的小概念</strong></h2><p>我们经常开口闭口“服务器”、“服务器”的，其实“服务器”是个很容易引发歧义的概念，我能想到的就有3点：</p>\n<h3 id=\"软件概念的服务器和硬件概念的服务器\"><a href=\"#软件概念的服务器和硬件概念的服务器\" class=\"headerlink\" title=\"软件概念的服务器和硬件概念的服务器\"></a>软件概念的服务器和硬件概念的服务器</h3><p>软件概念上，只要是一台硬件配置正常、装有操作系统、插着电能上网，并且安装特定软件的电脑，都可以称为服务器。比如你要学习数据库了，于是你装了MySQL服务端，那么此时你的电脑就是一个MySQL服务器。然后你又装了SVN服务端，那么此时你的电脑既是MySQL服务器，又是SVN服务器。Tomcat服务器同理。</p>\n<p>硬件概念上，服务器本质上也是一台电脑，只不过配置高的同时长相丑了点，基本就是一个冰冷的大铁柜。我们的笔记本电脑既能看片又能玩游戏，而它们基本上专机专用。</p>\n<h3 id=\"Web服务器？Web容器？\"><a href=\"#Web服务器？Web容器？\" class=\"headerlink\" title=\"Web服务器？Web容器？\"></a>Web服务器？Web容器？</h3><p>其实，Tomcat服务器 &#x3D; Web服务器 + Servlet&#x2F;JSP容器（Web容器）。</p>\n<p>Web服务器的作用是接收客户端的请求，给客户端作出响应。但是很明显，服务器不止静态资源呀，所以客户端发起请求后，如果是动态资源，Web服务器不可能直接把它响应回去（比如JSP），因为浏览器只认识静态资源。所以对于JavaWeb程序而言，还需要JSP&#x2F;Servlet容器，<strong>JSP&#x2F;Servlet容器的基本功能是把动态资源转换成静态资源。</strong>我们JavaWeb工程师需要使用Web服务器和JSP&#x2F;Servlet容器，而通常这两者会集于一身，比如Tomcat。</p>\n<p><img src=\"https://pic1.zhimg.com/50/v2-c1761ba4e406196374fb7734966e8f97_720w.jpg?source=2c26e567\"></p>\n<p>所以刚才我们画的百度服务器，其实细节还可以更丰满些：</p>\n<p><img src=\"https://pica.zhimg.com/50/v2-3a892ca4b13c7c22d395d4e7f7b5468f_720w.jpg?source=2c26e567\"></p>\n<p><img src=\"https://pic1.zhimg.com/50/v2-2f0979f08ceb7f64d169676069720bd6_720w.jpg?source=2c26e567\"></p>\n<h3 id=\"我们开发的Web应用都是半成品！\"><a href=\"#我们开发的Web应用都是半成品！\" class=\"headerlink\" title=\"我们开发的Web应用都是半成品！\"></a>我们开发的Web应用都是半成品！</h3><p>我们写代码的时候，都知道相同代码最好抽取成公共方法以复用。现在我们来想一想，上百上千的Web应用有什么共性吗？首先，资源肯定不同，无法抽取。比如优酷主打视频，知乎基本都是文字。其次，业务也肯定不同，比如百度主要是搜索，淘宝是电商。但是有一点是一样的，这些网站都需要“接收用户请求”+“响应用户请求”。</p>\n<p>嗯？桥多麻袋！！这两个概念，好像哪里见过！不错，就是上面的Web服务器。仔细回想一下，我们开发JavaWeb时，你操心过如何接收HTTP请求和响应HTTP请求吗？显然没有嘛！因为你一直忙着debug。</p>\n<p><strong>所以，我们用Java开发的Web应用只是一个半成品，类似于一个插件</strong>，而服务器则像一个收发器：</p>\n<p><img src=\"https://picx.zhimg.com/50/v2-3a0b16ad4fbe56db177c72f674988896_720w.jpg?source=2c26e567\"></p>\n<hr>\n<h2 id=\"什么是动态资源？\"><a href=\"#什么是动态资源？\" class=\"headerlink\" title=\"什么是动态资源？\"></a><strong>什么是动态资源？</strong></h2><p>其实对于何谓动态资源，我也没有很精准的概念。要讲清楚一个东西是什么，有时是比较难的事。不如先说它不是什么。</p>\n<p>首先，<strong>动态资源不等同于动态页面。</strong>所谓动态页面，就是页面会动，而会动的页面不一定是动态资源。比如我可以用JQuery执行一段代码，让一个Div不断放大缩小，但是很显然它还是一个HTML页面。</p>\n<p><strong>所谓动态资源，其实最显著的特征就是它能动态地生成HTML！</strong>比如JSP。动态资源有个“特色”：它的数据是“可拼装”的、而且“可以随时间变化”。下面用号称可以抗住8个明星同时出轨的新浪服务器举个例子：</p>\n<p><img src=\"https://pic1.zhimg.com/50/v2-38f7da8e2645d23d7b89bfe5e6579b93_720w.jpg?source=2c26e567\"></p>\n<p>突然，新浪《花花世界》专栏的小编发现，原来和bravo1988有绯闻的不是刘亦菲，而是佟丽娅，于是打开专栏做了修改：</p>\n<p><img src=\"https://picx.zhimg.com/50/v2-7163a0b73be6115eab0d91098e53204a_720w.jpg?source=2c26e567\"></p>\n<p>此时，粉丝们再次打开《花花世界》专栏，看到的就是：佟丽娅深夜买醉bravo。</p>\n<p>上面这个例子很好地说明了动态资源（JSP）的两个特性：</p>\n<ul>\n<li>可拼装：${name}”深夜买醉bravo”</li>\n<li>随时间变化：刘亦菲→佟丽娅</li>\n</ul>\n<p>那么为什么说HTML就是静态资源呢？我也可以修改HTML页面使它发生改变啊！很好，很有想法。那么请小编先学会Linux，然后远程连接服务器进入到Tomcat目录下修改吧。</p>\n<p><img src=\"https://pica.zhimg.com/50/v2-d29651cfbd959e8d4cad551feabc1046_720w.jpg?source=2c26e567\"></p>\n<p>动态资源和静态资源虽然都在服务器里，但是动态资源包含变量（“可拼装”特性），而变量维系着数据库和程序之间的联系。</p>\n<p>如果把JSP比作电子广告牌，变量比作一根电线，而电线连接着一台电脑（数据库服务器）。那么只要电脑上重新编辑文本，广告牌的内容也会变，此谓动态。而静态资源就像一张布告，当初写什么就是什么，任他风吹雨打，都不会再改变了。</p>\n<p><img src=\"https://pica.zhimg.com/50/v2-07d5a0b4c4aea91562adfe8970a6983b_720w.jpg?source=2c26e567\"></p>\n<h2 id=\"动手实现”Tomcat”\"><a href=\"#动手实现”Tomcat”\" class=\"headerlink\" title=\"动手实现”Tomcat”\"></a><strong>动手实现”Tomcat”</strong></h2><p>最后，还有个很无聊的问题留给大家思考：JavaSE阶段，我们无论做什么，都是上来先敲main()。学了JavaWeb后，我想问问，你有多久没敲main()了？她去哪了呢？</p>\n<p>动手实现Tomcat（黑马公开课）：</p>\n<p>链接：<a href=\"https://link.zhihu.com/?target=https://pan.baidu.com/s/1gCWs7Jsr2qtABXQN7HHegw\">https://pan.baidu.com/s/1gCWs7Jsr2qtABXQN7HHegw</a> 密码：35se</p>\n<p><img src=\"https://picx.zhimg.com/50/v2-b58fff7721b59b7f784193041339c499_720w.jpg?source=2c26e567\"></p>\n<hr>\n<p>作者：bravo1988<br>链接：<a href=\"https://www.zhihu.com/question/391134143/answer/1777384319\">https://www.zhihu.com/question/391134143/answer/1777384319</a><br>来源：知乎  </p>\n","excerpt":"","more":"<p>服务器应该是冷冰冰的大铁柜，在恒温恒湿的机房里待着，所以Tomcat是什么呢，为什么也叫服务器呢？</p>\n<h2 id=\"我们为什么需要服务器？\"><a href=\"#我们为什么需要服务器？\" class=\"headerlink\" title=\"我们为什么需要服务器？\"></a><strong>我们为什么需要服务器？</strong></h2><p>在我看来，服务器最本质的作用有两个：</p>\n<ul>\n<li>将资源对外暴露</li>\n<li>配合各种传输协议进行响应输出</li>\n</ul>\n<p>假设现在有个问题：</p>\n<blockquote>\n<p>给你两台电脑，不通过蓝牙&#x2F;QQ&#x2F;微信，也不通过网盘或USB等可移动设备做中介，你要如何把一张图片从一台电脑传到另一台？</p>\n</blockquote>\n<p><img src=\"https://picx.zhimg.com/50/v2-aac37732401f6a92d61e7e7887a3ace5_720w.jpg?source=2c26e567\"></p>\n<p>听到这个问题，我估计大部分非科班的朋友都要懵。因为如果后期没有刻意去学习计算机网络，我们对于网络的了解基本仅限于基础班4小时的“网络编程”讲解。而大家平时又太习惯地址栏键入”<a href=\"https://link.zhihu.com/?target=http://www.baidu.com/\">www.baidu.com</a>“，无脑一回车就上网冲浪了。现在突然让你去访问隔壁的电脑，确实有点束手无策。</p>\n<p>解决这个问题的方法可能有多种，这里介绍其中一种：通过服务器访问。</p>\n<p>请先了解以下三个概念：</p>\n<ul>\n<li>IP：电子设备（计算机）在网络中的唯一标识，一个IP对应一台<strong>实体</strong>电脑</li>\n<li>端口：应用程序在计算机中的唯一标识，一个端口只能被唯一程序占用</li>\n<li>传输协议：数据传输的规则</li>\n</ul>\n<p>中国有14亿人口，每个人都有唯一的身份标识：身份证，用以精确定位某个个体。同样的，网络上有几十亿台电脑，每台电脑都有自己的一串特有IP（不同局域网内可以相同），也就是说一个IP代表一台特定的<strong>实体</strong>电脑。比如《唐伯虎点秋香》中华安的编号是9527，而华府的管家从不叫他名字，而是直接喊“9527”。因为“9527”就是华安。</p>\n<p><img src=\"https://pica.zhimg.com/50/v2-9426b26e3fc6b83d059219f332709e7b_720w.jpg?source=2c26e567\"></p>\n<p>虽然根据IP可以精准定位一台电脑，但是还不足以让我们访问这台电脑。就好比你知道了我的门牌号，但是我没给你开门。所谓的门，就是一个端口，而端口的背后是应用程序。</p>\n<p>一般来说，一个端口可以定位一个软件，但一个软件可以占用多个端口（你家的门，只属于你家，但可以有前后门）。在现实生活中，你家的门如果被别人占用了或者堵了，客人（请求）就进不去了。而在程序中，如果有两个程序的端口相同，就会发生端口冲突，也就是所谓的“端口占用”。端口占用的后果往往是程序无法启动，更遑论运行。</p>\n<p>关于端口，再举个例子：</p>\n<p>微信和QQ都是腾讯公司的，你的电脑上同时装了这两个软件。为什么我用QQ给你发消息，你的微信收不到？正常人看起来很傻的问题，实际上并不是那么简单。</p>\n<p><img src=\"https://pic1.zhimg.com/50/v2-9e08ae4c572d55eb4c6e652f14902496_720w.jpg?source=2c26e567\"></p>\n<p>每个应用程序都有自己的端口号（可能有多个），它们一旦运行，就要去监听这些端口。每个程序都是电脑的囚犯，看不到外面的世界，而端口就是给这些囚犯送饭的窗口。应用程序们整天躲在电脑里盯着自己的端口们，祈求着别的计算机来访时能送个大鸡腿(Request请求)。</p>\n<p>其实QQ这些软件属于C&#x2F;S架构，已经为我们屏蔽了太多底层，什么IP、端口全部都是自动封装的。相比来说，B&#x2F;S架构更直观一些。比如用浏览器访问百度：</p>\n<p><img src=\"https://picx.zhimg.com/50/v2-1ebb772d4f718d6a2fefac68bb1a15d4_720w.jpg?source=2c26e567\"></p>\n<p>不知道有没有细心的朋友注意到了下面的细节：</p>\n<p><img src=\"https://pica.zhimg.com/50/v2-8aa4aa66f571b33062fd1274f2043fa8_720w.jpg?source=2c26e567\"></p>\n<p>即使DNS解析域名得到对应的IP后，Request请求里还是会带上host。为什么？</p>\n<p><strong>因为：域名!&#x3D;IP。</strong></p>\n<p>实际上一个IP可以对应多个域名。也就是说<strong>一台实体服务器（大铁柜）</strong>，理论上可以有<strong>多个域名（虚拟主机）。</strong>实体服务器和网站是两个概念。<strong>IP只是对应实体服务器，而域名对应具体的网站。</strong></p>\n<p>比如上面百度服务器，虽然看起来115.239.210.27这个IP完全等同于<a href=\"https://link.zhihu.com/?target=http://www.baidu.com\">http://www.baidu.com</a>，但也有可能这个IP对应的服务器上配置了两个虚拟主机：<a href=\"https://link.zhihu.com/?target=http://www.baidu.com/\">www.baidu.com</a>和<a href=\"https://link.zhihu.com/?target=http://tieba.baidu.com/\">tieba.baidu.com</a>。所以即使找到了IP对应的服务器实体，Request请求还是要带上host主机名，以确定是哪个虚拟主机。</p>\n<p><img src=\"https://picx.zhimg.com/50/v2-47a7ba9165e0081e5c6dea7a0bf0423a_720w.jpg?source=2c26e567\"></p>\n<p>另外，如果两个域名对应同一个IP，那么必须设置其中一个域名为默认的，不然同一台服务器有两个虚拟主机，我该访问谁？</p>\n<p><img src=\"https://pic1.zhimg.com/50/v2-5af11c448cb3de2311ad91df8578ed3c_720w.jpg?source=2c26e567\"></p>\n<p>最后，再用Tomcat举个例子。比如，现在我有一台笔记本电脑（一个实体服务器），它的本机IP是192.168.112.1，我在上面装了Tomcat。如果Tomcat不改动配置，则默认只有一个虚拟主机localhost（默认主机）。接着我开发了一个JavaWeb程序demo1部署到Tomcat，然后我同事在浏览器输入下方地址</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">192.168.112.1:8080/demo1/index.html</span><br></pre></td></tr></table></figure>\n\n<p>访问我的电脑。虽然没有带host，但是localhost是默认的，于是访问它。</p>\n<p><img src=\"https://pic1.zhimg.com/50/v2-453c49379a5816d1f19c7f965d721151_720w.jpg?source=2c26e567\"></p>\n<p>最后必须解释的是，上面的百度服务器只是举个例子，实际上百度搜索和百度贴吧的IP是不同的，也就是说它们不在同一台服务器上。通常来说，一个IP对应一台服务器，服务器上只有一个主机。拿到IP基本就可以确定要访问哪个网站。</p>\n<p><img src=\"https://pic1.zhimg.com/50/v2-79d343e2d5d3d5d9574d075aba1e6cd6_720w.jpg?source=2c26e567\"></p>\n<p><img src=\"https://picx.zhimg.com/50/v2-79ab58d3761d889a07efbaa99e081d19_720w.jpg?source=2c26e567\"></p>\n<hr>\n<h2 id=\"3个容易混淆的小概念\"><a href=\"#3个容易混淆的小概念\" class=\"headerlink\" title=\"3个容易混淆的小概念\"></a><strong>3个容易混淆的小概念</strong></h2><p>我们经常开口闭口“服务器”、“服务器”的，其实“服务器”是个很容易引发歧义的概念，我能想到的就有3点：</p>\n<h3 id=\"软件概念的服务器和硬件概念的服务器\"><a href=\"#软件概念的服务器和硬件概念的服务器\" class=\"headerlink\" title=\"软件概念的服务器和硬件概念的服务器\"></a>软件概念的服务器和硬件概念的服务器</h3><p>软件概念上，只要是一台硬件配置正常、装有操作系统、插着电能上网，并且安装特定软件的电脑，都可以称为服务器。比如你要学习数据库了，于是你装了MySQL服务端，那么此时你的电脑就是一个MySQL服务器。然后你又装了SVN服务端，那么此时你的电脑既是MySQL服务器，又是SVN服务器。Tomcat服务器同理。</p>\n<p>硬件概念上，服务器本质上也是一台电脑，只不过配置高的同时长相丑了点，基本就是一个冰冷的大铁柜。我们的笔记本电脑既能看片又能玩游戏，而它们基本上专机专用。</p>\n<h3 id=\"Web服务器？Web容器？\"><a href=\"#Web服务器？Web容器？\" class=\"headerlink\" title=\"Web服务器？Web容器？\"></a>Web服务器？Web容器？</h3><p>其实，Tomcat服务器 &#x3D; Web服务器 + Servlet&#x2F;JSP容器（Web容器）。</p>\n<p>Web服务器的作用是接收客户端的请求，给客户端作出响应。但是很明显，服务器不止静态资源呀，所以客户端发起请求后，如果是动态资源，Web服务器不可能直接把它响应回去（比如JSP），因为浏览器只认识静态资源。所以对于JavaWeb程序而言，还需要JSP&#x2F;Servlet容器，<strong>JSP&#x2F;Servlet容器的基本功能是把动态资源转换成静态资源。</strong>我们JavaWeb工程师需要使用Web服务器和JSP&#x2F;Servlet容器，而通常这两者会集于一身，比如Tomcat。</p>\n<p><img src=\"https://pic1.zhimg.com/50/v2-c1761ba4e406196374fb7734966e8f97_720w.jpg?source=2c26e567\"></p>\n<p>所以刚才我们画的百度服务器，其实细节还可以更丰满些：</p>\n<p><img src=\"https://pica.zhimg.com/50/v2-3a892ca4b13c7c22d395d4e7f7b5468f_720w.jpg?source=2c26e567\"></p>\n<p><img src=\"https://pic1.zhimg.com/50/v2-2f0979f08ceb7f64d169676069720bd6_720w.jpg?source=2c26e567\"></p>\n<h3 id=\"我们开发的Web应用都是半成品！\"><a href=\"#我们开发的Web应用都是半成品！\" class=\"headerlink\" title=\"我们开发的Web应用都是半成品！\"></a>我们开发的Web应用都是半成品！</h3><p>我们写代码的时候，都知道相同代码最好抽取成公共方法以复用。现在我们来想一想，上百上千的Web应用有什么共性吗？首先，资源肯定不同，无法抽取。比如优酷主打视频，知乎基本都是文字。其次，业务也肯定不同，比如百度主要是搜索，淘宝是电商。但是有一点是一样的，这些网站都需要“接收用户请求”+“响应用户请求”。</p>\n<p>嗯？桥多麻袋！！这两个概念，好像哪里见过！不错，就是上面的Web服务器。仔细回想一下，我们开发JavaWeb时，你操心过如何接收HTTP请求和响应HTTP请求吗？显然没有嘛！因为你一直忙着debug。</p>\n<p><strong>所以，我们用Java开发的Web应用只是一个半成品，类似于一个插件</strong>，而服务器则像一个收发器：</p>\n<p><img src=\"https://picx.zhimg.com/50/v2-3a0b16ad4fbe56db177c72f674988896_720w.jpg?source=2c26e567\"></p>\n<hr>\n<h2 id=\"什么是动态资源？\"><a href=\"#什么是动态资源？\" class=\"headerlink\" title=\"什么是动态资源？\"></a><strong>什么是动态资源？</strong></h2><p>其实对于何谓动态资源，我也没有很精准的概念。要讲清楚一个东西是什么，有时是比较难的事。不如先说它不是什么。</p>\n<p>首先，<strong>动态资源不等同于动态页面。</strong>所谓动态页面，就是页面会动，而会动的页面不一定是动态资源。比如我可以用JQuery执行一段代码，让一个Div不断放大缩小，但是很显然它还是一个HTML页面。</p>\n<p><strong>所谓动态资源，其实最显著的特征就是它能动态地生成HTML！</strong>比如JSP。动态资源有个“特色”：它的数据是“可拼装”的、而且“可以随时间变化”。下面用号称可以抗住8个明星同时出轨的新浪服务器举个例子：</p>\n<p><img src=\"https://pic1.zhimg.com/50/v2-38f7da8e2645d23d7b89bfe5e6579b93_720w.jpg?source=2c26e567\"></p>\n<p>突然，新浪《花花世界》专栏的小编发现，原来和bravo1988有绯闻的不是刘亦菲，而是佟丽娅，于是打开专栏做了修改：</p>\n<p><img src=\"https://picx.zhimg.com/50/v2-7163a0b73be6115eab0d91098e53204a_720w.jpg?source=2c26e567\"></p>\n<p>此时，粉丝们再次打开《花花世界》专栏，看到的就是：佟丽娅深夜买醉bravo。</p>\n<p>上面这个例子很好地说明了动态资源（JSP）的两个特性：</p>\n<ul>\n<li>可拼装：${name}”深夜买醉bravo”</li>\n<li>随时间变化：刘亦菲→佟丽娅</li>\n</ul>\n<p>那么为什么说HTML就是静态资源呢？我也可以修改HTML页面使它发生改变啊！很好，很有想法。那么请小编先学会Linux，然后远程连接服务器进入到Tomcat目录下修改吧。</p>\n<p><img src=\"https://pica.zhimg.com/50/v2-d29651cfbd959e8d4cad551feabc1046_720w.jpg?source=2c26e567\"></p>\n<p>动态资源和静态资源虽然都在服务器里，但是动态资源包含变量（“可拼装”特性），而变量维系着数据库和程序之间的联系。</p>\n<p>如果把JSP比作电子广告牌，变量比作一根电线，而电线连接着一台电脑（数据库服务器）。那么只要电脑上重新编辑文本，广告牌的内容也会变，此谓动态。而静态资源就像一张布告，当初写什么就是什么，任他风吹雨打，都不会再改变了。</p>\n<p><img src=\"https://pica.zhimg.com/50/v2-07d5a0b4c4aea91562adfe8970a6983b_720w.jpg?source=2c26e567\"></p>\n<h2 id=\"动手实现”Tomcat”\"><a href=\"#动手实现”Tomcat”\" class=\"headerlink\" title=\"动手实现”Tomcat”\"></a><strong>动手实现”Tomcat”</strong></h2><p>最后，还有个很无聊的问题留给大家思考：JavaSE阶段，我们无论做什么，都是上来先敲main()。学了JavaWeb后，我想问问，你有多久没敲main()了？她去哪了呢？</p>\n<p>动手实现Tomcat（黑马公开课）：</p>\n<p>链接：<a href=\"https://link.zhihu.com/?target=https://pan.baidu.com/s/1gCWs7Jsr2qtABXQN7HHegw\">https://pan.baidu.com/s/1gCWs7Jsr2qtABXQN7HHegw</a> 密码：35se</p>\n<p><img src=\"https://picx.zhimg.com/50/v2-b58fff7721b59b7f784193041339c499_720w.jpg?source=2c26e567\"></p>\n<hr>\n<p>作者：bravo1988<br>链接：<a href=\"https://www.zhihu.com/question/391134143/answer/1777384319\">https://www.zhihu.com/question/391134143/answer/1777384319</a><br>来源：知乎  </p>\n"},{"title":"Serve目录","date":"2025-07-14T16:00:00.000Z","categories":["Serve"],"_content":"* [SSH概念](SSH概念)\n* [为什么称 Tomcat 为服务器？(IP,端口,域名)](为什么称Tomcat为服务器？)","source":"Serve/index.md","raw":"---\ntitle: Serve目录\ndate: 2025-07-15\ncategories:\n  - Serve\n---\n* [SSH概念](SSH概念)\n* [为什么称 Tomcat 为服务器？(IP,端口,域名)](为什么称Tomcat为服务器？)","updated":"2025-07-16T10:41:32.995Z","path":"Serve/index.html","comments":1,"layout":"page","_id":"cmd63a8cv000kk8v344mm6oid","content":"<ul>\n<li><a href=\"SSH%E6%A6%82%E5%BF%B5\">SSH概念</a></li>\n<li><a href=\"%E4%B8%BA%E4%BB%80%E4%B9%88%E7%A7%B0Tomcat%E4%B8%BA%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%9F\">为什么称 Tomcat 为服务器？(IP,端口,域名)</a></li>\n</ul>\n","excerpt":"","more":"<ul>\n<li><a href=\"SSH%E6%A6%82%E5%BF%B5\">SSH概念</a></li>\n<li><a href=\"%E4%B8%BA%E4%BB%80%E4%B9%88%E7%A7%B0Tomcat%E4%B8%BA%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%9F\">为什么称 Tomcat 为服务器？(IP,端口,域名)</a></li>\n</ul>\n"},{"title":"数据结构目录","date":"2025-07-14T16:00:00.000Z","categories":["数据结构"],"_content":"* [数组(顺序存储)基本原理](数组（顺序存储）基本原理)\n* [动态数组代码实现](动态数组代码实现)","source":"数据结构/index.md","raw":"---\ntitle: 数据结构目录\ndate: 2025-07-15\ncategories:\n  - 数据结构\n---\n* [数组(顺序存储)基本原理](数组（顺序存储）基本原理)\n* [动态数组代码实现](动态数组代码实现)","updated":"2025-07-16T14:57:31.865Z","path":"数据结构/index.html","comments":1,"layout":"page","_id":"cmd63a8cv000lk8v3e5d31n76","content":"<ul>\n<li><a href=\"%E6%95%B0%E7%BB%84%EF%BC%88%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8%EF%BC%89%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86\">数组(顺序存储)基本原理</a></li>\n<li><a href=\"%E5%8A%A8%E6%80%81%E6%95%B0%E7%BB%84%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0\">动态数组代码实现</a></li>\n</ul>\n","excerpt":"","more":"<ul>\n<li><a href=\"%E6%95%B0%E7%BB%84%EF%BC%88%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8%EF%BC%89%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86\">数组(顺序存储)基本原理</a></li>\n<li><a href=\"%E5%8A%A8%E6%80%81%E6%95%B0%E7%BB%84%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0\">动态数组代码实现</a></li>\n</ul>\n"},{"date":"2025-07-05T16:00:00.000Z","title":"动态数组代码实现","cssclasses":["数据结构","数组"],"_content":"## 自动扩缩容\n\n我们这里就实现一个简单的扩缩容的策略：\n\n- 当数组元素个数达到底层静态数组的容量上限时，扩容为原来的 2 倍；\n- 当数组元素个数缩减到底层静态数组的容量的 1/4 时，缩容为原来的 1/2。\n\n## 索引边界的检查\n\n需要注意的两个检查越界的方法：\n\n| 方法名                | 越界判断条件      | 适用场景                   |\n| ------------------ | ----------- | ---------------------- |\n| checkElementIndex  | index>=size | 访问 / 修改元素操作（如 get/set） |\n| checkPositionIndex | index>size  | 插入元素操作（如 add）          |\n\n为什么会有这样的区别？\n比方说有这样一个 `nums` 数组，对于每个元素来说，合法的索引一定是 `index < size`：\n\n```\nnums = [5, 6, 7, 8]\nindex   0  1  2  3\n```\n\n但如果是要在数组中插入新元素，那么新元素可能的插入位置并不是元素的索引，而是索引之间的空隙：\n\n```\nnums = [ | 5 | 6 | 7 | 8 | ]\nindex    0   1   2   3   4\n```\n\n这些空隙都是合法的插入位置，所以说 `index == size` 也是合法的。这就是 `checkPositionIndex` 和 `checkElementIndex` 的区别。\n\n## 删除元素谨防内存泄漏\n\n单从算法的角度，其实并不需要关心被删掉的元素应该如何处理，但是具体到代码实现，我们需要注意可能出现的内存泄漏。\n\n在我给出的代码实现中，删除元素时，我都会**把被删除的元素置为 `null`** 。\n\n以 Java 为例，Java 的垃圾回收机制是基于**图算法的可达性**分析，如果一个对象再也无法被访问到，那么这个对象占用的内存才会被释放；否则，垃圾回收器会认为这个对象还在使用中，就不会释放这个对象占用的内存。\n\n如果你不执行 `data[size - 1] = null` 这行代码，那么 `data[size - 1]` 这个引用就会一直存在，你可以通过 `data[size - 1]` 访问这个对象，所以这个对象被认为是可达的，它的内存就一直不会被释放，进而造成内存泄漏。\n\n其他带垃圾回收功能的语言应该也是类似的，你可以具体了解一下你使用的编程语言的垃圾回收机制，这是写出无 bug 代码的基本要求。\n\n## 其他细节优化\n\n有不少可以进一步优化的点，比方说，我是用 for 循环复制数组数据的，实际上这种方式复制的效率比较差，大部分编程语言会提供更高效的数组复制方法，比如 Java 的 `System.arraycopy`。\n\n不过它再怎么优化，本质上也是要搬移数据，时间复杂度都是 O(n)。本文的重点在于让你理解数组增删查改 API 的基本实现思路以及时间复杂度，如果对这些细节感兴趣，可以找到编程语言标准库的源码深入研究。\n\n## 动态数组代码实现\n\n```java\n// java\nimport java.util.Arrays;\nimport java.util.Iterator;\nimport java.util.NoSuchElementException;\n\npublic class MyArrayList<E> {\n    // 真正存储数据的底层数组\n    private E[] data;\n    // 记录当前元素个数\n    private int size;\n    // 默认初始容量\n    private static final int INIT_CAP = 1;\n\n    public MyArrayList() {\n        this(INIT_CAP);\n    }\n\n    public MyArrayList(int initCapacity) {\n        data = (E[]) new Object[initCapacity];\n        size = 0;\n    }\n\n    // 增\n    public void addLast(E e) {\n        int cap = data.length;\n        // 看 data 数组容量够不够\n        if (size == cap) {\n            resize(2 * cap);\n        }\n        // 在尾部插入元素\n        data[size] = e;\n        size++;\n    }\n\n    public void add(int index, E e) {\n        // 检查索引越界\n        checkPositionIndex(index);\n\n        int cap = data.length;\n        // 看 data 数组容量够不够\n        if (size == cap) {\n            resize(2 * cap);\n        }\n\n        // 搬移数据 data[index..] -> data[index+1..]\n        // 给新元素腾出位置\n        for (int i = size - 1; i >= index; i--) {\n            data[i + 1] = data[i];\n        }\n\n        // 插入新元素\n        data[index] = e;\n\n        size++;\n    }\n\n    public void addFirst(E e) {\n        add(0, e);\n    }\n\n    // 删\n    public E removeLast() {\n        if (size == 0) {\n            throw new NoSuchElementException();\n        }\n        int cap = data.length;\n        // 可以缩容，节约空间\n        if (size == cap / 4) {\n            resize(cap / 2);\n        }\n\n        E deletedVal = data[size - 1];\n        // 删除最后一个元素\n        // 必须给最后一个元素置为 null，否则会内存泄漏\n        data[size - 1] = null;\n        size--;\n\n        return deletedVal;\n    }\n\n    public E remove(int index) {\n        // 检查索引越界\n        checkElementIndex(index);\n\n        int cap = data.length;\n        // 可以缩容，节约空间\n        if (size == cap / 4) {\n            resize(cap / 2);\n        }\n\n        E deletedVal = data[index];\n\n        // 搬移数据 data[index+1..] -> data[index..]\n        for (int i = index + 1; i < size; i++) {\n            data[i - 1] = data[i];\n        }\n\n        data[size - 1] = null;\n        size--;\n\n        return deletedVal;\n    }\n\n    public E removeFirst() {\n        return remove(0);\n    }\n\n    // 查\n    public E get(int index) {\n        // 检查索引越界\n        checkElementIndex(index);\n\n        return data[index];\n    }\n\n    // 改\n    public E set(int index, E element) {\n        // 检查索引越界\n        checkElementIndex(index);\n        // 修改数据\n        E oldVal = data[index];\n        data[index] = element;\n        return oldVal;\n    }\n\n    // 工具方法\n    public int size() {\n        return size;\n    }\n\n    public boolean isEmpty() {\n        return size == 0;\n    }\n\n    // 将 data 的容量改为 newCap\n    private void resize(int newCap) {\n        E[] temp = (E[]) new Object[newCap];\n\n        for (int i = 0; i < size; i++) {\n            temp[i] = data[i];\n        }\n\n        data = temp;\n    }\n\n    private boolean isElementIndex(int index) {\n        return index >= 0 && index < size;\n    }\n\n    private boolean isPositionIndex(int index) {\n        return index >= 0 && index <= size;\n    }\n\n    \n    // 检查 index 索引位置是否可以存在元素\n    private void checkElementIndex(int index) {\n        if (!isElementIndex(index))\n            throw new IndexOutOfBoundsException(\"Index: \" + index + \", Size: \" + size);\n    }\n\n    \n    // 检查 index 索引位置是否可以添加元素\n    private void checkPositionIndex(int index) {\n        if (!isPositionIndex(index))\n            throw new IndexOutOfBoundsException(\"Index: \" + index + \", Size: \" + size);\n    }\n\n    private void display() {\n        System.out.println(\"size = \" + size + \" cap = \" + data.length);\n        System.out.println(Arrays.toString(data));\n    }\n\n\n    public static void main(String[] args) {\n        // 初始容量设置为 3\n        MyArrayList<Integer> arr = new MyArrayList<>(3);\n\n        // 添加 5 个元素\n        for (int i = 1; i <= 5; i++) {\n            arr.addLast(i);\n        }\n\n        arr.remove(3);\n        arr.add(1, 9);\n        arr.addFirst(100);\n        int val = arr.removeLast();\n\n        for (int i = 0; i < arr.size(); i++) {\n            System.out.println(arr.get(i));\n        }\n    }\n\n}\n```\n\n```python\n# python\nclass MyArrayList:\n    # 默认初始容量\n    INIT_CAP = 1\n\n    def __init__(self, init_capacity=None):\n        self.data = [None] * (init_capacity if init_capacity is not None else self.__class__.INIT_CAP)\n        self.size = 0\n    \n    # 增\n    def add_last(self, e):\n        cap = len(self.data)\n        # 看 data 数组容量够不够\n        if self.size == cap:\n            self._resize(2 * cap)\n        # 在尾部插入元素\n        self.data[self.size] = e\n        self.size += 1\n\n    def add(self, index, e):\n        # 检查索引越界\n        self._check_position_index(index)\n\n        cap = len(self.data)\n        # 看 data 数组容量够不够\n        if self.size == cap:\n            self._resize(2 * cap)\n\n        # 搬移数据 data[index..] -> data[index+1..]\n        # 给新元素腾出位置\n        for i in range(self.size-1, index-1, -1):\n            self.data[i+1] = self.data[i]\n        \n        # 插入新元素\n        self.data[index] = e\n\n        self.size += 1\n\n    def add_first(self, e):\n        self.add(0, e)\n\n    # 删\n    def remove_last(self):\n        if self.size == 0:\n            raise Exception(\"NoSuchElementException\")\n        cap = len(self.data)\n        # 可以缩容，节约空间\n        if self.size == cap // 4:\n            self._resize(cap // 2)\n\n        deleted_val = self.data[self.size - 1]\n        # 删除最后一个元素\n        self.data[self.size - 1] = None\n        self.size -= 1\n\n        return deleted_val\n\n    def remove(self, index):\n        # 检查索引越界\n        self._check_element_index(index)\n\n        cap = len(self.data)\n        # 可以缩容，节约空间\n        if self.size == cap // 4:\n            self._resize(cap // 2)\n\n        deleted_val = self.data[index]\n\n        # 搬移数据 data[index+1..] -> data[index..]\n        for i in range(index + 1, self.size):\n            self.data[i - 1] = self.data[i]\n\n        self.data[self.size - 1] = None\n        self.size -= 1\n\n        return deleted_val\n\n    def remove_first(self):\n        return self.remove(0)\n\n    # 查\n    def get(self, index):\n        # 检查索引越界\n        self._check_element_index(index)\n\n        return self.data[index]\n\n    # 改\n    def set(self, index, element):\n        # 检查索引越界\n        self._check_element_index(index)\n        # 修改数据\n        old_val = self.data[index]\n        self.data[index] = element\n        return old_val\n\n    # 工具方法\n    def get_size(self):\n        return self.size\n\n    def is_empty(self):\n        return self.size == 0\n\n    # 将 data 的容量改为 newCap\n    def _resize(self, new_cap):\n        temp = [None] * new_cap\n        for i in range(self.size):\n            temp[i] = self.data[i]\n        self.data = temp\n\n    def _is_element_index(self, index):\n        return 0 <= index < self.size\n\n    def _is_position_index(self, index):\n        return 0 <= index <= self.size\n\n    def _check_element_index(self, index):\n        if not self._is_element_index(index):\n            raise IndexError(f\"Index: {index}, Size: {self.size}\")\n\n    def _check_position_index(self, index):\n        if not self._is_position_index(index):\n            raise IndexError(f\"Index: {index}, Size: {self.size}\")\n\n    def display(self):\n        print(f\"size = {self.size}, cap = {len(self.data)}\")\n        print(self.data)\n\n\n# Usage example\nif __name__ == \"__main__\":\n    arr = MyArrayList(init_capacity=3)\n\n    # 添加 5 个元素\n    for i in range(1, 6):\n        arr.add_last(i)\n\n    arr.remove(3)\n    arr.add(1, 9)\n    arr.add_first(100)\n    val = arr.remove_last()\n\n    # 100 1 9 2 3\n    for i in range(arr.get_size()):\n        print(arr.get(i))\n```","source":"数据结构/动态数组代码实现.md","raw":"---\ndate: 2025-07-06\ntitle: 动态数组代码实现\ncssclasses:\n  - 数据结构\n  - 数组\n---\n## 自动扩缩容\n\n我们这里就实现一个简单的扩缩容的策略：\n\n- 当数组元素个数达到底层静态数组的容量上限时，扩容为原来的 2 倍；\n- 当数组元素个数缩减到底层静态数组的容量的 1/4 时，缩容为原来的 1/2。\n\n## 索引边界的检查\n\n需要注意的两个检查越界的方法：\n\n| 方法名                | 越界判断条件      | 适用场景                   |\n| ------------------ | ----------- | ---------------------- |\n| checkElementIndex  | index>=size | 访问 / 修改元素操作（如 get/set） |\n| checkPositionIndex | index>size  | 插入元素操作（如 add）          |\n\n为什么会有这样的区别？\n比方说有这样一个 `nums` 数组，对于每个元素来说，合法的索引一定是 `index < size`：\n\n```\nnums = [5, 6, 7, 8]\nindex   0  1  2  3\n```\n\n但如果是要在数组中插入新元素，那么新元素可能的插入位置并不是元素的索引，而是索引之间的空隙：\n\n```\nnums = [ | 5 | 6 | 7 | 8 | ]\nindex    0   1   2   3   4\n```\n\n这些空隙都是合法的插入位置，所以说 `index == size` 也是合法的。这就是 `checkPositionIndex` 和 `checkElementIndex` 的区别。\n\n## 删除元素谨防内存泄漏\n\n单从算法的角度，其实并不需要关心被删掉的元素应该如何处理，但是具体到代码实现，我们需要注意可能出现的内存泄漏。\n\n在我给出的代码实现中，删除元素时，我都会**把被删除的元素置为 `null`** 。\n\n以 Java 为例，Java 的垃圾回收机制是基于**图算法的可达性**分析，如果一个对象再也无法被访问到，那么这个对象占用的内存才会被释放；否则，垃圾回收器会认为这个对象还在使用中，就不会释放这个对象占用的内存。\n\n如果你不执行 `data[size - 1] = null` 这行代码，那么 `data[size - 1]` 这个引用就会一直存在，你可以通过 `data[size - 1]` 访问这个对象，所以这个对象被认为是可达的，它的内存就一直不会被释放，进而造成内存泄漏。\n\n其他带垃圾回收功能的语言应该也是类似的，你可以具体了解一下你使用的编程语言的垃圾回收机制，这是写出无 bug 代码的基本要求。\n\n## 其他细节优化\n\n有不少可以进一步优化的点，比方说，我是用 for 循环复制数组数据的，实际上这种方式复制的效率比较差，大部分编程语言会提供更高效的数组复制方法，比如 Java 的 `System.arraycopy`。\n\n不过它再怎么优化，本质上也是要搬移数据，时间复杂度都是 O(n)。本文的重点在于让你理解数组增删查改 API 的基本实现思路以及时间复杂度，如果对这些细节感兴趣，可以找到编程语言标准库的源码深入研究。\n\n## 动态数组代码实现\n\n```java\n// java\nimport java.util.Arrays;\nimport java.util.Iterator;\nimport java.util.NoSuchElementException;\n\npublic class MyArrayList<E> {\n    // 真正存储数据的底层数组\n    private E[] data;\n    // 记录当前元素个数\n    private int size;\n    // 默认初始容量\n    private static final int INIT_CAP = 1;\n\n    public MyArrayList() {\n        this(INIT_CAP);\n    }\n\n    public MyArrayList(int initCapacity) {\n        data = (E[]) new Object[initCapacity];\n        size = 0;\n    }\n\n    // 增\n    public void addLast(E e) {\n        int cap = data.length;\n        // 看 data 数组容量够不够\n        if (size == cap) {\n            resize(2 * cap);\n        }\n        // 在尾部插入元素\n        data[size] = e;\n        size++;\n    }\n\n    public void add(int index, E e) {\n        // 检查索引越界\n        checkPositionIndex(index);\n\n        int cap = data.length;\n        // 看 data 数组容量够不够\n        if (size == cap) {\n            resize(2 * cap);\n        }\n\n        // 搬移数据 data[index..] -> data[index+1..]\n        // 给新元素腾出位置\n        for (int i = size - 1; i >= index; i--) {\n            data[i + 1] = data[i];\n        }\n\n        // 插入新元素\n        data[index] = e;\n\n        size++;\n    }\n\n    public void addFirst(E e) {\n        add(0, e);\n    }\n\n    // 删\n    public E removeLast() {\n        if (size == 0) {\n            throw new NoSuchElementException();\n        }\n        int cap = data.length;\n        // 可以缩容，节约空间\n        if (size == cap / 4) {\n            resize(cap / 2);\n        }\n\n        E deletedVal = data[size - 1];\n        // 删除最后一个元素\n        // 必须给最后一个元素置为 null，否则会内存泄漏\n        data[size - 1] = null;\n        size--;\n\n        return deletedVal;\n    }\n\n    public E remove(int index) {\n        // 检查索引越界\n        checkElementIndex(index);\n\n        int cap = data.length;\n        // 可以缩容，节约空间\n        if (size == cap / 4) {\n            resize(cap / 2);\n        }\n\n        E deletedVal = data[index];\n\n        // 搬移数据 data[index+1..] -> data[index..]\n        for (int i = index + 1; i < size; i++) {\n            data[i - 1] = data[i];\n        }\n\n        data[size - 1] = null;\n        size--;\n\n        return deletedVal;\n    }\n\n    public E removeFirst() {\n        return remove(0);\n    }\n\n    // 查\n    public E get(int index) {\n        // 检查索引越界\n        checkElementIndex(index);\n\n        return data[index];\n    }\n\n    // 改\n    public E set(int index, E element) {\n        // 检查索引越界\n        checkElementIndex(index);\n        // 修改数据\n        E oldVal = data[index];\n        data[index] = element;\n        return oldVal;\n    }\n\n    // 工具方法\n    public int size() {\n        return size;\n    }\n\n    public boolean isEmpty() {\n        return size == 0;\n    }\n\n    // 将 data 的容量改为 newCap\n    private void resize(int newCap) {\n        E[] temp = (E[]) new Object[newCap];\n\n        for (int i = 0; i < size; i++) {\n            temp[i] = data[i];\n        }\n\n        data = temp;\n    }\n\n    private boolean isElementIndex(int index) {\n        return index >= 0 && index < size;\n    }\n\n    private boolean isPositionIndex(int index) {\n        return index >= 0 && index <= size;\n    }\n\n    \n    // 检查 index 索引位置是否可以存在元素\n    private void checkElementIndex(int index) {\n        if (!isElementIndex(index))\n            throw new IndexOutOfBoundsException(\"Index: \" + index + \", Size: \" + size);\n    }\n\n    \n    // 检查 index 索引位置是否可以添加元素\n    private void checkPositionIndex(int index) {\n        if (!isPositionIndex(index))\n            throw new IndexOutOfBoundsException(\"Index: \" + index + \", Size: \" + size);\n    }\n\n    private void display() {\n        System.out.println(\"size = \" + size + \" cap = \" + data.length);\n        System.out.println(Arrays.toString(data));\n    }\n\n\n    public static void main(String[] args) {\n        // 初始容量设置为 3\n        MyArrayList<Integer> arr = new MyArrayList<>(3);\n\n        // 添加 5 个元素\n        for (int i = 1; i <= 5; i++) {\n            arr.addLast(i);\n        }\n\n        arr.remove(3);\n        arr.add(1, 9);\n        arr.addFirst(100);\n        int val = arr.removeLast();\n\n        for (int i = 0; i < arr.size(); i++) {\n            System.out.println(arr.get(i));\n        }\n    }\n\n}\n```\n\n```python\n# python\nclass MyArrayList:\n    # 默认初始容量\n    INIT_CAP = 1\n\n    def __init__(self, init_capacity=None):\n        self.data = [None] * (init_capacity if init_capacity is not None else self.__class__.INIT_CAP)\n        self.size = 0\n    \n    # 增\n    def add_last(self, e):\n        cap = len(self.data)\n        # 看 data 数组容量够不够\n        if self.size == cap:\n            self._resize(2 * cap)\n        # 在尾部插入元素\n        self.data[self.size] = e\n        self.size += 1\n\n    def add(self, index, e):\n        # 检查索引越界\n        self._check_position_index(index)\n\n        cap = len(self.data)\n        # 看 data 数组容量够不够\n        if self.size == cap:\n            self._resize(2 * cap)\n\n        # 搬移数据 data[index..] -> data[index+1..]\n        # 给新元素腾出位置\n        for i in range(self.size-1, index-1, -1):\n            self.data[i+1] = self.data[i]\n        \n        # 插入新元素\n        self.data[index] = e\n\n        self.size += 1\n\n    def add_first(self, e):\n        self.add(0, e)\n\n    # 删\n    def remove_last(self):\n        if self.size == 0:\n            raise Exception(\"NoSuchElementException\")\n        cap = len(self.data)\n        # 可以缩容，节约空间\n        if self.size == cap // 4:\n            self._resize(cap // 2)\n\n        deleted_val = self.data[self.size - 1]\n        # 删除最后一个元素\n        self.data[self.size - 1] = None\n        self.size -= 1\n\n        return deleted_val\n\n    def remove(self, index):\n        # 检查索引越界\n        self._check_element_index(index)\n\n        cap = len(self.data)\n        # 可以缩容，节约空间\n        if self.size == cap // 4:\n            self._resize(cap // 2)\n\n        deleted_val = self.data[index]\n\n        # 搬移数据 data[index+1..] -> data[index..]\n        for i in range(index + 1, self.size):\n            self.data[i - 1] = self.data[i]\n\n        self.data[self.size - 1] = None\n        self.size -= 1\n\n        return deleted_val\n\n    def remove_first(self):\n        return self.remove(0)\n\n    # 查\n    def get(self, index):\n        # 检查索引越界\n        self._check_element_index(index)\n\n        return self.data[index]\n\n    # 改\n    def set(self, index, element):\n        # 检查索引越界\n        self._check_element_index(index)\n        # 修改数据\n        old_val = self.data[index]\n        self.data[index] = element\n        return old_val\n\n    # 工具方法\n    def get_size(self):\n        return self.size\n\n    def is_empty(self):\n        return self.size == 0\n\n    # 将 data 的容量改为 newCap\n    def _resize(self, new_cap):\n        temp = [None] * new_cap\n        for i in range(self.size):\n            temp[i] = self.data[i]\n        self.data = temp\n\n    def _is_element_index(self, index):\n        return 0 <= index < self.size\n\n    def _is_position_index(self, index):\n        return 0 <= index <= self.size\n\n    def _check_element_index(self, index):\n        if not self._is_element_index(index):\n            raise IndexError(f\"Index: {index}, Size: {self.size}\")\n\n    def _check_position_index(self, index):\n        if not self._is_position_index(index):\n            raise IndexError(f\"Index: {index}, Size: {self.size}\")\n\n    def display(self):\n        print(f\"size = {self.size}, cap = {len(self.data)}\")\n        print(self.data)\n\n\n# Usage example\nif __name__ == \"__main__\":\n    arr = MyArrayList(init_capacity=3)\n\n    # 添加 5 个元素\n    for i in range(1, 6):\n        arr.add_last(i)\n\n    arr.remove(3)\n    arr.add(1, 9)\n    arr.add_first(100)\n    val = arr.remove_last()\n\n    # 100 1 9 2 3\n    for i in range(arr.get_size()):\n        print(arr.get(i))\n```","updated":"2025-07-16T15:01:20.275Z","path":"数据结构/动态数组代码实现.html","comments":1,"layout":"page","_id":"cmd63a8cv000nk8v304x75o4r","content":"<h2 id=\"自动扩缩容\"><a href=\"#自动扩缩容\" class=\"headerlink\" title=\"自动扩缩容\"></a>自动扩缩容</h2><p>我们这里就实现一个简单的扩缩容的策略：</p>\n<ul>\n<li>当数组元素个数达到底层静态数组的容量上限时，扩容为原来的 2 倍；</li>\n<li>当数组元素个数缩减到底层静态数组的容量的 1&#x2F;4 时，缩容为原来的 1&#x2F;2。</li>\n</ul>\n<h2 id=\"索引边界的检查\"><a href=\"#索引边界的检查\" class=\"headerlink\" title=\"索引边界的检查\"></a>索引边界的检查</h2><p>需要注意的两个检查越界的方法：</p>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>越界判断条件</th>\n<th>适用场景</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>checkElementIndex</td>\n<td>index&gt;&#x3D;size</td>\n<td>访问 &#x2F; 修改元素操作（如 get&#x2F;set）</td>\n</tr>\n<tr>\n<td>checkPositionIndex</td>\n<td>index&gt;size</td>\n<td>插入元素操作（如 add）</td>\n</tr>\n</tbody></table>\n<p>为什么会有这样的区别？<br>比方说有这样一个 <code>nums</code> 数组，对于每个元素来说，合法的索引一定是 <code>index &lt; size</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nums = [5, 6, 7, 8]</span><br><span class=\"line\">index   0  1  2  3</span><br></pre></td></tr></table></figure>\n\n<p>但如果是要在数组中插入新元素，那么新元素可能的插入位置并不是元素的索引，而是索引之间的空隙：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nums = [ | 5 | 6 | 7 | 8 | ]</span><br><span class=\"line\">index    0   1   2   3   4</span><br></pre></td></tr></table></figure>\n\n<p>这些空隙都是合法的插入位置，所以说 <code>index == size</code> 也是合法的。这就是 <code>checkPositionIndex</code> 和 <code>checkElementIndex</code> 的区别。</p>\n<h2 id=\"删除元素谨防内存泄漏\"><a href=\"#删除元素谨防内存泄漏\" class=\"headerlink\" title=\"删除元素谨防内存泄漏\"></a>删除元素谨防内存泄漏</h2><p>单从算法的角度，其实并不需要关心被删掉的元素应该如何处理，但是具体到代码实现，我们需要注意可能出现的内存泄漏。</p>\n<p>在我给出的代码实现中，删除元素时，我都会<strong>把被删除的元素置为 <code>null</code></strong> 。</p>\n<p>以 Java 为例，Java 的垃圾回收机制是基于<strong>图算法的可达性</strong>分析，如果一个对象再也无法被访问到，那么这个对象占用的内存才会被释放；否则，垃圾回收器会认为这个对象还在使用中，就不会释放这个对象占用的内存。</p>\n<p>如果你不执行 <code>data[size - 1] = null</code> 这行代码，那么 <code>data[size - 1]</code> 这个引用就会一直存在，你可以通过 <code>data[size - 1]</code> 访问这个对象，所以这个对象被认为是可达的，它的内存就一直不会被释放，进而造成内存泄漏。</p>\n<p>其他带垃圾回收功能的语言应该也是类似的，你可以具体了解一下你使用的编程语言的垃圾回收机制，这是写出无 bug 代码的基本要求。</p>\n<h2 id=\"其他细节优化\"><a href=\"#其他细节优化\" class=\"headerlink\" title=\"其他细节优化\"></a>其他细节优化</h2><p>有不少可以进一步优化的点，比方说，我是用 for 循环复制数组数据的，实际上这种方式复制的效率比较差，大部分编程语言会提供更高效的数组复制方法，比如 Java 的 <code>System.arraycopy</code>。</p>\n<p>不过它再怎么优化，本质上也是要搬移数据，时间复杂度都是 O(n)。本文的重点在于让你理解数组增删查改 API 的基本实现思路以及时间复杂度，如果对这些细节感兴趣，可以找到编程语言标准库的源码深入研究。</p>\n<h2 id=\"动态数组代码实现\"><a href=\"#动态数组代码实现\" class=\"headerlink\" title=\"动态数组代码实现\"></a>动态数组代码实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// java</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.NoSuchElementException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyArrayList</span>&lt;E&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 真正存储数据的底层数组</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> E[] data;</span><br><span class=\"line\">    <span class=\"comment\">// 记录当前元素个数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> size;</span><br><span class=\"line\">    <span class=\"comment\">// 默认初始容量</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">INIT_CAP</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MyArrayList</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>(INIT_CAP);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MyArrayList</span><span class=\"params\">(<span class=\"type\">int</span> initCapacity)</span> &#123;</span><br><span class=\"line\">        data = (E[]) <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[initCapacity];</span><br><span class=\"line\">        size = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 增</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addLast</span><span class=\"params\">(E e)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">cap</span> <span class=\"operator\">=</span> data.length;</span><br><span class=\"line\">        <span class=\"comment\">// 看 data 数组容量够不够</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (size == cap) &#123;</span><br><span class=\"line\">            resize(<span class=\"number\">2</span> * cap);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 在尾部插入元素</span></span><br><span class=\"line\">        data[size] = e;</span><br><span class=\"line\">        size++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(<span class=\"type\">int</span> index, E e)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 检查索引越界</span></span><br><span class=\"line\">        checkPositionIndex(index);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">cap</span> <span class=\"operator\">=</span> data.length;</span><br><span class=\"line\">        <span class=\"comment\">// 看 data 数组容量够不够</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (size == cap) &#123;</span><br><span class=\"line\">            resize(<span class=\"number\">2</span> * cap);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 搬移数据 data[index..] -&gt; data[index+1..]</span></span><br><span class=\"line\">        <span class=\"comment\">// 给新元素腾出位置</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> size - <span class=\"number\">1</span>; i &gt;= index; i--) &#123;</span><br><span class=\"line\">            data[i + <span class=\"number\">1</span>] = data[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 插入新元素</span></span><br><span class=\"line\">        data[index] = e;</span><br><span class=\"line\"></span><br><span class=\"line\">        size++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addFirst</span><span class=\"params\">(E e)</span> &#123;</span><br><span class=\"line\">        add(<span class=\"number\">0</span>, e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 删</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> E <span class=\"title function_\">removeLast</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (size == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NoSuchElementException</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">cap</span> <span class=\"operator\">=</span> data.length;</span><br><span class=\"line\">        <span class=\"comment\">// 可以缩容，节约空间</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (size == cap / <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">            resize(cap / <span class=\"number\">2</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">E</span> <span class=\"variable\">deletedVal</span> <span class=\"operator\">=</span> data[size - <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"comment\">// 删除最后一个元素</span></span><br><span class=\"line\">        <span class=\"comment\">// 必须给最后一个元素置为 null，否则会内存泄漏</span></span><br><span class=\"line\">        data[size - <span class=\"number\">1</span>] = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        size--;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> deletedVal;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> E <span class=\"title function_\">remove</span><span class=\"params\">(<span class=\"type\">int</span> index)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 检查索引越界</span></span><br><span class=\"line\">        checkElementIndex(index);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">cap</span> <span class=\"operator\">=</span> data.length;</span><br><span class=\"line\">        <span class=\"comment\">// 可以缩容，节约空间</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (size == cap / <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">            resize(cap / <span class=\"number\">2</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">E</span> <span class=\"variable\">deletedVal</span> <span class=\"operator\">=</span> data[index];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 搬移数据 data[index+1..] -&gt; data[index..]</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> index + <span class=\"number\">1</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">            data[i - <span class=\"number\">1</span>] = data[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        data[size - <span class=\"number\">1</span>] = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        size--;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> deletedVal;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> E <span class=\"title function_\">removeFirst</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> remove(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 查</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> E <span class=\"title function_\">get</span><span class=\"params\">(<span class=\"type\">int</span> index)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 检查索引越界</span></span><br><span class=\"line\">        checkElementIndex(index);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> data[index];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 改</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> E <span class=\"title function_\">set</span><span class=\"params\">(<span class=\"type\">int</span> index, E element)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 检查索引越界</span></span><br><span class=\"line\">        checkElementIndex(index);</span><br><span class=\"line\">        <span class=\"comment\">// 修改数据</span></span><br><span class=\"line\">        <span class=\"type\">E</span> <span class=\"variable\">oldVal</span> <span class=\"operator\">=</span> data[index];</span><br><span class=\"line\">        data[index] = element;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> oldVal;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 工具方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">size</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isEmpty</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> size == <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将 data 的容量改为 newCap</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">resize</span><span class=\"params\">(<span class=\"type\">int</span> newCap)</span> &#123;</span><br><span class=\"line\">        E[] temp = (E[]) <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[newCap];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">            temp[i] = data[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        data = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isElementIndex</span><span class=\"params\">(<span class=\"type\">int</span> index)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> index &gt;= <span class=\"number\">0</span> &amp;&amp; index &lt; size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isPositionIndex</span><span class=\"params\">(<span class=\"type\">int</span> index)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> index &gt;= <span class=\"number\">0</span> &amp;&amp; index &lt;= size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 检查 index 索引位置是否可以存在元素</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">checkElementIndex</span><span class=\"params\">(<span class=\"type\">int</span> index)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!isElementIndex(index))</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IndexOutOfBoundsException</span>(<span class=\"string\">&quot;Index: &quot;</span> + index + <span class=\"string\">&quot;, Size: &quot;</span> + size);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 检查 index 索引位置是否可以添加元素</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">checkPositionIndex</span><span class=\"params\">(<span class=\"type\">int</span> index)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!isPositionIndex(index))</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IndexOutOfBoundsException</span>(<span class=\"string\">&quot;Index: &quot;</span> + index + <span class=\"string\">&quot;, Size: &quot;</span> + size);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">display</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;size = &quot;</span> + size + <span class=\"string\">&quot; cap = &quot;</span> + data.length);</span><br><span class=\"line\">        System.out.println(Arrays.toString(data));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 初始容量设置为 3</span></span><br><span class=\"line\">        MyArrayList&lt;Integer&gt; arr = <span class=\"keyword\">new</span> <span class=\"title class_\">MyArrayList</span>&lt;&gt;(<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 添加 5 个元素</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt;= <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">            arr.addLast(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        arr.remove(<span class=\"number\">3</span>);</span><br><span class=\"line\">        arr.add(<span class=\"number\">1</span>, <span class=\"number\">9</span>);</span><br><span class=\"line\">        arr.addFirst(<span class=\"number\">100</span>);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">val</span> <span class=\"operator\">=</span> arr.removeLast();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; arr.size(); i++) &#123;</span><br><span class=\"line\">            System.out.println(arr.get(i));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># python</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyArrayList</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 默认初始容量</span></span><br><span class=\"line\">    INIT_CAP = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, init_capacity=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.data = [<span class=\"literal\">None</span>] * (init_capacity <span class=\"keyword\">if</span> init_capacity <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span> <span class=\"keyword\">else</span> <span class=\"variable language_\">self</span>.__class__.INIT_CAP)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.size = <span class=\"number\">0</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 增</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">add_last</span>(<span class=\"params\">self, e</span>):</span><br><span class=\"line\">        cap = <span class=\"built_in\">len</span>(<span class=\"variable language_\">self</span>.data)</span><br><span class=\"line\">        <span class=\"comment\"># 看 data 数组容量够不够</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>.size == cap:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>._resize(<span class=\"number\">2</span> * cap)</span><br><span class=\"line\">        <span class=\"comment\"># 在尾部插入元素</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.data[<span class=\"variable language_\">self</span>.size] = e</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.size += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">self, index, e</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 检查索引越界</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>._check_position_index(index)</span><br><span class=\"line\"></span><br><span class=\"line\">        cap = <span class=\"built_in\">len</span>(<span class=\"variable language_\">self</span>.data)</span><br><span class=\"line\">        <span class=\"comment\"># 看 data 数组容量够不够</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>.size == cap:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>._resize(<span class=\"number\">2</span> * cap)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 搬移数据 data[index..] -&gt; data[index+1..]</span></span><br><span class=\"line\">        <span class=\"comment\"># 给新元素腾出位置</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"variable language_\">self</span>.size-<span class=\"number\">1</span>, index-<span class=\"number\">1</span>, -<span class=\"number\">1</span>):</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.data[i+<span class=\"number\">1</span>] = <span class=\"variable language_\">self</span>.data[i]</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># 插入新元素</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.data[index] = e</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.size += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">add_first</span>(<span class=\"params\">self, e</span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.add(<span class=\"number\">0</span>, e)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 删</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">remove_last</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>.size == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> Exception(<span class=\"string\">&quot;NoSuchElementException&quot;</span>)</span><br><span class=\"line\">        cap = <span class=\"built_in\">len</span>(<span class=\"variable language_\">self</span>.data)</span><br><span class=\"line\">        <span class=\"comment\"># 可以缩容，节约空间</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>.size == cap // <span class=\"number\">4</span>:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>._resize(cap // <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        deleted_val = <span class=\"variable language_\">self</span>.data[<span class=\"variable language_\">self</span>.size - <span class=\"number\">1</span>]</span><br><span class=\"line\">        <span class=\"comment\"># 删除最后一个元素</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.data[<span class=\"variable language_\">self</span>.size - <span class=\"number\">1</span>] = <span class=\"literal\">None</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.size -= <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> deleted_val</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">remove</span>(<span class=\"params\">self, index</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 检查索引越界</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>._check_element_index(index)</span><br><span class=\"line\"></span><br><span class=\"line\">        cap = <span class=\"built_in\">len</span>(<span class=\"variable language_\">self</span>.data)</span><br><span class=\"line\">        <span class=\"comment\"># 可以缩容，节约空间</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>.size == cap // <span class=\"number\">4</span>:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>._resize(cap // <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        deleted_val = <span class=\"variable language_\">self</span>.data[index]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 搬移数据 data[index+1..] -&gt; data[index..]</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(index + <span class=\"number\">1</span>, <span class=\"variable language_\">self</span>.size):</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.data[i - <span class=\"number\">1</span>] = <span class=\"variable language_\">self</span>.data[i]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.data[<span class=\"variable language_\">self</span>.size - <span class=\"number\">1</span>] = <span class=\"literal\">None</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.size -= <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> deleted_val</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">remove_first</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">self</span>.remove(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 查</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get</span>(<span class=\"params\">self, index</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 检查索引越界</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>._check_element_index(index)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">self</span>.data[index]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 改</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">set</span>(<span class=\"params\">self, index, element</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 检查索引越界</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>._check_element_index(index)</span><br><span class=\"line\">        <span class=\"comment\"># 修改数据</span></span><br><span class=\"line\">        old_val = <span class=\"variable language_\">self</span>.data[index]</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.data[index] = element</span><br><span class=\"line\">        <span class=\"keyword\">return</span> old_val</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 工具方法</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get_size</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">self</span>.size</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">is_empty</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">self</span>.size == <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 将 data 的容量改为 newCap</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">_resize</span>(<span class=\"params\">self, new_cap</span>):</span><br><span class=\"line\">        temp = [<span class=\"literal\">None</span>] * new_cap</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"variable language_\">self</span>.size):</span><br><span class=\"line\">            temp[i] = <span class=\"variable language_\">self</span>.data[i]</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.data = temp</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">_is_element_index</span>(<span class=\"params\">self, index</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span> &lt;= index &lt; <span class=\"variable language_\">self</span>.size</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">_is_position_index</span>(<span class=\"params\">self, index</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span> &lt;= index &lt;= <span class=\"variable language_\">self</span>.size</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">_check_element_index</span>(<span class=\"params\">self, index</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"variable language_\">self</span>._is_element_index(index):</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> IndexError(<span class=\"string\">f&quot;Index: <span class=\"subst\">&#123;index&#125;</span>, Size: <span class=\"subst\">&#123;self.size&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">_check_position_index</span>(<span class=\"params\">self, index</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"variable language_\">self</span>._is_position_index(index):</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> IndexError(<span class=\"string\">f&quot;Index: <span class=\"subst\">&#123;index&#125;</span>, Size: <span class=\"subst\">&#123;self.size&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">display</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;size = <span class=\"subst\">&#123;self.size&#125;</span>, cap = <span class=\"subst\">&#123;<span class=\"built_in\">len</span>(self.data)&#125;</span>&quot;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"variable language_\">self</span>.data)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Usage example</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    arr = MyArrayList(init_capacity=<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 添加 5 个元素</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">6</span>):</span><br><span class=\"line\">        arr.add_last(i)</span><br><span class=\"line\"></span><br><span class=\"line\">    arr.remove(<span class=\"number\">3</span>)</span><br><span class=\"line\">    arr.add(<span class=\"number\">1</span>, <span class=\"number\">9</span>)</span><br><span class=\"line\">    arr.add_first(<span class=\"number\">100</span>)</span><br><span class=\"line\">    val = arr.remove_last()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 100 1 9 2 3</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(arr.get_size()):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(arr.get(i))</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"自动扩缩容\"><a href=\"#自动扩缩容\" class=\"headerlink\" title=\"自动扩缩容\"></a>自动扩缩容</h2><p>我们这里就实现一个简单的扩缩容的策略：</p>\n<ul>\n<li>当数组元素个数达到底层静态数组的容量上限时，扩容为原来的 2 倍；</li>\n<li>当数组元素个数缩减到底层静态数组的容量的 1&#x2F;4 时，缩容为原来的 1&#x2F;2。</li>\n</ul>\n<h2 id=\"索引边界的检查\"><a href=\"#索引边界的检查\" class=\"headerlink\" title=\"索引边界的检查\"></a>索引边界的检查</h2><p>需要注意的两个检查越界的方法：</p>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>越界判断条件</th>\n<th>适用场景</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>checkElementIndex</td>\n<td>index&gt;&#x3D;size</td>\n<td>访问 &#x2F; 修改元素操作（如 get&#x2F;set）</td>\n</tr>\n<tr>\n<td>checkPositionIndex</td>\n<td>index&gt;size</td>\n<td>插入元素操作（如 add）</td>\n</tr>\n</tbody></table>\n<p>为什么会有这样的区别？<br>比方说有这样一个 <code>nums</code> 数组，对于每个元素来说，合法的索引一定是 <code>index &lt; size</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nums = [5, 6, 7, 8]</span><br><span class=\"line\">index   0  1  2  3</span><br></pre></td></tr></table></figure>\n\n<p>但如果是要在数组中插入新元素，那么新元素可能的插入位置并不是元素的索引，而是索引之间的空隙：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nums = [ | 5 | 6 | 7 | 8 | ]</span><br><span class=\"line\">index    0   1   2   3   4</span><br></pre></td></tr></table></figure>\n\n<p>这些空隙都是合法的插入位置，所以说 <code>index == size</code> 也是合法的。这就是 <code>checkPositionIndex</code> 和 <code>checkElementIndex</code> 的区别。</p>\n<h2 id=\"删除元素谨防内存泄漏\"><a href=\"#删除元素谨防内存泄漏\" class=\"headerlink\" title=\"删除元素谨防内存泄漏\"></a>删除元素谨防内存泄漏</h2><p>单从算法的角度，其实并不需要关心被删掉的元素应该如何处理，但是具体到代码实现，我们需要注意可能出现的内存泄漏。</p>\n<p>在我给出的代码实现中，删除元素时，我都会<strong>把被删除的元素置为 <code>null</code></strong> 。</p>\n<p>以 Java 为例，Java 的垃圾回收机制是基于<strong>图算法的可达性</strong>分析，如果一个对象再也无法被访问到，那么这个对象占用的内存才会被释放；否则，垃圾回收器会认为这个对象还在使用中，就不会释放这个对象占用的内存。</p>\n<p>如果你不执行 <code>data[size - 1] = null</code> 这行代码，那么 <code>data[size - 1]</code> 这个引用就会一直存在，你可以通过 <code>data[size - 1]</code> 访问这个对象，所以这个对象被认为是可达的，它的内存就一直不会被释放，进而造成内存泄漏。</p>\n<p>其他带垃圾回收功能的语言应该也是类似的，你可以具体了解一下你使用的编程语言的垃圾回收机制，这是写出无 bug 代码的基本要求。</p>\n<h2 id=\"其他细节优化\"><a href=\"#其他细节优化\" class=\"headerlink\" title=\"其他细节优化\"></a>其他细节优化</h2><p>有不少可以进一步优化的点，比方说，我是用 for 循环复制数组数据的，实际上这种方式复制的效率比较差，大部分编程语言会提供更高效的数组复制方法，比如 Java 的 <code>System.arraycopy</code>。</p>\n<p>不过它再怎么优化，本质上也是要搬移数据，时间复杂度都是 O(n)。本文的重点在于让你理解数组增删查改 API 的基本实现思路以及时间复杂度，如果对这些细节感兴趣，可以找到编程语言标准库的源码深入研究。</p>\n<h2 id=\"动态数组代码实现\"><a href=\"#动态数组代码实现\" class=\"headerlink\" title=\"动态数组代码实现\"></a>动态数组代码实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// java</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.NoSuchElementException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyArrayList</span>&lt;E&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 真正存储数据的底层数组</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> E[] data;</span><br><span class=\"line\">    <span class=\"comment\">// 记录当前元素个数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> size;</span><br><span class=\"line\">    <span class=\"comment\">// 默认初始容量</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">INIT_CAP</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MyArrayList</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>(INIT_CAP);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MyArrayList</span><span class=\"params\">(<span class=\"type\">int</span> initCapacity)</span> &#123;</span><br><span class=\"line\">        data = (E[]) <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[initCapacity];</span><br><span class=\"line\">        size = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 增</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addLast</span><span class=\"params\">(E e)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">cap</span> <span class=\"operator\">=</span> data.length;</span><br><span class=\"line\">        <span class=\"comment\">// 看 data 数组容量够不够</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (size == cap) &#123;</span><br><span class=\"line\">            resize(<span class=\"number\">2</span> * cap);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 在尾部插入元素</span></span><br><span class=\"line\">        data[size] = e;</span><br><span class=\"line\">        size++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(<span class=\"type\">int</span> index, E e)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 检查索引越界</span></span><br><span class=\"line\">        checkPositionIndex(index);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">cap</span> <span class=\"operator\">=</span> data.length;</span><br><span class=\"line\">        <span class=\"comment\">// 看 data 数组容量够不够</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (size == cap) &#123;</span><br><span class=\"line\">            resize(<span class=\"number\">2</span> * cap);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 搬移数据 data[index..] -&gt; data[index+1..]</span></span><br><span class=\"line\">        <span class=\"comment\">// 给新元素腾出位置</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> size - <span class=\"number\">1</span>; i &gt;= index; i--) &#123;</span><br><span class=\"line\">            data[i + <span class=\"number\">1</span>] = data[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 插入新元素</span></span><br><span class=\"line\">        data[index] = e;</span><br><span class=\"line\"></span><br><span class=\"line\">        size++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addFirst</span><span class=\"params\">(E e)</span> &#123;</span><br><span class=\"line\">        add(<span class=\"number\">0</span>, e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 删</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> E <span class=\"title function_\">removeLast</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (size == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NoSuchElementException</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">cap</span> <span class=\"operator\">=</span> data.length;</span><br><span class=\"line\">        <span class=\"comment\">// 可以缩容，节约空间</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (size == cap / <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">            resize(cap / <span class=\"number\">2</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">E</span> <span class=\"variable\">deletedVal</span> <span class=\"operator\">=</span> data[size - <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"comment\">// 删除最后一个元素</span></span><br><span class=\"line\">        <span class=\"comment\">// 必须给最后一个元素置为 null，否则会内存泄漏</span></span><br><span class=\"line\">        data[size - <span class=\"number\">1</span>] = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        size--;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> deletedVal;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> E <span class=\"title function_\">remove</span><span class=\"params\">(<span class=\"type\">int</span> index)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 检查索引越界</span></span><br><span class=\"line\">        checkElementIndex(index);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">cap</span> <span class=\"operator\">=</span> data.length;</span><br><span class=\"line\">        <span class=\"comment\">// 可以缩容，节约空间</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (size == cap / <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">            resize(cap / <span class=\"number\">2</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">E</span> <span class=\"variable\">deletedVal</span> <span class=\"operator\">=</span> data[index];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 搬移数据 data[index+1..] -&gt; data[index..]</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> index + <span class=\"number\">1</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">            data[i - <span class=\"number\">1</span>] = data[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        data[size - <span class=\"number\">1</span>] = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        size--;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> deletedVal;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> E <span class=\"title function_\">removeFirst</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> remove(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 查</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> E <span class=\"title function_\">get</span><span class=\"params\">(<span class=\"type\">int</span> index)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 检查索引越界</span></span><br><span class=\"line\">        checkElementIndex(index);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> data[index];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 改</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> E <span class=\"title function_\">set</span><span class=\"params\">(<span class=\"type\">int</span> index, E element)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 检查索引越界</span></span><br><span class=\"line\">        checkElementIndex(index);</span><br><span class=\"line\">        <span class=\"comment\">// 修改数据</span></span><br><span class=\"line\">        <span class=\"type\">E</span> <span class=\"variable\">oldVal</span> <span class=\"operator\">=</span> data[index];</span><br><span class=\"line\">        data[index] = element;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> oldVal;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 工具方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">size</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isEmpty</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> size == <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将 data 的容量改为 newCap</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">resize</span><span class=\"params\">(<span class=\"type\">int</span> newCap)</span> &#123;</span><br><span class=\"line\">        E[] temp = (E[]) <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[newCap];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">            temp[i] = data[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        data = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isElementIndex</span><span class=\"params\">(<span class=\"type\">int</span> index)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> index &gt;= <span class=\"number\">0</span> &amp;&amp; index &lt; size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isPositionIndex</span><span class=\"params\">(<span class=\"type\">int</span> index)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> index &gt;= <span class=\"number\">0</span> &amp;&amp; index &lt;= size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 检查 index 索引位置是否可以存在元素</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">checkElementIndex</span><span class=\"params\">(<span class=\"type\">int</span> index)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!isElementIndex(index))</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IndexOutOfBoundsException</span>(<span class=\"string\">&quot;Index: &quot;</span> + index + <span class=\"string\">&quot;, Size: &quot;</span> + size);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 检查 index 索引位置是否可以添加元素</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">checkPositionIndex</span><span class=\"params\">(<span class=\"type\">int</span> index)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!isPositionIndex(index))</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IndexOutOfBoundsException</span>(<span class=\"string\">&quot;Index: &quot;</span> + index + <span class=\"string\">&quot;, Size: &quot;</span> + size);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">display</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;size = &quot;</span> + size + <span class=\"string\">&quot; cap = &quot;</span> + data.length);</span><br><span class=\"line\">        System.out.println(Arrays.toString(data));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 初始容量设置为 3</span></span><br><span class=\"line\">        MyArrayList&lt;Integer&gt; arr = <span class=\"keyword\">new</span> <span class=\"title class_\">MyArrayList</span>&lt;&gt;(<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 添加 5 个元素</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt;= <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">            arr.addLast(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        arr.remove(<span class=\"number\">3</span>);</span><br><span class=\"line\">        arr.add(<span class=\"number\">1</span>, <span class=\"number\">9</span>);</span><br><span class=\"line\">        arr.addFirst(<span class=\"number\">100</span>);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">val</span> <span class=\"operator\">=</span> arr.removeLast();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; arr.size(); i++) &#123;</span><br><span class=\"line\">            System.out.println(arr.get(i));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># python</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyArrayList</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 默认初始容量</span></span><br><span class=\"line\">    INIT_CAP = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, init_capacity=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.data = [<span class=\"literal\">None</span>] * (init_capacity <span class=\"keyword\">if</span> init_capacity <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span> <span class=\"keyword\">else</span> <span class=\"variable language_\">self</span>.__class__.INIT_CAP)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.size = <span class=\"number\">0</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 增</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">add_last</span>(<span class=\"params\">self, e</span>):</span><br><span class=\"line\">        cap = <span class=\"built_in\">len</span>(<span class=\"variable language_\">self</span>.data)</span><br><span class=\"line\">        <span class=\"comment\"># 看 data 数组容量够不够</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>.size == cap:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>._resize(<span class=\"number\">2</span> * cap)</span><br><span class=\"line\">        <span class=\"comment\"># 在尾部插入元素</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.data[<span class=\"variable language_\">self</span>.size] = e</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.size += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">self, index, e</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 检查索引越界</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>._check_position_index(index)</span><br><span class=\"line\"></span><br><span class=\"line\">        cap = <span class=\"built_in\">len</span>(<span class=\"variable language_\">self</span>.data)</span><br><span class=\"line\">        <span class=\"comment\"># 看 data 数组容量够不够</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>.size == cap:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>._resize(<span class=\"number\">2</span> * cap)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 搬移数据 data[index..] -&gt; data[index+1..]</span></span><br><span class=\"line\">        <span class=\"comment\"># 给新元素腾出位置</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"variable language_\">self</span>.size-<span class=\"number\">1</span>, index-<span class=\"number\">1</span>, -<span class=\"number\">1</span>):</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.data[i+<span class=\"number\">1</span>] = <span class=\"variable language_\">self</span>.data[i]</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># 插入新元素</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.data[index] = e</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.size += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">add_first</span>(<span class=\"params\">self, e</span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.add(<span class=\"number\">0</span>, e)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 删</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">remove_last</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>.size == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> Exception(<span class=\"string\">&quot;NoSuchElementException&quot;</span>)</span><br><span class=\"line\">        cap = <span class=\"built_in\">len</span>(<span class=\"variable language_\">self</span>.data)</span><br><span class=\"line\">        <span class=\"comment\"># 可以缩容，节约空间</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>.size == cap // <span class=\"number\">4</span>:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>._resize(cap // <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        deleted_val = <span class=\"variable language_\">self</span>.data[<span class=\"variable language_\">self</span>.size - <span class=\"number\">1</span>]</span><br><span class=\"line\">        <span class=\"comment\"># 删除最后一个元素</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.data[<span class=\"variable language_\">self</span>.size - <span class=\"number\">1</span>] = <span class=\"literal\">None</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.size -= <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> deleted_val</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">remove</span>(<span class=\"params\">self, index</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 检查索引越界</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>._check_element_index(index)</span><br><span class=\"line\"></span><br><span class=\"line\">        cap = <span class=\"built_in\">len</span>(<span class=\"variable language_\">self</span>.data)</span><br><span class=\"line\">        <span class=\"comment\"># 可以缩容，节约空间</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>.size == cap // <span class=\"number\">4</span>:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>._resize(cap // <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        deleted_val = <span class=\"variable language_\">self</span>.data[index]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 搬移数据 data[index+1..] -&gt; data[index..]</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(index + <span class=\"number\">1</span>, <span class=\"variable language_\">self</span>.size):</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.data[i - <span class=\"number\">1</span>] = <span class=\"variable language_\">self</span>.data[i]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.data[<span class=\"variable language_\">self</span>.size - <span class=\"number\">1</span>] = <span class=\"literal\">None</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.size -= <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> deleted_val</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">remove_first</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">self</span>.remove(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 查</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get</span>(<span class=\"params\">self, index</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 检查索引越界</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>._check_element_index(index)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">self</span>.data[index]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 改</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">set</span>(<span class=\"params\">self, index, element</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 检查索引越界</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>._check_element_index(index)</span><br><span class=\"line\">        <span class=\"comment\"># 修改数据</span></span><br><span class=\"line\">        old_val = <span class=\"variable language_\">self</span>.data[index]</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.data[index] = element</span><br><span class=\"line\">        <span class=\"keyword\">return</span> old_val</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 工具方法</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get_size</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">self</span>.size</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">is_empty</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">self</span>.size == <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 将 data 的容量改为 newCap</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">_resize</span>(<span class=\"params\">self, new_cap</span>):</span><br><span class=\"line\">        temp = [<span class=\"literal\">None</span>] * new_cap</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"variable language_\">self</span>.size):</span><br><span class=\"line\">            temp[i] = <span class=\"variable language_\">self</span>.data[i]</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.data = temp</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">_is_element_index</span>(<span class=\"params\">self, index</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span> &lt;= index &lt; <span class=\"variable language_\">self</span>.size</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">_is_position_index</span>(<span class=\"params\">self, index</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span> &lt;= index &lt;= <span class=\"variable language_\">self</span>.size</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">_check_element_index</span>(<span class=\"params\">self, index</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"variable language_\">self</span>._is_element_index(index):</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> IndexError(<span class=\"string\">f&quot;Index: <span class=\"subst\">&#123;index&#125;</span>, Size: <span class=\"subst\">&#123;self.size&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">_check_position_index</span>(<span class=\"params\">self, index</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"variable language_\">self</span>._is_position_index(index):</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> IndexError(<span class=\"string\">f&quot;Index: <span class=\"subst\">&#123;index&#125;</span>, Size: <span class=\"subst\">&#123;self.size&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">display</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;size = <span class=\"subst\">&#123;self.size&#125;</span>, cap = <span class=\"subst\">&#123;<span class=\"built_in\">len</span>(self.data)&#125;</span>&quot;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"variable language_\">self</span>.data)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Usage example</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    arr = MyArrayList(init_capacity=<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 添加 5 个元素</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">6</span>):</span><br><span class=\"line\">        arr.add_last(i)</span><br><span class=\"line\"></span><br><span class=\"line\">    arr.remove(<span class=\"number\">3</span>)</span><br><span class=\"line\">    arr.add(<span class=\"number\">1</span>, <span class=\"number\">9</span>)</span><br><span class=\"line\">    arr.add_first(<span class=\"number\">100</span>)</span><br><span class=\"line\">    val = arr.remove_last()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 100 1 9 2 3</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(arr.get_size()):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(arr.get(i))</span><br></pre></td></tr></table></figure>"},{"date":"2025-07-14T16:00:00.000Z","title":"数组（顺序存储）基本原理","cssclasses":["数据结构","数组"],"_content":"## 静态/动态数组实质\n\n* 「静态数组」就是一块**连续的内存空间**，我们可以通过索引来访问这块内存空间中的元素，这是数组的原始形态。\n* 「动态数组」是编程语言为了方便我们使用，在静态数组的基础上帮我们添加了一些常用的      API，比如 `push, insert, remove` 等等方法\n\n## 静态数组\n\n静态数组在创建的时候就要确定数组的元素类型和元素数量。\n>只有在 C++、Java、Golang 这类语言中才提供了创建静态数组的方式，类似 Python、JavaScript 这类语言并没有提供静态数组的定义方式\n\n#### 定义一个静态数组的方法：\n```java\n// 定义一个大小为 10 的静态数组\nint[] arr = new int[10];\n\n// 使用索引赋值\narr[0] = 1;\narr[1] = 2;\n\n// 使用索引取值\nint a = arr[0];\n```\n\n```python\n# 严格来说，Python 没有静态数组的定义方式\n# 我们暂且使用列表模拟静态数组\n\n# 定义一个大小为 10 的静态数组\narr = [0] * 10\n\n# 使用索引赋值\narr[0] = 1\narr[1] = 2\n\n# 使用索引取值\na = arr[0]\n```\n\n#### 内核操作\n`int arr[10]` 这段代码到底做了什么事情呢？\n1. 在内存中开辟了一段**连续的内存空间**，大小是 `10 * sizeof(int)` 字节。一个 int 在计算机内存中占 4 字节，也就是总共 40 字节。\n2. 定义了一个名为 `arr` 的数组指针，指向这段内存空间的首地址。\n\n `arr[1] = 2` 这段代码又做了什么事情呢？\n1. 计算 `arr` 的首地址加上 `1 * sizeof(int)` 字节（4 字节）的偏移量，找到了内存空间中的第二个元素的**首地址**。\n2. 从这个地址开始的 4 个字节的内存空间中写入了整数 `2`。\n\n>1. 为什么数组的索引从 0 开始？\n\t就是方便取地址。`arr[0]` 就是 `arr` 的首地址，就是 `arr` 的首地址加上 `0 * 4` 字节,从这个地址往后的 4 个字节存储着第一个元素的值；`arr[1]` 就是 `arr` 的首地址加上 `1 * 4` 字节，也就是第二个元素的首地址，这个地址往后的 4 个字节存储着第二个元素的值。`arr[2], arr[3]` 以此类推。\n>2. 因为数组的名字 `arr` 就指向整块内存的首地址，所以数组名 `arr` 就是一个指针。你直接取这个地址的值，就是第一个元素的值。也就是说，`*arr` 的值就是 `乘以arr[0]`，即第一个元素的值\n\t\n==内存空间首地址已知、大小已知、内存空间连续，所以，我们获得了数组的超能力「**随机访问」**：只要给定任何一个数组索引，我可以在 O(1)O(1) 的时间内直接获取到对应元素的值。\n因为我可以通过首地址和索引直接计算出目标元素的内存地址。计算机的内存寻址时间可以认为是 O(1)O(1)，所以数组的随机访问时间复杂度是 O(1)O(1)。==\n\n### 增删查改\n\n#### 增\n##### 末尾追加 - 时间复杂度是 O(1)\n\n```java\n// 大小为 10 的数组已经装了 4 个元素\nint[] arr = new int[10];\nfor (int i = 0; i < 4; i++) {\n    arr[i] = i;\n}\n\n// 现在想在数组末尾追加一个元素 4\narr[4] = 4;\n\n// 再在数组末尾追加一个元素 5\narr[5] = 5;\n\n// 依此类推\n// ...\n```\n\n```python\n# 大小为 10 的数组已经装了 4 个元素\narr = [0] * 10\nfor i in range(4):\n    arr[i] = i\n\n# 现在想在数组末尾追加一个元素 4\narr[4] = 4\n\n# 再在数组末尾追加一个元素 5\narr[5] = 5\n\n# 依此类推\n# ...\n```\n\n##### 中间插入 - 时间复杂度是 O(N)\n\n这就要涉及「数据搬移」，给新元素腾出空位，然后再才能插入新元素。\n\n```java\n// 大小为 10 的数组已经装了 4 个元素\nint[] arr = new int[10];\nfor (int i = 0; i < 4; i++) {\n    arr[i] = i;\n}\n\n// 在索引 2 置插入元素 666\n// 需要把索引 2 以及之后的元素都往后移动一位\n// 注意要倒着遍历数组中已有元素避免覆盖，不懂的话请看下方可视化面板\nfor (int i = 4; i > 2; i--) {\n    arr[i] = arr[i - 1];\n}\n\n// 现在第 3 个位置空出来了，可以插入新元素\narr[2] = 666;\n```\n\n```python\n# 大小为 10 的数组已经装了 4 个元素\narr = [0] * 10\nfor i in range(4):\n    arr[i] = i\nfor i in range(4, 2, -1):\n    arr[i] = arr[i - 1]\n# 现在第 3 个位置空出来了，可以插入新元素\narr[2] = 666\n```\n\n##### 数组空间已满 - 时间复杂度是 O(N)\n\n**连续内存必须一次性分配，分配完了之后就不能随意增减了**。因为你这块连续内存后面的内存空间可能已经被其他程序占用了，不能说你想要就给你。\n那怎么办呢？只能重新申请一块更大的内存空间，把原来的数据复制过去，再插入新的元素，这就是数组的「扩容」操作。\n\n```java\n// 大小为 10 的数组已经装满了\nint[] arr = new int[10];\nfor (int i = 0; i < 10; i++) {\n    arr[i] = i;\n}\n\n// 现在想在数组末尾追加一个元素 10\n// 需要先扩容数组\nint[] newArr = new int[20];\n// 把原来的 10 个元素复制过去\nfor (int i = 0; i < 10; i++) {\n    newArr[i] = arr[i];\n}\n\n// 旧数组的内存空间将由垃圾收集器处理\n// ...\n\n// 在新的大数组中追加新元素\nnewArr[10] = 10;\n```\n\n```python\n# 大小为 10 的数组已经装满了\narr = [i for i in range(10)]\n\nnewArr = [0] * 20\nfor i in range(10):\n    newArr[i] = arr[i]\n\n# 释放旧数组的内存空间\n# 在新的大数组中追加新元素\nnewArr[10] = 10\n```\n\n#### 删\n\n##### 删除末尾元素 - 时间复杂度是 O(1)\n\n直接把末尾元素标记为一个特殊值代表已删除就行了，我们这里简单举例，就用 -1 作为特殊值代表已删除好了。\n\n```java\n// 大小为 10 的数组已经装了 5 个元素\nint[] arr = new int[10];\nfor (int i = 0; i < 5; i++) {\n    arr[i] = i;\n}\n\n// 删除末尾元素，暂时用 -1 代表元素已删除\narr[4] = -1;\n```\n\n```python\n# 大小为 10 的数组已经装了 5 个元素\narr = [0] * 10\nfor i in range(5):\n    arr[i] = i\n\n# 删除末尾元素，暂时用 -1 代表元素已删除\narr[4] = -1\n```\n\n##### 删除中间元素 - 时间复杂度是 O(N)\n\n这也要涉及「数据搬移」，把被删元素后面的元素都往前移动一位，保持数组元素的连续性。\n\n```java\n// 大小为 10 的数组已经装了 5 个元素\nint[] arr = new int[10];\nfor (int i = 0; i < 5; i++) {\n    arr[i] = i;\n}\n\n// 删除 arr[1]\n// 需要把 arr[1] 之后的元素都往前移动一位\n// 注意要正着遍历数组中已有元素避免覆盖，不懂的话请看下方可视化面板\nfor (int i = 1; i < 4; i++) {\n    arr[i] = arr[i + 1];\n}\n\n// 最后一个元素置为 -1 代表已删除\narr[4] = -1;\n```\n\n```python\n# 大小为 10 的数组已经装了 5 个元素\narr = [0] * 10\nfor i in range(5):\n    arr[i] = i\nfor i in range(1, 4):\n    arr[i] = arr[i + 1]\n\n# 最后一个元素置为 -1 代表已删除\narr[4] = -1\n```\n\n## 总结\n\n综上，静态数组的增删查改操作的时间复杂度是：\n\n1. 增：\n    - 在末尾追加元素：O(1)O(1)。\n    - 在中间（非末尾）插入元素：O(N)O(N)。\n2. 删：\n    - 删除末尾元素：O(1)O(1)。\n    - 删除中间（非末尾）元素：O(N)O(N)。\n3. 查：给定指定索引，查询索引对应的元素的值，时间复杂度 O(1)O(1)。\n4. 改：给定指定索引，修改索引对应的元素的值，时间复杂度 O(1)O(1)。\n\n\n## 动态数组\n\n**动态数组底层还是静态数组，只是自动帮我们进行数组空间的扩缩容，并把增删查改操作进行了封装，让我们使用起来更方便而已**。\n\n```java\n// 创建动态数组\n// 不用显式指定数组大小，它会根据实际存储的元素数量自动扩缩容\nArrayList<Integer> arr = new ArrayList<>();\n\nfor (int i = 0; i < 10; i++) {\n    // 在末尾追加元素，时间复杂度 O(1)\n    arr.add(i);\n}\n\n// 在中间插入元素，时间复杂度 O(N)\n// 在索引 2 的位置插入元素 666\narr.add(2, 666);\n\n// 在头部插入元素，时间复杂度 O(N)\narr.add(0, -1);\n\n// 删除末尾元素，时间复杂度 O(1)\narr.remove(arr.size() - 1);\n\n// 删除中间元素，时间复杂度 O(N)\n// 删除索引 2 的元素\narr.remove(2);\n\n// 根据索引查询元素，时间复杂度 O(1)\nint a = arr.get(0);\n\n// 根据索引修改元素，时间复杂度 O(1)\narr.set(0, 100);\n\n// 根据元素值查找索引，时间复杂度 O(N)\nint index = arr.indexOf(666);\n```\n\n```python\n# 创建动态数组\n# 不用显式指定数组大小，它会根据实际存储的元素数量自动扩缩容\narr = []\n\nfor i in range(10):\n    # 在末尾追加元素，时间复杂度 O(1)\n    arr.append(i)\n\n# 在中间插入元素，时间复杂度 O(N)\n# 在索引 2 的位置插入元素 666\narr.insert(2, 666)\n\n# 在头部插入元素，时间复杂度 O(N)\narr.insert(0, -1)\n\n# 删除末尾元素，时间复杂度 O(1)\narr.pop()\n\n# 删除中间元素，时间复杂度 O(N)\n# 删除索引 2 的元素\narr.pop(2)\n\n# 根据索引查询元素，时间复杂度 O(1)\na = arr[0]\n\n# 根据索引修改元素，时间复杂度 O(1)\narr[0] = 100\n\n# 根据元素值查找索引，时间复杂度 O(N)\nindex = arr.index(666)\n```","source":"数据结构/数组（顺序存储）基本原理.md","raw":"---\ndate: 2025-07-15\ntitle: 数组（顺序存储）基本原理\ncssclasses:\n  - 数据结构\n  - 数组\n---\n## 静态/动态数组实质\n\n* 「静态数组」就是一块**连续的内存空间**，我们可以通过索引来访问这块内存空间中的元素，这是数组的原始形态。\n* 「动态数组」是编程语言为了方便我们使用，在静态数组的基础上帮我们添加了一些常用的      API，比如 `push, insert, remove` 等等方法\n\n## 静态数组\n\n静态数组在创建的时候就要确定数组的元素类型和元素数量。\n>只有在 C++、Java、Golang 这类语言中才提供了创建静态数组的方式，类似 Python、JavaScript 这类语言并没有提供静态数组的定义方式\n\n#### 定义一个静态数组的方法：\n```java\n// 定义一个大小为 10 的静态数组\nint[] arr = new int[10];\n\n// 使用索引赋值\narr[0] = 1;\narr[1] = 2;\n\n// 使用索引取值\nint a = arr[0];\n```\n\n```python\n# 严格来说，Python 没有静态数组的定义方式\n# 我们暂且使用列表模拟静态数组\n\n# 定义一个大小为 10 的静态数组\narr = [0] * 10\n\n# 使用索引赋值\narr[0] = 1\narr[1] = 2\n\n# 使用索引取值\na = arr[0]\n```\n\n#### 内核操作\n`int arr[10]` 这段代码到底做了什么事情呢？\n1. 在内存中开辟了一段**连续的内存空间**，大小是 `10 * sizeof(int)` 字节。一个 int 在计算机内存中占 4 字节，也就是总共 40 字节。\n2. 定义了一个名为 `arr` 的数组指针，指向这段内存空间的首地址。\n\n `arr[1] = 2` 这段代码又做了什么事情呢？\n1. 计算 `arr` 的首地址加上 `1 * sizeof(int)` 字节（4 字节）的偏移量，找到了内存空间中的第二个元素的**首地址**。\n2. 从这个地址开始的 4 个字节的内存空间中写入了整数 `2`。\n\n>1. 为什么数组的索引从 0 开始？\n\t就是方便取地址。`arr[0]` 就是 `arr` 的首地址，就是 `arr` 的首地址加上 `0 * 4` 字节,从这个地址往后的 4 个字节存储着第一个元素的值；`arr[1]` 就是 `arr` 的首地址加上 `1 * 4` 字节，也就是第二个元素的首地址，这个地址往后的 4 个字节存储着第二个元素的值。`arr[2], arr[3]` 以此类推。\n>2. 因为数组的名字 `arr` 就指向整块内存的首地址，所以数组名 `arr` 就是一个指针。你直接取这个地址的值，就是第一个元素的值。也就是说，`*arr` 的值就是 `乘以arr[0]`，即第一个元素的值\n\t\n==内存空间首地址已知、大小已知、内存空间连续，所以，我们获得了数组的超能力「**随机访问」**：只要给定任何一个数组索引，我可以在 O(1)O(1) 的时间内直接获取到对应元素的值。\n因为我可以通过首地址和索引直接计算出目标元素的内存地址。计算机的内存寻址时间可以认为是 O(1)O(1)，所以数组的随机访问时间复杂度是 O(1)O(1)。==\n\n### 增删查改\n\n#### 增\n##### 末尾追加 - 时间复杂度是 O(1)\n\n```java\n// 大小为 10 的数组已经装了 4 个元素\nint[] arr = new int[10];\nfor (int i = 0; i < 4; i++) {\n    arr[i] = i;\n}\n\n// 现在想在数组末尾追加一个元素 4\narr[4] = 4;\n\n// 再在数组末尾追加一个元素 5\narr[5] = 5;\n\n// 依此类推\n// ...\n```\n\n```python\n# 大小为 10 的数组已经装了 4 个元素\narr = [0] * 10\nfor i in range(4):\n    arr[i] = i\n\n# 现在想在数组末尾追加一个元素 4\narr[4] = 4\n\n# 再在数组末尾追加一个元素 5\narr[5] = 5\n\n# 依此类推\n# ...\n```\n\n##### 中间插入 - 时间复杂度是 O(N)\n\n这就要涉及「数据搬移」，给新元素腾出空位，然后再才能插入新元素。\n\n```java\n// 大小为 10 的数组已经装了 4 个元素\nint[] arr = new int[10];\nfor (int i = 0; i < 4; i++) {\n    arr[i] = i;\n}\n\n// 在索引 2 置插入元素 666\n// 需要把索引 2 以及之后的元素都往后移动一位\n// 注意要倒着遍历数组中已有元素避免覆盖，不懂的话请看下方可视化面板\nfor (int i = 4; i > 2; i--) {\n    arr[i] = arr[i - 1];\n}\n\n// 现在第 3 个位置空出来了，可以插入新元素\narr[2] = 666;\n```\n\n```python\n# 大小为 10 的数组已经装了 4 个元素\narr = [0] * 10\nfor i in range(4):\n    arr[i] = i\nfor i in range(4, 2, -1):\n    arr[i] = arr[i - 1]\n# 现在第 3 个位置空出来了，可以插入新元素\narr[2] = 666\n```\n\n##### 数组空间已满 - 时间复杂度是 O(N)\n\n**连续内存必须一次性分配，分配完了之后就不能随意增减了**。因为你这块连续内存后面的内存空间可能已经被其他程序占用了，不能说你想要就给你。\n那怎么办呢？只能重新申请一块更大的内存空间，把原来的数据复制过去，再插入新的元素，这就是数组的「扩容」操作。\n\n```java\n// 大小为 10 的数组已经装满了\nint[] arr = new int[10];\nfor (int i = 0; i < 10; i++) {\n    arr[i] = i;\n}\n\n// 现在想在数组末尾追加一个元素 10\n// 需要先扩容数组\nint[] newArr = new int[20];\n// 把原来的 10 个元素复制过去\nfor (int i = 0; i < 10; i++) {\n    newArr[i] = arr[i];\n}\n\n// 旧数组的内存空间将由垃圾收集器处理\n// ...\n\n// 在新的大数组中追加新元素\nnewArr[10] = 10;\n```\n\n```python\n# 大小为 10 的数组已经装满了\narr = [i for i in range(10)]\n\nnewArr = [0] * 20\nfor i in range(10):\n    newArr[i] = arr[i]\n\n# 释放旧数组的内存空间\n# 在新的大数组中追加新元素\nnewArr[10] = 10\n```\n\n#### 删\n\n##### 删除末尾元素 - 时间复杂度是 O(1)\n\n直接把末尾元素标记为一个特殊值代表已删除就行了，我们这里简单举例，就用 -1 作为特殊值代表已删除好了。\n\n```java\n// 大小为 10 的数组已经装了 5 个元素\nint[] arr = new int[10];\nfor (int i = 0; i < 5; i++) {\n    arr[i] = i;\n}\n\n// 删除末尾元素，暂时用 -1 代表元素已删除\narr[4] = -1;\n```\n\n```python\n# 大小为 10 的数组已经装了 5 个元素\narr = [0] * 10\nfor i in range(5):\n    arr[i] = i\n\n# 删除末尾元素，暂时用 -1 代表元素已删除\narr[4] = -1\n```\n\n##### 删除中间元素 - 时间复杂度是 O(N)\n\n这也要涉及「数据搬移」，把被删元素后面的元素都往前移动一位，保持数组元素的连续性。\n\n```java\n// 大小为 10 的数组已经装了 5 个元素\nint[] arr = new int[10];\nfor (int i = 0; i < 5; i++) {\n    arr[i] = i;\n}\n\n// 删除 arr[1]\n// 需要把 arr[1] 之后的元素都往前移动一位\n// 注意要正着遍历数组中已有元素避免覆盖，不懂的话请看下方可视化面板\nfor (int i = 1; i < 4; i++) {\n    arr[i] = arr[i + 1];\n}\n\n// 最后一个元素置为 -1 代表已删除\narr[4] = -1;\n```\n\n```python\n# 大小为 10 的数组已经装了 5 个元素\narr = [0] * 10\nfor i in range(5):\n    arr[i] = i\nfor i in range(1, 4):\n    arr[i] = arr[i + 1]\n\n# 最后一个元素置为 -1 代表已删除\narr[4] = -1\n```\n\n## 总结\n\n综上，静态数组的增删查改操作的时间复杂度是：\n\n1. 增：\n    - 在末尾追加元素：O(1)O(1)。\n    - 在中间（非末尾）插入元素：O(N)O(N)。\n2. 删：\n    - 删除末尾元素：O(1)O(1)。\n    - 删除中间（非末尾）元素：O(N)O(N)。\n3. 查：给定指定索引，查询索引对应的元素的值，时间复杂度 O(1)O(1)。\n4. 改：给定指定索引，修改索引对应的元素的值，时间复杂度 O(1)O(1)。\n\n\n## 动态数组\n\n**动态数组底层还是静态数组，只是自动帮我们进行数组空间的扩缩容，并把增删查改操作进行了封装，让我们使用起来更方便而已**。\n\n```java\n// 创建动态数组\n// 不用显式指定数组大小，它会根据实际存储的元素数量自动扩缩容\nArrayList<Integer> arr = new ArrayList<>();\n\nfor (int i = 0; i < 10; i++) {\n    // 在末尾追加元素，时间复杂度 O(1)\n    arr.add(i);\n}\n\n// 在中间插入元素，时间复杂度 O(N)\n// 在索引 2 的位置插入元素 666\narr.add(2, 666);\n\n// 在头部插入元素，时间复杂度 O(N)\narr.add(0, -1);\n\n// 删除末尾元素，时间复杂度 O(1)\narr.remove(arr.size() - 1);\n\n// 删除中间元素，时间复杂度 O(N)\n// 删除索引 2 的元素\narr.remove(2);\n\n// 根据索引查询元素，时间复杂度 O(1)\nint a = arr.get(0);\n\n// 根据索引修改元素，时间复杂度 O(1)\narr.set(0, 100);\n\n// 根据元素值查找索引，时间复杂度 O(N)\nint index = arr.indexOf(666);\n```\n\n```python\n# 创建动态数组\n# 不用显式指定数组大小，它会根据实际存储的元素数量自动扩缩容\narr = []\n\nfor i in range(10):\n    # 在末尾追加元素，时间复杂度 O(1)\n    arr.append(i)\n\n# 在中间插入元素，时间复杂度 O(N)\n# 在索引 2 的位置插入元素 666\narr.insert(2, 666)\n\n# 在头部插入元素，时间复杂度 O(N)\narr.insert(0, -1)\n\n# 删除末尾元素，时间复杂度 O(1)\narr.pop()\n\n# 删除中间元素，时间复杂度 O(N)\n# 删除索引 2 的元素\narr.pop(2)\n\n# 根据索引查询元素，时间复杂度 O(1)\na = arr[0]\n\n# 根据索引修改元素，时间复杂度 O(1)\narr[0] = 100\n\n# 根据元素值查找索引，时间复杂度 O(N)\nindex = arr.index(666)\n```","updated":"2025-07-16T15:01:05.003Z","path":"数据结构/数组（顺序存储）基本原理.html","comments":1,"layout":"page","_id":"cmd63a8cv000ok8v3hdbbgfwr","content":"<h2 id=\"静态-动态数组实质\"><a href=\"#静态-动态数组实质\" class=\"headerlink\" title=\"静态&#x2F;动态数组实质\"></a>静态&#x2F;动态数组实质</h2><ul>\n<li>「静态数组」就是一块<strong>连续的内存空间</strong>，我们可以通过索引来访问这块内存空间中的元素，这是数组的原始形态。</li>\n<li>「动态数组」是编程语言为了方便我们使用，在静态数组的基础上帮我们添加了一些常用的      API，比如 <code>push, insert, remove</code> 等等方法</li>\n</ul>\n<h2 id=\"静态数组\"><a href=\"#静态数组\" class=\"headerlink\" title=\"静态数组\"></a>静态数组</h2><p>静态数组在创建的时候就要确定数组的元素类型和元素数量。</p>\n<blockquote>\n<p>只有在 C++、Java、Golang 这类语言中才提供了创建静态数组的方式，类似 Python、JavaScript 这类语言并没有提供静态数组的定义方式</p>\n</blockquote>\n<h4 id=\"定义一个静态数组的方法：\"><a href=\"#定义一个静态数组的方法：\" class=\"headerlink\" title=\"定义一个静态数组的方法：\"></a>定义一个静态数组的方法：</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义一个大小为 10 的静态数组</span></span><br><span class=\"line\"><span class=\"type\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用索引赋值</span></span><br><span class=\"line\">arr[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">arr[<span class=\"number\">1</span>] = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用索引取值</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> arr[<span class=\"number\">0</span>];</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 严格来说，Python 没有静态数组的定义方式</span></span><br><span class=\"line\"><span class=\"comment\"># 我们暂且使用列表模拟静态数组</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义一个大小为 10 的静态数组</span></span><br><span class=\"line\">arr = [<span class=\"number\">0</span>] * <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用索引赋值</span></span><br><span class=\"line\">arr[<span class=\"number\">0</span>] = <span class=\"number\">1</span></span><br><span class=\"line\">arr[<span class=\"number\">1</span>] = <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用索引取值</span></span><br><span class=\"line\">a = arr[<span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"内核操作\"><a href=\"#内核操作\" class=\"headerlink\" title=\"内核操作\"></a>内核操作</h4><p><code>int arr[10]</code> 这段代码到底做了什么事情呢？</p>\n<ol>\n<li>在内存中开辟了一段<strong>连续的内存空间</strong>，大小是 <code>10 * sizeof(int)</code> 字节。一个 int 在计算机内存中占 4 字节，也就是总共 40 字节。</li>\n<li>定义了一个名为 <code>arr</code> 的数组指针，指向这段内存空间的首地址。</li>\n</ol>\n<p> <code>arr[1] = 2</code> 这段代码又做了什么事情呢？</p>\n<ol>\n<li>计算 <code>arr</code> 的首地址加上 <code>1 * sizeof(int)</code> 字节（4 字节）的偏移量，找到了内存空间中的第二个元素的<strong>首地址</strong>。</li>\n<li>从这个地址开始的 4 个字节的内存空间中写入了整数 <code>2</code>。</li>\n</ol>\n<blockquote>\n<ol>\n<li>为什么数组的索引从 0 开始？<br> 就是方便取地址。<code>arr[0]</code> 就是 <code>arr</code> 的首地址，就是 <code>arr</code> 的首地址加上 <code>0 * 4</code> 字节,从这个地址往后的 4 个字节存储着第一个元素的值；<code>arr[1]</code> 就是 <code>arr</code> 的首地址加上 <code>1 * 4</code> 字节，也就是第二个元素的首地址，这个地址往后的 4 个字节存储着第二个元素的值。<code>arr[2], arr[3]</code> 以此类推。</li>\n<li>因为数组的名字 <code>arr</code> 就指向整块内存的首地址，所以数组名 <code>arr</code> 就是一个指针。你直接取这个地址的值，就是第一个元素的值。也就是说，<code>*arr</code> 的值就是 <code>乘以arr[0]</code>，即第一个元素的值</li>\n</ol>\n</blockquote>\n<p>&#x3D;&#x3D;内存空间首地址已知、大小已知、内存空间连续，所以，我们获得了数组的超能力「<strong>随机访问」</strong>：只要给定任何一个数组索引，我可以在 O(1)O(1) 的时间内直接获取到对应元素的值。<br>因为我可以通过首地址和索引直接计算出目标元素的内存地址。计算机的内存寻址时间可以认为是 O(1)O(1)，所以数组的随机访问时间复杂度是 O(1)O(1)。&#x3D;&#x3D;</p>\n<h3 id=\"增删查改\"><a href=\"#增删查改\" class=\"headerlink\" title=\"增删查改\"></a>增删查改</h3><h4 id=\"增\"><a href=\"#增\" class=\"headerlink\" title=\"增\"></a>增</h4><h5 id=\"末尾追加-时间复杂度是-O-1\"><a href=\"#末尾追加-时间复杂度是-O-1\" class=\"headerlink\" title=\"末尾追加 - 时间复杂度是 O(1)\"></a>末尾追加 - 时间复杂度是 O(1)</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 大小为 10 的数组已经装了 4 个元素</span></span><br><span class=\"line\"><span class=\"type\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">    arr[i] = i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 现在想在数组末尾追加一个元素 4</span></span><br><span class=\"line\">arr[<span class=\"number\">4</span>] = <span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 再在数组末尾追加一个元素 5</span></span><br><span class=\"line\">arr[<span class=\"number\">5</span>] = <span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 依此类推</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 大小为 10 的数组已经装了 4 个元素</span></span><br><span class=\"line\">arr = [<span class=\"number\">0</span>] * <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">4</span>):</span><br><span class=\"line\">    arr[i] = i</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 现在想在数组末尾追加一个元素 4</span></span><br><span class=\"line\">arr[<span class=\"number\">4</span>] = <span class=\"number\">4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 再在数组末尾追加一个元素 5</span></span><br><span class=\"line\">arr[<span class=\"number\">5</span>] = <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 依此类推</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"中间插入-时间复杂度是-O-N\"><a href=\"#中间插入-时间复杂度是-O-N\" class=\"headerlink\" title=\"中间插入 - 时间复杂度是 O(N)\"></a>中间插入 - 时间复杂度是 O(N)</h5><p>这就要涉及「数据搬移」，给新元素腾出空位，然后再才能插入新元素。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 大小为 10 的数组已经装了 4 个元素</span></span><br><span class=\"line\"><span class=\"type\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">    arr[i] = i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在索引 2 置插入元素 666</span></span><br><span class=\"line\"><span class=\"comment\">// 需要把索引 2 以及之后的元素都往后移动一位</span></span><br><span class=\"line\"><span class=\"comment\">// 注意要倒着遍历数组中已有元素避免覆盖，不懂的话请看下方可视化面板</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">4</span>; i &gt; <span class=\"number\">2</span>; i--) &#123;</span><br><span class=\"line\">    arr[i] = arr[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 现在第 3 个位置空出来了，可以插入新元素</span></span><br><span class=\"line\">arr[<span class=\"number\">2</span>] = <span class=\"number\">666</span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 大小为 10 的数组已经装了 4 个元素</span></span><br><span class=\"line\">arr = [<span class=\"number\">0</span>] * <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">4</span>):</span><br><span class=\"line\">    arr[i] = i</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">4</span>, <span class=\"number\">2</span>, -<span class=\"number\">1</span>):</span><br><span class=\"line\">    arr[i] = arr[i - <span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"comment\"># 现在第 3 个位置空出来了，可以插入新元素</span></span><br><span class=\"line\">arr[<span class=\"number\">2</span>] = <span class=\"number\">666</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"数组空间已满-时间复杂度是-O-N\"><a href=\"#数组空间已满-时间复杂度是-O-N\" class=\"headerlink\" title=\"数组空间已满 - 时间复杂度是 O(N)\"></a>数组空间已满 - 时间复杂度是 O(N)</h5><p><strong>连续内存必须一次性分配，分配完了之后就不能随意增减了</strong>。因为你这块连续内存后面的内存空间可能已经被其他程序占用了，不能说你想要就给你。<br>那怎么办呢？只能重新申请一块更大的内存空间，把原来的数据复制过去，再插入新的元素，这就是数组的「扩容」操作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 大小为 10 的数组已经装满了</span></span><br><span class=\"line\"><span class=\"type\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    arr[i] = i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 现在想在数组末尾追加一个元素 10</span></span><br><span class=\"line\"><span class=\"comment\">// 需要先扩容数组</span></span><br><span class=\"line\"><span class=\"type\">int</span>[] newArr = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">20</span>];</span><br><span class=\"line\"><span class=\"comment\">// 把原来的 10 个元素复制过去</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    newArr[i] = arr[i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 旧数组的内存空间将由垃圾收集器处理</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在新的大数组中追加新元素</span></span><br><span class=\"line\">newArr[<span class=\"number\">10</span>] = <span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 大小为 10 的数组已经装满了</span></span><br><span class=\"line\">arr = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\">newArr = [<span class=\"number\">0</span>] * <span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>):</span><br><span class=\"line\">    newArr[i] = arr[i]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 释放旧数组的内存空间</span></span><br><span class=\"line\"><span class=\"comment\"># 在新的大数组中追加新元素</span></span><br><span class=\"line\">newArr[<span class=\"number\">10</span>] = <span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"删\"><a href=\"#删\" class=\"headerlink\" title=\"删\"></a>删</h4><h5 id=\"删除末尾元素-时间复杂度是-O-1\"><a href=\"#删除末尾元素-时间复杂度是-O-1\" class=\"headerlink\" title=\"删除末尾元素 - 时间复杂度是 O(1)\"></a>删除末尾元素 - 时间复杂度是 O(1)</h5><p>直接把末尾元素标记为一个特殊值代表已删除就行了，我们这里简单举例，就用 -1 作为特殊值代表已删除好了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 大小为 10 的数组已经装了 5 个元素</span></span><br><span class=\"line\"><span class=\"type\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    arr[i] = i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除末尾元素，暂时用 -1 代表元素已删除</span></span><br><span class=\"line\">arr[<span class=\"number\">4</span>] = -<span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 大小为 10 的数组已经装了 5 个元素</span></span><br><span class=\"line\">arr = [<span class=\"number\">0</span>] * <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">5</span>):</span><br><span class=\"line\">    arr[i] = i</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除末尾元素，暂时用 -1 代表元素已删除</span></span><br><span class=\"line\">arr[<span class=\"number\">4</span>] = -<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"删除中间元素-时间复杂度是-O-N\"><a href=\"#删除中间元素-时间复杂度是-O-N\" class=\"headerlink\" title=\"删除中间元素 - 时间复杂度是 O(N)\"></a>删除中间元素 - 时间复杂度是 O(N)</h5><p>这也要涉及「数据搬移」，把被删元素后面的元素都往前移动一位，保持数组元素的连续性。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 大小为 10 的数组已经装了 5 个元素</span></span><br><span class=\"line\"><span class=\"type\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    arr[i] = i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除 arr[1]</span></span><br><span class=\"line\"><span class=\"comment\">// 需要把 arr[1] 之后的元素都往前移动一位</span></span><br><span class=\"line\"><span class=\"comment\">// 注意要正着遍历数组中已有元素避免覆盖，不懂的话请看下方可视化面板</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">    arr[i] = arr[i + <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 最后一个元素置为 -1 代表已删除</span></span><br><span class=\"line\">arr[<span class=\"number\">4</span>] = -<span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 大小为 10 的数组已经装了 5 个元素</span></span><br><span class=\"line\">arr = [<span class=\"number\">0</span>] * <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">5</span>):</span><br><span class=\"line\">    arr[i] = i</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">4</span>):</span><br><span class=\"line\">    arr[i] = arr[i + <span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 最后一个元素置为 -1 代表已删除</span></span><br><span class=\"line\">arr[<span class=\"number\">4</span>] = -<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>综上，静态数组的增删查改操作的时间复杂度是：</p>\n<ol>\n<li>增：<ul>\n<li>在末尾追加元素：O(1)O(1)。</li>\n<li>在中间（非末尾）插入元素：O(N)O(N)。</li>\n</ul>\n</li>\n<li>删：<ul>\n<li>删除末尾元素：O(1)O(1)。</li>\n<li>删除中间（非末尾）元素：O(N)O(N)。</li>\n</ul>\n</li>\n<li>查：给定指定索引，查询索引对应的元素的值，时间复杂度 O(1)O(1)。</li>\n<li>改：给定指定索引，修改索引对应的元素的值，时间复杂度 O(1)O(1)。</li>\n</ol>\n<h2 id=\"动态数组\"><a href=\"#动态数组\" class=\"headerlink\" title=\"动态数组\"></a>动态数组</h2><p><strong>动态数组底层还是静态数组，只是自动帮我们进行数组空间的扩缩容，并把增删查改操作进行了封装，让我们使用起来更方便而已</strong>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建动态数组</span></span><br><span class=\"line\"><span class=\"comment\">// 不用显式指定数组大小，它会根据实际存储的元素数量自动扩缩容</span></span><br><span class=\"line\">ArrayList&lt;Integer&gt; arr = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 在末尾追加元素，时间复杂度 O(1)</span></span><br><span class=\"line\">    arr.add(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在中间插入元素，时间复杂度 O(N)</span></span><br><span class=\"line\"><span class=\"comment\">// 在索引 2 的位置插入元素 666</span></span><br><span class=\"line\">arr.add(<span class=\"number\">2</span>, <span class=\"number\">666</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在头部插入元素，时间复杂度 O(N)</span></span><br><span class=\"line\">arr.add(<span class=\"number\">0</span>, -<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除末尾元素，时间复杂度 O(1)</span></span><br><span class=\"line\">arr.remove(arr.size() - <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除中间元素，时间复杂度 O(N)</span></span><br><span class=\"line\"><span class=\"comment\">// 删除索引 2 的元素</span></span><br><span class=\"line\">arr.remove(<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 根据索引查询元素，时间复杂度 O(1)</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> arr.get(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 根据索引修改元素，时间复杂度 O(1)</span></span><br><span class=\"line\">arr.set(<span class=\"number\">0</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 根据元素值查找索引，时间复杂度 O(N)</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> arr.indexOf(<span class=\"number\">666</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建动态数组</span></span><br><span class=\"line\"><span class=\"comment\"># 不用显式指定数组大小，它会根据实际存储的元素数量自动扩缩容</span></span><br><span class=\"line\">arr = []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 在末尾追加元素，时间复杂度 O(1)</span></span><br><span class=\"line\">    arr.append(i)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在中间插入元素，时间复杂度 O(N)</span></span><br><span class=\"line\"><span class=\"comment\"># 在索引 2 的位置插入元素 666</span></span><br><span class=\"line\">arr.insert(<span class=\"number\">2</span>, <span class=\"number\">666</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在头部插入元素，时间复杂度 O(N)</span></span><br><span class=\"line\">arr.insert(<span class=\"number\">0</span>, -<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除末尾元素，时间复杂度 O(1)</span></span><br><span class=\"line\">arr.pop()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除中间元素，时间复杂度 O(N)</span></span><br><span class=\"line\"><span class=\"comment\"># 删除索引 2 的元素</span></span><br><span class=\"line\">arr.pop(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 根据索引查询元素，时间复杂度 O(1)</span></span><br><span class=\"line\">a = arr[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 根据索引修改元素，时间复杂度 O(1)</span></span><br><span class=\"line\">arr[<span class=\"number\">0</span>] = <span class=\"number\">100</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 根据元素值查找索引，时间复杂度 O(N)</span></span><br><span class=\"line\">index = arr.index(<span class=\"number\">666</span>)</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"静态-动态数组实质\"><a href=\"#静态-动态数组实质\" class=\"headerlink\" title=\"静态&#x2F;动态数组实质\"></a>静态&#x2F;动态数组实质</h2><ul>\n<li>「静态数组」就是一块<strong>连续的内存空间</strong>，我们可以通过索引来访问这块内存空间中的元素，这是数组的原始形态。</li>\n<li>「动态数组」是编程语言为了方便我们使用，在静态数组的基础上帮我们添加了一些常用的      API，比如 <code>push, insert, remove</code> 等等方法</li>\n</ul>\n<h2 id=\"静态数组\"><a href=\"#静态数组\" class=\"headerlink\" title=\"静态数组\"></a>静态数组</h2><p>静态数组在创建的时候就要确定数组的元素类型和元素数量。</p>\n<blockquote>\n<p>只有在 C++、Java、Golang 这类语言中才提供了创建静态数组的方式，类似 Python、JavaScript 这类语言并没有提供静态数组的定义方式</p>\n</blockquote>\n<h4 id=\"定义一个静态数组的方法：\"><a href=\"#定义一个静态数组的方法：\" class=\"headerlink\" title=\"定义一个静态数组的方法：\"></a>定义一个静态数组的方法：</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义一个大小为 10 的静态数组</span></span><br><span class=\"line\"><span class=\"type\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用索引赋值</span></span><br><span class=\"line\">arr[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">arr[<span class=\"number\">1</span>] = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用索引取值</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> arr[<span class=\"number\">0</span>];</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 严格来说，Python 没有静态数组的定义方式</span></span><br><span class=\"line\"><span class=\"comment\"># 我们暂且使用列表模拟静态数组</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义一个大小为 10 的静态数组</span></span><br><span class=\"line\">arr = [<span class=\"number\">0</span>] * <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用索引赋值</span></span><br><span class=\"line\">arr[<span class=\"number\">0</span>] = <span class=\"number\">1</span></span><br><span class=\"line\">arr[<span class=\"number\">1</span>] = <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用索引取值</span></span><br><span class=\"line\">a = arr[<span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"内核操作\"><a href=\"#内核操作\" class=\"headerlink\" title=\"内核操作\"></a>内核操作</h4><p><code>int arr[10]</code> 这段代码到底做了什么事情呢？</p>\n<ol>\n<li>在内存中开辟了一段<strong>连续的内存空间</strong>，大小是 <code>10 * sizeof(int)</code> 字节。一个 int 在计算机内存中占 4 字节，也就是总共 40 字节。</li>\n<li>定义了一个名为 <code>arr</code> 的数组指针，指向这段内存空间的首地址。</li>\n</ol>\n<p> <code>arr[1] = 2</code> 这段代码又做了什么事情呢？</p>\n<ol>\n<li>计算 <code>arr</code> 的首地址加上 <code>1 * sizeof(int)</code> 字节（4 字节）的偏移量，找到了内存空间中的第二个元素的<strong>首地址</strong>。</li>\n<li>从这个地址开始的 4 个字节的内存空间中写入了整数 <code>2</code>。</li>\n</ol>\n<blockquote>\n<ol>\n<li>为什么数组的索引从 0 开始？<br> 就是方便取地址。<code>arr[0]</code> 就是 <code>arr</code> 的首地址，就是 <code>arr</code> 的首地址加上 <code>0 * 4</code> 字节,从这个地址往后的 4 个字节存储着第一个元素的值；<code>arr[1]</code> 就是 <code>arr</code> 的首地址加上 <code>1 * 4</code> 字节，也就是第二个元素的首地址，这个地址往后的 4 个字节存储着第二个元素的值。<code>arr[2], arr[3]</code> 以此类推。</li>\n<li>因为数组的名字 <code>arr</code> 就指向整块内存的首地址，所以数组名 <code>arr</code> 就是一个指针。你直接取这个地址的值，就是第一个元素的值。也就是说，<code>*arr</code> 的值就是 <code>乘以arr[0]</code>，即第一个元素的值</li>\n</ol>\n</blockquote>\n<p>&#x3D;&#x3D;内存空间首地址已知、大小已知、内存空间连续，所以，我们获得了数组的超能力「<strong>随机访问」</strong>：只要给定任何一个数组索引，我可以在 O(1)O(1) 的时间内直接获取到对应元素的值。<br>因为我可以通过首地址和索引直接计算出目标元素的内存地址。计算机的内存寻址时间可以认为是 O(1)O(1)，所以数组的随机访问时间复杂度是 O(1)O(1)。&#x3D;&#x3D;</p>\n<h3 id=\"增删查改\"><a href=\"#增删查改\" class=\"headerlink\" title=\"增删查改\"></a>增删查改</h3><h4 id=\"增\"><a href=\"#增\" class=\"headerlink\" title=\"增\"></a>增</h4><h5 id=\"末尾追加-时间复杂度是-O-1\"><a href=\"#末尾追加-时间复杂度是-O-1\" class=\"headerlink\" title=\"末尾追加 - 时间复杂度是 O(1)\"></a>末尾追加 - 时间复杂度是 O(1)</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 大小为 10 的数组已经装了 4 个元素</span></span><br><span class=\"line\"><span class=\"type\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">    arr[i] = i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 现在想在数组末尾追加一个元素 4</span></span><br><span class=\"line\">arr[<span class=\"number\">4</span>] = <span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 再在数组末尾追加一个元素 5</span></span><br><span class=\"line\">arr[<span class=\"number\">5</span>] = <span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 依此类推</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 大小为 10 的数组已经装了 4 个元素</span></span><br><span class=\"line\">arr = [<span class=\"number\">0</span>] * <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">4</span>):</span><br><span class=\"line\">    arr[i] = i</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 现在想在数组末尾追加一个元素 4</span></span><br><span class=\"line\">arr[<span class=\"number\">4</span>] = <span class=\"number\">4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 再在数组末尾追加一个元素 5</span></span><br><span class=\"line\">arr[<span class=\"number\">5</span>] = <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 依此类推</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"中间插入-时间复杂度是-O-N\"><a href=\"#中间插入-时间复杂度是-O-N\" class=\"headerlink\" title=\"中间插入 - 时间复杂度是 O(N)\"></a>中间插入 - 时间复杂度是 O(N)</h5><p>这就要涉及「数据搬移」，给新元素腾出空位，然后再才能插入新元素。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 大小为 10 的数组已经装了 4 个元素</span></span><br><span class=\"line\"><span class=\"type\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">    arr[i] = i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在索引 2 置插入元素 666</span></span><br><span class=\"line\"><span class=\"comment\">// 需要把索引 2 以及之后的元素都往后移动一位</span></span><br><span class=\"line\"><span class=\"comment\">// 注意要倒着遍历数组中已有元素避免覆盖，不懂的话请看下方可视化面板</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">4</span>; i &gt; <span class=\"number\">2</span>; i--) &#123;</span><br><span class=\"line\">    arr[i] = arr[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 现在第 3 个位置空出来了，可以插入新元素</span></span><br><span class=\"line\">arr[<span class=\"number\">2</span>] = <span class=\"number\">666</span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 大小为 10 的数组已经装了 4 个元素</span></span><br><span class=\"line\">arr = [<span class=\"number\">0</span>] * <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">4</span>):</span><br><span class=\"line\">    arr[i] = i</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">4</span>, <span class=\"number\">2</span>, -<span class=\"number\">1</span>):</span><br><span class=\"line\">    arr[i] = arr[i - <span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"comment\"># 现在第 3 个位置空出来了，可以插入新元素</span></span><br><span class=\"line\">arr[<span class=\"number\">2</span>] = <span class=\"number\">666</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"数组空间已满-时间复杂度是-O-N\"><a href=\"#数组空间已满-时间复杂度是-O-N\" class=\"headerlink\" title=\"数组空间已满 - 时间复杂度是 O(N)\"></a>数组空间已满 - 时间复杂度是 O(N)</h5><p><strong>连续内存必须一次性分配，分配完了之后就不能随意增减了</strong>。因为你这块连续内存后面的内存空间可能已经被其他程序占用了，不能说你想要就给你。<br>那怎么办呢？只能重新申请一块更大的内存空间，把原来的数据复制过去，再插入新的元素，这就是数组的「扩容」操作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 大小为 10 的数组已经装满了</span></span><br><span class=\"line\"><span class=\"type\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    arr[i] = i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 现在想在数组末尾追加一个元素 10</span></span><br><span class=\"line\"><span class=\"comment\">// 需要先扩容数组</span></span><br><span class=\"line\"><span class=\"type\">int</span>[] newArr = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">20</span>];</span><br><span class=\"line\"><span class=\"comment\">// 把原来的 10 个元素复制过去</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    newArr[i] = arr[i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 旧数组的内存空间将由垃圾收集器处理</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在新的大数组中追加新元素</span></span><br><span class=\"line\">newArr[<span class=\"number\">10</span>] = <span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 大小为 10 的数组已经装满了</span></span><br><span class=\"line\">arr = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\">newArr = [<span class=\"number\">0</span>] * <span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>):</span><br><span class=\"line\">    newArr[i] = arr[i]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 释放旧数组的内存空间</span></span><br><span class=\"line\"><span class=\"comment\"># 在新的大数组中追加新元素</span></span><br><span class=\"line\">newArr[<span class=\"number\">10</span>] = <span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"删\"><a href=\"#删\" class=\"headerlink\" title=\"删\"></a>删</h4><h5 id=\"删除末尾元素-时间复杂度是-O-1\"><a href=\"#删除末尾元素-时间复杂度是-O-1\" class=\"headerlink\" title=\"删除末尾元素 - 时间复杂度是 O(1)\"></a>删除末尾元素 - 时间复杂度是 O(1)</h5><p>直接把末尾元素标记为一个特殊值代表已删除就行了，我们这里简单举例，就用 -1 作为特殊值代表已删除好了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 大小为 10 的数组已经装了 5 个元素</span></span><br><span class=\"line\"><span class=\"type\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    arr[i] = i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除末尾元素，暂时用 -1 代表元素已删除</span></span><br><span class=\"line\">arr[<span class=\"number\">4</span>] = -<span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 大小为 10 的数组已经装了 5 个元素</span></span><br><span class=\"line\">arr = [<span class=\"number\">0</span>] * <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">5</span>):</span><br><span class=\"line\">    arr[i] = i</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除末尾元素，暂时用 -1 代表元素已删除</span></span><br><span class=\"line\">arr[<span class=\"number\">4</span>] = -<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"删除中间元素-时间复杂度是-O-N\"><a href=\"#删除中间元素-时间复杂度是-O-N\" class=\"headerlink\" title=\"删除中间元素 - 时间复杂度是 O(N)\"></a>删除中间元素 - 时间复杂度是 O(N)</h5><p>这也要涉及「数据搬移」，把被删元素后面的元素都往前移动一位，保持数组元素的连续性。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 大小为 10 的数组已经装了 5 个元素</span></span><br><span class=\"line\"><span class=\"type\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    arr[i] = i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除 arr[1]</span></span><br><span class=\"line\"><span class=\"comment\">// 需要把 arr[1] 之后的元素都往前移动一位</span></span><br><span class=\"line\"><span class=\"comment\">// 注意要正着遍历数组中已有元素避免覆盖，不懂的话请看下方可视化面板</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">    arr[i] = arr[i + <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 最后一个元素置为 -1 代表已删除</span></span><br><span class=\"line\">arr[<span class=\"number\">4</span>] = -<span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 大小为 10 的数组已经装了 5 个元素</span></span><br><span class=\"line\">arr = [<span class=\"number\">0</span>] * <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">5</span>):</span><br><span class=\"line\">    arr[i] = i</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">4</span>):</span><br><span class=\"line\">    arr[i] = arr[i + <span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 最后一个元素置为 -1 代表已删除</span></span><br><span class=\"line\">arr[<span class=\"number\">4</span>] = -<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>综上，静态数组的增删查改操作的时间复杂度是：</p>\n<ol>\n<li>增：<ul>\n<li>在末尾追加元素：O(1)O(1)。</li>\n<li>在中间（非末尾）插入元素：O(N)O(N)。</li>\n</ul>\n</li>\n<li>删：<ul>\n<li>删除末尾元素：O(1)O(1)。</li>\n<li>删除中间（非末尾）元素：O(N)O(N)。</li>\n</ul>\n</li>\n<li>查：给定指定索引，查询索引对应的元素的值，时间复杂度 O(1)O(1)。</li>\n<li>改：给定指定索引，修改索引对应的元素的值，时间复杂度 O(1)O(1)。</li>\n</ol>\n<h2 id=\"动态数组\"><a href=\"#动态数组\" class=\"headerlink\" title=\"动态数组\"></a>动态数组</h2><p><strong>动态数组底层还是静态数组，只是自动帮我们进行数组空间的扩缩容，并把增删查改操作进行了封装，让我们使用起来更方便而已</strong>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建动态数组</span></span><br><span class=\"line\"><span class=\"comment\">// 不用显式指定数组大小，它会根据实际存储的元素数量自动扩缩容</span></span><br><span class=\"line\">ArrayList&lt;Integer&gt; arr = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 在末尾追加元素，时间复杂度 O(1)</span></span><br><span class=\"line\">    arr.add(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在中间插入元素，时间复杂度 O(N)</span></span><br><span class=\"line\"><span class=\"comment\">// 在索引 2 的位置插入元素 666</span></span><br><span class=\"line\">arr.add(<span class=\"number\">2</span>, <span class=\"number\">666</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在头部插入元素，时间复杂度 O(N)</span></span><br><span class=\"line\">arr.add(<span class=\"number\">0</span>, -<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除末尾元素，时间复杂度 O(1)</span></span><br><span class=\"line\">arr.remove(arr.size() - <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除中间元素，时间复杂度 O(N)</span></span><br><span class=\"line\"><span class=\"comment\">// 删除索引 2 的元素</span></span><br><span class=\"line\">arr.remove(<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 根据索引查询元素，时间复杂度 O(1)</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> arr.get(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 根据索引修改元素，时间复杂度 O(1)</span></span><br><span class=\"line\">arr.set(<span class=\"number\">0</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 根据元素值查找索引，时间复杂度 O(N)</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> arr.indexOf(<span class=\"number\">666</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建动态数组</span></span><br><span class=\"line\"><span class=\"comment\"># 不用显式指定数组大小，它会根据实际存储的元素数量自动扩缩容</span></span><br><span class=\"line\">arr = []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 在末尾追加元素，时间复杂度 O(1)</span></span><br><span class=\"line\">    arr.append(i)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在中间插入元素，时间复杂度 O(N)</span></span><br><span class=\"line\"><span class=\"comment\"># 在索引 2 的位置插入元素 666</span></span><br><span class=\"line\">arr.insert(<span class=\"number\">2</span>, <span class=\"number\">666</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在头部插入元素，时间复杂度 O(N)</span></span><br><span class=\"line\">arr.insert(<span class=\"number\">0</span>, -<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除末尾元素，时间复杂度 O(1)</span></span><br><span class=\"line\">arr.pop()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除中间元素，时间复杂度 O(N)</span></span><br><span class=\"line\"><span class=\"comment\"># 删除索引 2 的元素</span></span><br><span class=\"line\">arr.pop(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 根据索引查询元素，时间复杂度 O(1)</span></span><br><span class=\"line\">a = arr[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 根据索引修改元素，时间复杂度 O(1)</span></span><br><span class=\"line\">arr[<span class=\"number\">0</span>] = <span class=\"number\">100</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 根据元素值查找索引，时间复杂度 O(N)</span></span><br><span class=\"line\">index = arr.index(<span class=\"number\">666</span>)</span><br></pre></td></tr></table></figure>"}],"Post":[{"title":"Debug 目录","date":"2025-06-13T16:00:00.000Z","_content":"- [博客流程](/Debug/博客流程)","source":"_posts/Debug/index.md","raw":"---\ntitle: Debug 目录\ndate: 2025-06-14\ncategories:\n  - Debug\n---\n- [博客流程](/Debug/博客流程)","slug":"Debug/index","published":1,"updated":"2025-07-15T08:47:21.580Z","comments":1,"layout":"post","photos":[],"_id":"cmd63a8cn0001k8v38u2vc70g","content":"<ul>\n<li><a href=\"/Debug/%E5%8D%9A%E5%AE%A2%E6%B5%81%E7%A8%8B\">博客流程</a></li>\n</ul>\n","excerpt":"","more":"<ul>\n<li><a href=\"/Debug/%E5%8D%9A%E5%AE%A2%E6%B5%81%E7%A8%8B\">博客流程</a></li>\n</ul>\n"},{"title":"CS61B 目录","date":"2025-06-13T16:00:00.000Z","_content":"- [proj0](/CS61B/proj0)\n- [proj1a](/CS61B/proj1a)\n- [Leb03](/CS61B/Leb03)\n- [proj1b](/CS61B/proj1b)\n\n","source":"_posts/CS61B/index.md","raw":"---\ntitle: CS61B 目录\ndate: 2025-06-14\ncategories:\n  - CS61B\n---\n- [proj0](/CS61B/proj0)\n- [proj1a](/CS61B/proj1a)\n- [Leb03](/CS61B/Leb03)\n- [proj1b](/CS61B/proj1b)\n\n","slug":"CS61B/index","published":1,"updated":"2025-07-15T09:03:14.285Z","comments":1,"layout":"post","photos":[],"_id":"cmd63a8cp0003k8v3cezi1jew","content":"<ul>\n<li><a href=\"/CS61B/proj0\">proj0</a></li>\n<li><a href=\"/CS61B/proj1a\">proj1a</a></li>\n<li><a href=\"/CS61B/Leb03\">Leb03</a></li>\n<li><a href=\"/CS61B/proj1b\">proj1b</a></li>\n</ul>\n","excerpt":"","more":"<ul>\n<li><a href=\"/CS61B/proj0\">proj0</a></li>\n<li><a href=\"/CS61B/proj1a\">proj1a</a></li>\n<li><a href=\"/CS61B/Leb03\">Leb03</a></li>\n<li><a href=\"/CS61B/proj1b\">proj1b</a></li>\n</ul>\n"},{"title":"Serve 目录","date":"2025-07-15T07:16:48.000Z","_content":"- [SSH概念](/Serve/SSH概念)\n- [为什么称 Tomcat 为服务器？(IP,端口,域名)](/Serve/为什么称Tomcat为服务器？)","source":"_posts/Serve/index.md","raw":"---\ntitle: Serve 目录\ndate: 2025-07-15 15:16:48\ntags:\n  - Serve\n---\n- [SSH概念](/Serve/SSH概念)\n- [为什么称 Tomcat 为服务器？(IP,端口,域名)](/Serve/为什么称Tomcat为服务器？)","slug":"Serve/index","published":1,"updated":"2025-07-16T10:41:37.095Z","comments":1,"layout":"post","photos":[],"_id":"cmd63a8cr0006k8v3e58ufkec","content":"<ul>\n<li><a href=\"/Serve/SSH%E6%A6%82%E5%BF%B5\">SSH概念</a></li>\n<li><a href=\"/Serve/%E4%B8%BA%E4%BB%80%E4%B9%88%E7%A7%B0Tomcat%E4%B8%BA%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%9F\">为什么称 Tomcat 为服务器？(IP,端口,域名)</a></li>\n</ul>\n","excerpt":"","more":"<ul>\n<li><a href=\"/Serve/SSH%E6%A6%82%E5%BF%B5\">SSH概念</a></li>\n<li><a href=\"/Serve/%E4%B8%BA%E4%BB%80%E4%B9%88%E7%A7%B0Tomcat%E4%B8%BA%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%9F\">为什么称 Tomcat 为服务器？(IP,端口,域名)</a></li>\n</ul>\n"},{"title":"数据结构目录","date":"2025-07-15T16:00:00.000Z","_content":"- [数组（顺序存储）基本原理](/数据结构/数组（顺序存储）基本原理)\n- [动态数组代码实现](/数据结构/动态数组代码实现)","source":"_posts/数据结构/index.md","raw":"---\ntitle: 数据结构目录\ndate: 2025-07-16\ncategories:\n  - 数据结构\n---\n- [数组（顺序存储）基本原理](/数据结构/数组（顺序存储）基本原理)\n- [动态数组代码实现](/数据结构/动态数组代码实现)","slug":"数据结构/index","published":1,"updated":"2025-07-16T14:55:39.825Z","comments":1,"layout":"post","photos":[],"_id":"cmd63a8cs0008k8v3ft5206sl","content":"<ul>\n<li><a href=\"/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E7%BB%84%EF%BC%88%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8%EF%BC%89%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86\">数组（顺序存储）基本原理</a></li>\n<li><a href=\"/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%8A%A8%E6%80%81%E6%95%B0%E7%BB%84%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0\">动态数组代码实现</a></li>\n</ul>\n","excerpt":"","more":"<ul>\n<li><a href=\"/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E7%BB%84%EF%BC%88%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8%EF%BC%89%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86\">数组（顺序存储）基本原理</a></li>\n<li><a href=\"/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%8A%A8%E6%80%81%E6%95%B0%E7%BB%84%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0\">动态数组代码实现</a></li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cmd63a8cn0001k8v38u2vc70g","category_id":"cmd63a8cq0004k8v3992z3ifd","_id":"cmd63a8cu000ek8v3aexu3of9"},{"post_id":"cmd63a8cp0003k8v3cezi1jew","category_id":"cmd63a8ct000bk8v36egp9b56","_id":"cmd63a8cv000jk8v3assc5ksq"},{"post_id":"cmd63a8cs0008k8v3ft5206sl","category_id":"cmd63a8cu000fk8v37kh0d4dd","_id":"cmd63a8cv000mk8v35t9edr7s"}],"PostTag":[{"post_id":"cmd63a8cr0006k8v3e58ufkec","tag_id":"cmd63a8ct0009k8v37532hsds","_id":"cmd63a8cu000gk8v3dw4ldvoa"}],"Tag":[{"name":"Serve","_id":"cmd63a8ct0009k8v37532hsds"}]}}